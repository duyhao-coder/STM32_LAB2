
EX_1_LAB2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027d8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080028e4  080028e4  000128e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002908  08002908  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08002908  08002908  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002908  08002908  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002908  08002908  00012908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800290c  0800290c  0001290c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  2000005c  0800296c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  0800296c  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008936  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000156e  00000000  00000000  000289bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000998  00000000  00000000  00029f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f0  00000000  00000000  0002a8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016362  00000000  00000000  0002b1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000097c9  00000000  00000000  0004151a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000823df  00000000  00000000  0004ace3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cd0c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027a0  00000000  00000000  000cd118  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080028cc 	.word	0x080028cc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080028cc 	.word	0x080028cc

0800014c <display7SEG>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void display7SEG(int num)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b09      	cmp	r3, #9
 8000158:	f200 8180 	bhi.w	800045c <display7SEG+0x310>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <display7SEG+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	0800018d 	.word	0x0800018d
 8000168:	080001d5 	.word	0x080001d5
 800016c:	0800021d 	.word	0x0800021d
 8000170:	08000265 	.word	0x08000265
 8000174:	080002ad 	.word	0x080002ad
 8000178:	080002f5 	.word	0x080002f5
 800017c:	0800033d 	.word	0x0800033d
 8000180:	08000385 	.word	0x08000385
 8000184:	080003cd 	.word	0x080003cd
 8000188:	08000415 	.word	0x08000415
	switch(num){
	case 0:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 800018c:	2200      	movs	r2, #0
 800018e:	2101      	movs	r1, #1
 8000190:	48b4      	ldr	r0, [pc, #720]	; (8000464 <display7SEG+0x318>)
 8000192:	f001 fb85 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000196:	2200      	movs	r2, #0
 8000198:	2102      	movs	r1, #2
 800019a:	48b2      	ldr	r0, [pc, #712]	; (8000464 <display7SEG+0x318>)
 800019c:	f001 fb80 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80001a0:	2200      	movs	r2, #0
 80001a2:	2104      	movs	r1, #4
 80001a4:	48af      	ldr	r0, [pc, #700]	; (8000464 <display7SEG+0x318>)
 80001a6:	f001 fb7b 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 80001aa:	2200      	movs	r2, #0
 80001ac:	2108      	movs	r1, #8
 80001ae:	48ad      	ldr	r0, [pc, #692]	; (8000464 <display7SEG+0x318>)
 80001b0:	f001 fb76 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 80001b4:	2200      	movs	r2, #0
 80001b6:	2110      	movs	r1, #16
 80001b8:	48aa      	ldr	r0, [pc, #680]	; (8000464 <display7SEG+0x318>)
 80001ba:	f001 fb71 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 80001be:	2200      	movs	r2, #0
 80001c0:	2120      	movs	r1, #32
 80001c2:	48a8      	ldr	r0, [pc, #672]	; (8000464 <display7SEG+0x318>)
 80001c4:	f001 fb6c 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 80001c8:	2201      	movs	r2, #1
 80001ca:	2140      	movs	r1, #64	; 0x40
 80001cc:	48a5      	ldr	r0, [pc, #660]	; (8000464 <display7SEG+0x318>)
 80001ce:	f001 fb67 	bl	80018a0 <HAL_GPIO_WritePin>
		break;
 80001d2:	e143      	b.n	800045c <display7SEG+0x310>
	case 1:


		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_SET);
 80001d4:	2201      	movs	r2, #1
 80001d6:	2101      	movs	r1, #1
 80001d8:	48a2      	ldr	r0, [pc, #648]	; (8000464 <display7SEG+0x318>)
 80001da:	f001 fb61 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 80001de:	2200      	movs	r2, #0
 80001e0:	2102      	movs	r1, #2
 80001e2:	48a0      	ldr	r0, [pc, #640]	; (8000464 <display7SEG+0x318>)
 80001e4:	f001 fb5c 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80001e8:	2200      	movs	r2, #0
 80001ea:	2104      	movs	r1, #4
 80001ec:	489d      	ldr	r0, [pc, #628]	; (8000464 <display7SEG+0x318>)
 80001ee:	f001 fb57 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 80001f2:	2201      	movs	r2, #1
 80001f4:	2108      	movs	r1, #8
 80001f6:	489b      	ldr	r0, [pc, #620]	; (8000464 <display7SEG+0x318>)
 80001f8:	f001 fb52 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 80001fc:	2201      	movs	r2, #1
 80001fe:	2110      	movs	r1, #16
 8000200:	4898      	ldr	r0, [pc, #608]	; (8000464 <display7SEG+0x318>)
 8000202:	f001 fb4d 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 8000206:	2201      	movs	r2, #1
 8000208:	2120      	movs	r1, #32
 800020a:	4896      	ldr	r0, [pc, #600]	; (8000464 <display7SEG+0x318>)
 800020c:	f001 fb48 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 8000210:	2201      	movs	r2, #1
 8000212:	2140      	movs	r1, #64	; 0x40
 8000214:	4893      	ldr	r0, [pc, #588]	; (8000464 <display7SEG+0x318>)
 8000216:	f001 fb43 	bl	80018a0 <HAL_GPIO_WritePin>
		break;
 800021a:	e11f      	b.n	800045c <display7SEG+0x310>

	case 2:

		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 800021c:	2200      	movs	r2, #0
 800021e:	2101      	movs	r1, #1
 8000220:	4890      	ldr	r0, [pc, #576]	; (8000464 <display7SEG+0x318>)
 8000222:	f001 fb3d 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000226:	2200      	movs	r2, #0
 8000228:	2102      	movs	r1, #2
 800022a:	488e      	ldr	r0, [pc, #568]	; (8000464 <display7SEG+0x318>)
 800022c:	f001 fb38 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_SET);
 8000230:	2201      	movs	r2, #1
 8000232:	2104      	movs	r1, #4
 8000234:	488b      	ldr	r0, [pc, #556]	; (8000464 <display7SEG+0x318>)
 8000236:	f001 fb33 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 800023a:	2200      	movs	r2, #0
 800023c:	2108      	movs	r1, #8
 800023e:	4889      	ldr	r0, [pc, #548]	; (8000464 <display7SEG+0x318>)
 8000240:	f001 fb2e 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000244:	2200      	movs	r2, #0
 8000246:	2110      	movs	r1, #16
 8000248:	4886      	ldr	r0, [pc, #536]	; (8000464 <display7SEG+0x318>)
 800024a:	f001 fb29 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 800024e:	2201      	movs	r2, #1
 8000250:	2120      	movs	r1, #32
 8000252:	4884      	ldr	r0, [pc, #528]	; (8000464 <display7SEG+0x318>)
 8000254:	f001 fb24 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000258:	2200      	movs	r2, #0
 800025a:	2140      	movs	r1, #64	; 0x40
 800025c:	4881      	ldr	r0, [pc, #516]	; (8000464 <display7SEG+0x318>)
 800025e:	f001 fb1f 	bl	80018a0 <HAL_GPIO_WritePin>
		break;
 8000262:	e0fb      	b.n	800045c <display7SEG+0x310>

	case 3:


		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000264:	2200      	movs	r2, #0
 8000266:	2101      	movs	r1, #1
 8000268:	487e      	ldr	r0, [pc, #504]	; (8000464 <display7SEG+0x318>)
 800026a:	f001 fb19 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 800026e:	2200      	movs	r2, #0
 8000270:	2102      	movs	r1, #2
 8000272:	487c      	ldr	r0, [pc, #496]	; (8000464 <display7SEG+0x318>)
 8000274:	f001 fb14 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000278:	2200      	movs	r2, #0
 800027a:	2104      	movs	r1, #4
 800027c:	4879      	ldr	r0, [pc, #484]	; (8000464 <display7SEG+0x318>)
 800027e:	f001 fb0f 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000282:	2200      	movs	r2, #0
 8000284:	2108      	movs	r1, #8
 8000286:	4877      	ldr	r0, [pc, #476]	; (8000464 <display7SEG+0x318>)
 8000288:	f001 fb0a 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 800028c:	2201      	movs	r2, #1
 800028e:	2110      	movs	r1, #16
 8000290:	4874      	ldr	r0, [pc, #464]	; (8000464 <display7SEG+0x318>)
 8000292:	f001 fb05 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 8000296:	2201      	movs	r2, #1
 8000298:	2120      	movs	r1, #32
 800029a:	4872      	ldr	r0, [pc, #456]	; (8000464 <display7SEG+0x318>)
 800029c:	f001 fb00 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 80002a0:	2200      	movs	r2, #0
 80002a2:	2140      	movs	r1, #64	; 0x40
 80002a4:	486f      	ldr	r0, [pc, #444]	; (8000464 <display7SEG+0x318>)
 80002a6:	f001 fafb 	bl	80018a0 <HAL_GPIO_WritePin>
		break;
 80002aa:	e0d7      	b.n	800045c <display7SEG+0x310>

	case 4:

		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_SET);
 80002ac:	2201      	movs	r2, #1
 80002ae:	2101      	movs	r1, #1
 80002b0:	486c      	ldr	r0, [pc, #432]	; (8000464 <display7SEG+0x318>)
 80002b2:	f001 faf5 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 80002b6:	2200      	movs	r2, #0
 80002b8:	2102      	movs	r1, #2
 80002ba:	486a      	ldr	r0, [pc, #424]	; (8000464 <display7SEG+0x318>)
 80002bc:	f001 faf0 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80002c0:	2200      	movs	r2, #0
 80002c2:	2104      	movs	r1, #4
 80002c4:	4867      	ldr	r0, [pc, #412]	; (8000464 <display7SEG+0x318>)
 80002c6:	f001 faeb 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 80002ca:	2201      	movs	r2, #1
 80002cc:	2108      	movs	r1, #8
 80002ce:	4865      	ldr	r0, [pc, #404]	; (8000464 <display7SEG+0x318>)
 80002d0:	f001 fae6 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 80002d4:	2201      	movs	r2, #1
 80002d6:	2110      	movs	r1, #16
 80002d8:	4862      	ldr	r0, [pc, #392]	; (8000464 <display7SEG+0x318>)
 80002da:	f001 fae1 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 80002de:	2200      	movs	r2, #0
 80002e0:	2120      	movs	r1, #32
 80002e2:	4860      	ldr	r0, [pc, #384]	; (8000464 <display7SEG+0x318>)
 80002e4:	f001 fadc 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 80002e8:	2200      	movs	r2, #0
 80002ea:	2140      	movs	r1, #64	; 0x40
 80002ec:	485d      	ldr	r0, [pc, #372]	; (8000464 <display7SEG+0x318>)
 80002ee:	f001 fad7 	bl	80018a0 <HAL_GPIO_WritePin>
		break;
 80002f2:	e0b3      	b.n	800045c <display7SEG+0x310>

	case 5:

		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 80002f4:	2200      	movs	r2, #0
 80002f6:	2101      	movs	r1, #1
 80002f8:	485a      	ldr	r0, [pc, #360]	; (8000464 <display7SEG+0x318>)
 80002fa:	f001 fad1 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_SET);
 80002fe:	2201      	movs	r2, #1
 8000300:	2102      	movs	r1, #2
 8000302:	4858      	ldr	r0, [pc, #352]	; (8000464 <display7SEG+0x318>)
 8000304:	f001 facc 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	2104      	movs	r1, #4
 800030c:	4855      	ldr	r0, [pc, #340]	; (8000464 <display7SEG+0x318>)
 800030e:	f001 fac7 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000312:	2200      	movs	r2, #0
 8000314:	2108      	movs	r1, #8
 8000316:	4853      	ldr	r0, [pc, #332]	; (8000464 <display7SEG+0x318>)
 8000318:	f001 fac2 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 800031c:	2201      	movs	r2, #1
 800031e:	2110      	movs	r1, #16
 8000320:	4850      	ldr	r0, [pc, #320]	; (8000464 <display7SEG+0x318>)
 8000322:	f001 fabd 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000326:	2200      	movs	r2, #0
 8000328:	2120      	movs	r1, #32
 800032a:	484e      	ldr	r0, [pc, #312]	; (8000464 <display7SEG+0x318>)
 800032c:	f001 fab8 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000330:	2200      	movs	r2, #0
 8000332:	2140      	movs	r1, #64	; 0x40
 8000334:	484b      	ldr	r0, [pc, #300]	; (8000464 <display7SEG+0x318>)
 8000336:	f001 fab3 	bl	80018a0 <HAL_GPIO_WritePin>
		break;
 800033a:	e08f      	b.n	800045c <display7SEG+0x310>

	case 6:

		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 800033c:	2200      	movs	r2, #0
 800033e:	2101      	movs	r1, #1
 8000340:	4848      	ldr	r0, [pc, #288]	; (8000464 <display7SEG+0x318>)
 8000342:	f001 faad 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_SET);
 8000346:	2201      	movs	r2, #1
 8000348:	2102      	movs	r1, #2
 800034a:	4846      	ldr	r0, [pc, #280]	; (8000464 <display7SEG+0x318>)
 800034c:	f001 faa8 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000350:	2200      	movs	r2, #0
 8000352:	2104      	movs	r1, #4
 8000354:	4843      	ldr	r0, [pc, #268]	; (8000464 <display7SEG+0x318>)
 8000356:	f001 faa3 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 800035a:	2200      	movs	r2, #0
 800035c:	2108      	movs	r1, #8
 800035e:	4841      	ldr	r0, [pc, #260]	; (8000464 <display7SEG+0x318>)
 8000360:	f001 fa9e 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000364:	2200      	movs	r2, #0
 8000366:	2110      	movs	r1, #16
 8000368:	483e      	ldr	r0, [pc, #248]	; (8000464 <display7SEG+0x318>)
 800036a:	f001 fa99 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 800036e:	2200      	movs	r2, #0
 8000370:	2120      	movs	r1, #32
 8000372:	483c      	ldr	r0, [pc, #240]	; (8000464 <display7SEG+0x318>)
 8000374:	f001 fa94 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	2140      	movs	r1, #64	; 0x40
 800037c:	4839      	ldr	r0, [pc, #228]	; (8000464 <display7SEG+0x318>)
 800037e:	f001 fa8f 	bl	80018a0 <HAL_GPIO_WritePin>
		break;
 8000382:	e06b      	b.n	800045c <display7SEG+0x310>

	case 7:


		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	2101      	movs	r1, #1
 8000388:	4836      	ldr	r0, [pc, #216]	; (8000464 <display7SEG+0x318>)
 800038a:	f001 fa89 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 800038e:	2200      	movs	r2, #0
 8000390:	2102      	movs	r1, #2
 8000392:	4834      	ldr	r0, [pc, #208]	; (8000464 <display7SEG+0x318>)
 8000394:	f001 fa84 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000398:	2200      	movs	r2, #0
 800039a:	2104      	movs	r1, #4
 800039c:	4831      	ldr	r0, [pc, #196]	; (8000464 <display7SEG+0x318>)
 800039e:	f001 fa7f 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 80003a2:	2201      	movs	r2, #1
 80003a4:	2108      	movs	r1, #8
 80003a6:	482f      	ldr	r0, [pc, #188]	; (8000464 <display7SEG+0x318>)
 80003a8:	f001 fa7a 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 80003ac:	2201      	movs	r2, #1
 80003ae:	2110      	movs	r1, #16
 80003b0:	482c      	ldr	r0, [pc, #176]	; (8000464 <display7SEG+0x318>)
 80003b2:	f001 fa75 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 80003b6:	2201      	movs	r2, #1
 80003b8:	2120      	movs	r1, #32
 80003ba:	482a      	ldr	r0, [pc, #168]	; (8000464 <display7SEG+0x318>)
 80003bc:	f001 fa70 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 80003c0:	2201      	movs	r2, #1
 80003c2:	2140      	movs	r1, #64	; 0x40
 80003c4:	4827      	ldr	r0, [pc, #156]	; (8000464 <display7SEG+0x318>)
 80003c6:	f001 fa6b 	bl	80018a0 <HAL_GPIO_WritePin>
		break;
 80003ca:	e047      	b.n	800045c <display7SEG+0x310>

	case 8:

		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	2101      	movs	r1, #1
 80003d0:	4824      	ldr	r0, [pc, #144]	; (8000464 <display7SEG+0x318>)
 80003d2:	f001 fa65 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 80003d6:	2200      	movs	r2, #0
 80003d8:	2102      	movs	r1, #2
 80003da:	4822      	ldr	r0, [pc, #136]	; (8000464 <display7SEG+0x318>)
 80003dc:	f001 fa60 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2104      	movs	r1, #4
 80003e4:	481f      	ldr	r0, [pc, #124]	; (8000464 <display7SEG+0x318>)
 80003e6:	f001 fa5b 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 80003ea:	2200      	movs	r2, #0
 80003ec:	2108      	movs	r1, #8
 80003ee:	481d      	ldr	r0, [pc, #116]	; (8000464 <display7SEG+0x318>)
 80003f0:	f001 fa56 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 80003f4:	2200      	movs	r2, #0
 80003f6:	2110      	movs	r1, #16
 80003f8:	481a      	ldr	r0, [pc, #104]	; (8000464 <display7SEG+0x318>)
 80003fa:	f001 fa51 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 80003fe:	2200      	movs	r2, #0
 8000400:	2120      	movs	r1, #32
 8000402:	4818      	ldr	r0, [pc, #96]	; (8000464 <display7SEG+0x318>)
 8000404:	f001 fa4c 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000408:	2200      	movs	r2, #0
 800040a:	2140      	movs	r1, #64	; 0x40
 800040c:	4815      	ldr	r0, [pc, #84]	; (8000464 <display7SEG+0x318>)
 800040e:	f001 fa47 	bl	80018a0 <HAL_GPIO_WritePin>
		break;
 8000412:	e023      	b.n	800045c <display7SEG+0x310>

	case 9:

		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000414:	2200      	movs	r2, #0
 8000416:	2101      	movs	r1, #1
 8000418:	4812      	ldr	r0, [pc, #72]	; (8000464 <display7SEG+0x318>)
 800041a:	f001 fa41 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 800041e:	2200      	movs	r2, #0
 8000420:	2102      	movs	r1, #2
 8000422:	4810      	ldr	r0, [pc, #64]	; (8000464 <display7SEG+0x318>)
 8000424:	f001 fa3c 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000428:	2200      	movs	r2, #0
 800042a:	2104      	movs	r1, #4
 800042c:	480d      	ldr	r0, [pc, #52]	; (8000464 <display7SEG+0x318>)
 800042e:	f001 fa37 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000432:	2200      	movs	r2, #0
 8000434:	2108      	movs	r1, #8
 8000436:	480b      	ldr	r0, [pc, #44]	; (8000464 <display7SEG+0x318>)
 8000438:	f001 fa32 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 800043c:	2201      	movs	r2, #1
 800043e:	2110      	movs	r1, #16
 8000440:	4808      	ldr	r0, [pc, #32]	; (8000464 <display7SEG+0x318>)
 8000442:	f001 fa2d 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000446:	2200      	movs	r2, #0
 8000448:	2120      	movs	r1, #32
 800044a:	4806      	ldr	r0, [pc, #24]	; (8000464 <display7SEG+0x318>)
 800044c:	f001 fa28 	bl	80018a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000450:	2200      	movs	r2, #0
 8000452:	2140      	movs	r1, #64	; 0x40
 8000454:	4803      	ldr	r0, [pc, #12]	; (8000464 <display7SEG+0x318>)
 8000456:	f001 fa23 	bl	80018a0 <HAL_GPIO_WritePin>
		break;
 800045a:	bf00      	nop

	}
}
 800045c:	bf00      	nop
 800045e:	3708      	adds	r7, #8
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	40010c00 	.word	0x40010c00

08000468 <display_ledmatix>:
    ENM0_Pin, ENM1_Pin, ENM2_Pin,
    ENM3_Pin, ENM4_Pin, ENM5_Pin,
    ENM6_Pin, ENM7_Pin
};
void display_ledmatix(int row,int col)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b08c      	sub	sp, #48	; 0x30
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
 8000470:	6039      	str	r1, [r7, #0]
	int shift = 1;// mask used to get bit by bit of buffer
 8000472:	2301      	movs	r3, #1
 8000474:	60fb      	str	r3, [r7, #12]

		if(row == 0){// enable row 0
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d14e      	bne.n	800051a <display_ledmatix+0xb2>
			HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, RESET);
 800047c:	2200      	movs	r2, #0
 800047e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000482:	48bc      	ldr	r0, [pc, #752]	; (8000774 <display_ledmatix+0x30c>)
 8000484:	f001 fa0c 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, SET);
 8000488:	2201      	movs	r2, #1
 800048a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800048e:	48b9      	ldr	r0, [pc, #740]	; (8000774 <display_ledmatix+0x30c>)
 8000490:	f001 fa06 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, SET);
 8000494:	2201      	movs	r2, #1
 8000496:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800049a:	48b6      	ldr	r0, [pc, #728]	; (8000774 <display_ledmatix+0x30c>)
 800049c:	f001 fa00 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, SET);
 80004a0:	2201      	movs	r2, #1
 80004a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004a6:	48b3      	ldr	r0, [pc, #716]	; (8000774 <display_ledmatix+0x30c>)
 80004a8:	f001 f9fa 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, SET);
 80004ac:	2201      	movs	r2, #1
 80004ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004b2:	48b0      	ldr	r0, [pc, #704]	; (8000774 <display_ledmatix+0x30c>)
 80004b4:	f001 f9f4 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, SET);
 80004b8:	2201      	movs	r2, #1
 80004ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004be:	48ad      	ldr	r0, [pc, #692]	; (8000774 <display_ledmatix+0x30c>)
 80004c0:	f001 f9ee 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, SET);
 80004c4:	2201      	movs	r2, #1
 80004c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004ca:	48aa      	ldr	r0, [pc, #680]	; (8000774 <display_ledmatix+0x30c>)
 80004cc:	f001 f9e8 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, SET);
 80004d0:	2201      	movs	r2, #1
 80004d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004d6:	48a7      	ldr	r0, [pc, #668]	; (8000774 <display_ledmatix+0x30c>)
 80004d8:	f001 f9e2 	bl	80018a0 <HAL_GPIO_WritePin>

			// get bit by bit of buffer, then assign to ENM-PIN to control COL-PIN
			  for (int i = 0; i < 8; i++) {
 80004dc:	2300      	movs	r3, #0
 80004de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80004e0:	e018      	b.n	8000514 <display_ledmatix+0xac>
			        HAL_GPIO_WritePin(ENM_GPIO_Port[i], ENM_Pin[i], 1 - (col & 1));
 80004e2:	4aa5      	ldr	r2, [pc, #660]	; (8000778 <display_ledmatix+0x310>)
 80004e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004e6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80004ea:	4aa4      	ldr	r2, [pc, #656]	; (800077c <display_ledmatix+0x314>)
 80004ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004ee:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	f003 0301 	and.w	r3, r3, #1
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	bf0c      	ite	eq
 80004fc:	2301      	moveq	r3, #1
 80004fe:	2300      	movne	r3, #0
 8000500:	b2db      	uxtb	r3, r3
 8000502:	461a      	mov	r2, r3
 8000504:	f001 f9cc 	bl	80018a0 <HAL_GPIO_WritePin>
			        col = col >> 1; // Dịch trái sau khi ghi giá trị
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	105b      	asrs	r3, r3, #1
 800050c:	603b      	str	r3, [r7, #0]
			  for (int i = 0; i < 8; i++) {
 800050e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000510:	3301      	adds	r3, #1
 8000512:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000516:	2b07      	cmp	r3, #7
 8000518:	dde3      	ble.n	80004e2 <display_ledmatix+0x7a>
			    }
		}

		if(row == 1){// enable row 1
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	2b01      	cmp	r3, #1
 800051e:	d14e      	bne.n	80005be <display_ledmatix+0x156>
			HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, SET);
 8000520:	2201      	movs	r2, #1
 8000522:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000526:	4893      	ldr	r0, [pc, #588]	; (8000774 <display_ledmatix+0x30c>)
 8000528:	f001 f9ba 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000532:	4890      	ldr	r0, [pc, #576]	; (8000774 <display_ledmatix+0x30c>)
 8000534:	f001 f9b4 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, SET);
 8000538:	2201      	movs	r2, #1
 800053a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800053e:	488d      	ldr	r0, [pc, #564]	; (8000774 <display_ledmatix+0x30c>)
 8000540:	f001 f9ae 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, SET);
 8000544:	2201      	movs	r2, #1
 8000546:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800054a:	488a      	ldr	r0, [pc, #552]	; (8000774 <display_ledmatix+0x30c>)
 800054c:	f001 f9a8 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, SET);
 8000550:	2201      	movs	r2, #1
 8000552:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000556:	4887      	ldr	r0, [pc, #540]	; (8000774 <display_ledmatix+0x30c>)
 8000558:	f001 f9a2 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, SET);
 800055c:	2201      	movs	r2, #1
 800055e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000562:	4884      	ldr	r0, [pc, #528]	; (8000774 <display_ledmatix+0x30c>)
 8000564:	f001 f99c 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, SET);
 8000568:	2201      	movs	r2, #1
 800056a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800056e:	4881      	ldr	r0, [pc, #516]	; (8000774 <display_ledmatix+0x30c>)
 8000570:	f001 f996 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, SET);
 8000574:	2201      	movs	r2, #1
 8000576:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800057a:	487e      	ldr	r0, [pc, #504]	; (8000774 <display_ledmatix+0x30c>)
 800057c:	f001 f990 	bl	80018a0 <HAL_GPIO_WritePin>

			  for (int i = 0; i < 8; i++) {
 8000580:	2300      	movs	r3, #0
 8000582:	62bb      	str	r3, [r7, #40]	; 0x28
 8000584:	e018      	b.n	80005b8 <display_ledmatix+0x150>
					        HAL_GPIO_WritePin(ENM_GPIO_Port[i], ENM_Pin[i], 1 - (col & 1));
 8000586:	4a7c      	ldr	r2, [pc, #496]	; (8000778 <display_ledmatix+0x310>)
 8000588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800058a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800058e:	4a7b      	ldr	r2, [pc, #492]	; (800077c <display_ledmatix+0x314>)
 8000590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000592:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	f003 0301 	and.w	r3, r3, #1
 800059c:	2b00      	cmp	r3, #0
 800059e:	bf0c      	ite	eq
 80005a0:	2301      	moveq	r3, #1
 80005a2:	2300      	movne	r3, #0
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	461a      	mov	r2, r3
 80005a8:	f001 f97a 	bl	80018a0 <HAL_GPIO_WritePin>
					        col = col >> 1; // Dịch trái sau khi ghi giá trị
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	105b      	asrs	r3, r3, #1
 80005b0:	603b      	str	r3, [r7, #0]
			  for (int i = 0; i < 8; i++) {
 80005b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005b4:	3301      	adds	r3, #1
 80005b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80005b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005ba:	2b07      	cmp	r3, #7
 80005bc:	dde3      	ble.n	8000586 <display_ledmatix+0x11e>
					    }
		}

		if(row == 2){// enable row 2
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	2b02      	cmp	r3, #2
 80005c2:	d14e      	bne.n	8000662 <display_ledmatix+0x1fa>
			HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, SET);
 80005c4:	2201      	movs	r2, #1
 80005c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ca:	486a      	ldr	r0, [pc, #424]	; (8000774 <display_ledmatix+0x30c>)
 80005cc:	f001 f968 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, SET);
 80005d0:	2201      	movs	r2, #1
 80005d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005d6:	4867      	ldr	r0, [pc, #412]	; (8000774 <display_ledmatix+0x30c>)
 80005d8:	f001 f962 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, RESET);
 80005dc:	2200      	movs	r2, #0
 80005de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005e2:	4864      	ldr	r0, [pc, #400]	; (8000774 <display_ledmatix+0x30c>)
 80005e4:	f001 f95c 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, SET);
 80005e8:	2201      	movs	r2, #1
 80005ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005ee:	4861      	ldr	r0, [pc, #388]	; (8000774 <display_ledmatix+0x30c>)
 80005f0:	f001 f956 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, SET);
 80005f4:	2201      	movs	r2, #1
 80005f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005fa:	485e      	ldr	r0, [pc, #376]	; (8000774 <display_ledmatix+0x30c>)
 80005fc:	f001 f950 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, SET);
 8000600:	2201      	movs	r2, #1
 8000602:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000606:	485b      	ldr	r0, [pc, #364]	; (8000774 <display_ledmatix+0x30c>)
 8000608:	f001 f94a 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, SET);
 800060c:	2201      	movs	r2, #1
 800060e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000612:	4858      	ldr	r0, [pc, #352]	; (8000774 <display_ledmatix+0x30c>)
 8000614:	f001 f944 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, SET);
 8000618:	2201      	movs	r2, #1
 800061a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800061e:	4855      	ldr	r0, [pc, #340]	; (8000774 <display_ledmatix+0x30c>)
 8000620:	f001 f93e 	bl	80018a0 <HAL_GPIO_WritePin>

			  for (int i = 0; i < 8; i++) {
 8000624:	2300      	movs	r3, #0
 8000626:	627b      	str	r3, [r7, #36]	; 0x24
 8000628:	e018      	b.n	800065c <display_ledmatix+0x1f4>
					        HAL_GPIO_WritePin(ENM_GPIO_Port[i], ENM_Pin[i], 1 - (col & 1));
 800062a:	4a53      	ldr	r2, [pc, #332]	; (8000778 <display_ledmatix+0x310>)
 800062c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800062e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000632:	4a52      	ldr	r2, [pc, #328]	; (800077c <display_ledmatix+0x314>)
 8000634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000636:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	f003 0301 	and.w	r3, r3, #1
 8000640:	2b00      	cmp	r3, #0
 8000642:	bf0c      	ite	eq
 8000644:	2301      	moveq	r3, #1
 8000646:	2300      	movne	r3, #0
 8000648:	b2db      	uxtb	r3, r3
 800064a:	461a      	mov	r2, r3
 800064c:	f001 f928 	bl	80018a0 <HAL_GPIO_WritePin>
					        col = col >> 1; // Dịch trái sau khi ghi giá trị
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	105b      	asrs	r3, r3, #1
 8000654:	603b      	str	r3, [r7, #0]
			  for (int i = 0; i < 8; i++) {
 8000656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000658:	3301      	adds	r3, #1
 800065a:	627b      	str	r3, [r7, #36]	; 0x24
 800065c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800065e:	2b07      	cmp	r3, #7
 8000660:	dde3      	ble.n	800062a <display_ledmatix+0x1c2>
					    }
		}

		if(row == 3){// enable row 3
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2b03      	cmp	r3, #3
 8000666:	d14e      	bne.n	8000706 <display_ledmatix+0x29e>
			HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, SET);
 8000668:	2201      	movs	r2, #1
 800066a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800066e:	4841      	ldr	r0, [pc, #260]	; (8000774 <display_ledmatix+0x30c>)
 8000670:	f001 f916 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, SET);
 8000674:	2201      	movs	r2, #1
 8000676:	f44f 7100 	mov.w	r1, #512	; 0x200
 800067a:	483e      	ldr	r0, [pc, #248]	; (8000774 <display_ledmatix+0x30c>)
 800067c:	f001 f910 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, SET);
 8000680:	2201      	movs	r2, #1
 8000682:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000686:	483b      	ldr	r0, [pc, #236]	; (8000774 <display_ledmatix+0x30c>)
 8000688:	f001 f90a 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000692:	4838      	ldr	r0, [pc, #224]	; (8000774 <display_ledmatix+0x30c>)
 8000694:	f001 f904 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, SET);
 8000698:	2201      	movs	r2, #1
 800069a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800069e:	4835      	ldr	r0, [pc, #212]	; (8000774 <display_ledmatix+0x30c>)
 80006a0:	f001 f8fe 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, SET);
 80006a4:	2201      	movs	r2, #1
 80006a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006aa:	4832      	ldr	r0, [pc, #200]	; (8000774 <display_ledmatix+0x30c>)
 80006ac:	f001 f8f8 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, SET);
 80006b0:	2201      	movs	r2, #1
 80006b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006b6:	482f      	ldr	r0, [pc, #188]	; (8000774 <display_ledmatix+0x30c>)
 80006b8:	f001 f8f2 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, SET);
 80006bc:	2201      	movs	r2, #1
 80006be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006c2:	482c      	ldr	r0, [pc, #176]	; (8000774 <display_ledmatix+0x30c>)
 80006c4:	f001 f8ec 	bl	80018a0 <HAL_GPIO_WritePin>

			  for (int i = 0; i < 8; i++) {
 80006c8:	2300      	movs	r3, #0
 80006ca:	623b      	str	r3, [r7, #32]
 80006cc:	e018      	b.n	8000700 <display_ledmatix+0x298>
					        HAL_GPIO_WritePin(ENM_GPIO_Port[i], ENM_Pin[i], 1 - (col & 1));
 80006ce:	4a2a      	ldr	r2, [pc, #168]	; (8000778 <display_ledmatix+0x310>)
 80006d0:	6a3b      	ldr	r3, [r7, #32]
 80006d2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80006d6:	4a29      	ldr	r2, [pc, #164]	; (800077c <display_ledmatix+0x314>)
 80006d8:	6a3b      	ldr	r3, [r7, #32]
 80006da:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	f003 0301 	and.w	r3, r3, #1
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	bf0c      	ite	eq
 80006e8:	2301      	moveq	r3, #1
 80006ea:	2300      	movne	r3, #0
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	461a      	mov	r2, r3
 80006f0:	f001 f8d6 	bl	80018a0 <HAL_GPIO_WritePin>
					        col = col >> 1; // Dịch trái sau khi ghi giá trị
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	105b      	asrs	r3, r3, #1
 80006f8:	603b      	str	r3, [r7, #0]
			  for (int i = 0; i < 8; i++) {
 80006fa:	6a3b      	ldr	r3, [r7, #32]
 80006fc:	3301      	adds	r3, #1
 80006fe:	623b      	str	r3, [r7, #32]
 8000700:	6a3b      	ldr	r3, [r7, #32]
 8000702:	2b07      	cmp	r3, #7
 8000704:	dde3      	ble.n	80006ce <display_ledmatix+0x266>
					    }
		}

		if(row == 4){// enable row 4
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	2b04      	cmp	r3, #4
 800070a:	d155      	bne.n	80007b8 <display_ledmatix+0x350>
			HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, SET);
 800070c:	2201      	movs	r2, #1
 800070e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000712:	4818      	ldr	r0, [pc, #96]	; (8000774 <display_ledmatix+0x30c>)
 8000714:	f001 f8c4 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, SET);
 8000718:	2201      	movs	r2, #1
 800071a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800071e:	4815      	ldr	r0, [pc, #84]	; (8000774 <display_ledmatix+0x30c>)
 8000720:	f001 f8be 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, SET);
 8000724:	2201      	movs	r2, #1
 8000726:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800072a:	4812      	ldr	r0, [pc, #72]	; (8000774 <display_ledmatix+0x30c>)
 800072c:	f001 f8b8 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, SET);
 8000730:	2201      	movs	r2, #1
 8000732:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000736:	480f      	ldr	r0, [pc, #60]	; (8000774 <display_ledmatix+0x30c>)
 8000738:	f001 f8b2 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, RESET);
 800073c:	2200      	movs	r2, #0
 800073e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000742:	480c      	ldr	r0, [pc, #48]	; (8000774 <display_ledmatix+0x30c>)
 8000744:	f001 f8ac 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, SET);
 8000748:	2201      	movs	r2, #1
 800074a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800074e:	4809      	ldr	r0, [pc, #36]	; (8000774 <display_ledmatix+0x30c>)
 8000750:	f001 f8a6 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, SET);
 8000754:	2201      	movs	r2, #1
 8000756:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800075a:	4806      	ldr	r0, [pc, #24]	; (8000774 <display_ledmatix+0x30c>)
 800075c:	f001 f8a0 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, SET);
 8000760:	2201      	movs	r2, #1
 8000762:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000766:	4803      	ldr	r0, [pc, #12]	; (8000774 <display_ledmatix+0x30c>)
 8000768:	f001 f89a 	bl	80018a0 <HAL_GPIO_WritePin>

			  for (int i = 0; i < 8; i++) {
 800076c:	2300      	movs	r3, #0
 800076e:	61fb      	str	r3, [r7, #28]
 8000770:	e01f      	b.n	80007b2 <display_ledmatix+0x34a>
 8000772:	bf00      	nop
 8000774:	40010c00 	.word	0x40010c00
 8000778:	20000014 	.word	0x20000014
 800077c:	20000034 	.word	0x20000034
					        HAL_GPIO_WritePin(ENM_GPIO_Port[i], ENM_Pin[i], 1 - (col & 1));
 8000780:	4a8a      	ldr	r2, [pc, #552]	; (80009ac <display_ledmatix+0x544>)
 8000782:	69fb      	ldr	r3, [r7, #28]
 8000784:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000788:	4a89      	ldr	r2, [pc, #548]	; (80009b0 <display_ledmatix+0x548>)
 800078a:	69fb      	ldr	r3, [r7, #28]
 800078c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	2b00      	cmp	r3, #0
 8000798:	bf0c      	ite	eq
 800079a:	2301      	moveq	r3, #1
 800079c:	2300      	movne	r3, #0
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	461a      	mov	r2, r3
 80007a2:	f001 f87d 	bl	80018a0 <HAL_GPIO_WritePin>
					        col = col >> 1; // Dịch trái sau khi ghi giá trị
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	105b      	asrs	r3, r3, #1
 80007aa:	603b      	str	r3, [r7, #0]
			  for (int i = 0; i < 8; i++) {
 80007ac:	69fb      	ldr	r3, [r7, #28]
 80007ae:	3301      	adds	r3, #1
 80007b0:	61fb      	str	r3, [r7, #28]
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	2b07      	cmp	r3, #7
 80007b6:	dde3      	ble.n	8000780 <display_ledmatix+0x318>
					    }
		}

		if(row == 5){// enable row 5
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2b05      	cmp	r3, #5
 80007bc:	d14e      	bne.n	800085c <display_ledmatix+0x3f4>
			HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, SET);
 80007be:	2201      	movs	r2, #1
 80007c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007c4:	487b      	ldr	r0, [pc, #492]	; (80009b4 <display_ledmatix+0x54c>)
 80007c6:	f001 f86b 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, SET);
 80007ca:	2201      	movs	r2, #1
 80007cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007d0:	4878      	ldr	r0, [pc, #480]	; (80009b4 <display_ledmatix+0x54c>)
 80007d2:	f001 f865 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, SET);
 80007d6:	2201      	movs	r2, #1
 80007d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007dc:	4875      	ldr	r0, [pc, #468]	; (80009b4 <display_ledmatix+0x54c>)
 80007de:	f001 f85f 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, SET);
 80007e2:	2201      	movs	r2, #1
 80007e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007e8:	4872      	ldr	r0, [pc, #456]	; (80009b4 <display_ledmatix+0x54c>)
 80007ea:	f001 f859 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, SET);
 80007ee:	2201      	movs	r2, #1
 80007f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007f4:	486f      	ldr	r0, [pc, #444]	; (80009b4 <display_ledmatix+0x54c>)
 80007f6:	f001 f853 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000800:	486c      	ldr	r0, [pc, #432]	; (80009b4 <display_ledmatix+0x54c>)
 8000802:	f001 f84d 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, SET);
 8000806:	2201      	movs	r2, #1
 8000808:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800080c:	4869      	ldr	r0, [pc, #420]	; (80009b4 <display_ledmatix+0x54c>)
 800080e:	f001 f847 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, SET);
 8000812:	2201      	movs	r2, #1
 8000814:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000818:	4866      	ldr	r0, [pc, #408]	; (80009b4 <display_ledmatix+0x54c>)
 800081a:	f001 f841 	bl	80018a0 <HAL_GPIO_WritePin>

			  for (int i = 0; i < 8; i++) {
 800081e:	2300      	movs	r3, #0
 8000820:	61bb      	str	r3, [r7, #24]
 8000822:	e018      	b.n	8000856 <display_ledmatix+0x3ee>
					        HAL_GPIO_WritePin(ENM_GPIO_Port[i], ENM_Pin[i], 1 - (col & 1));
 8000824:	4a61      	ldr	r2, [pc, #388]	; (80009ac <display_ledmatix+0x544>)
 8000826:	69bb      	ldr	r3, [r7, #24]
 8000828:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800082c:	4a60      	ldr	r2, [pc, #384]	; (80009b0 <display_ledmatix+0x548>)
 800082e:	69bb      	ldr	r3, [r7, #24]
 8000830:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	2b00      	cmp	r3, #0
 800083c:	bf0c      	ite	eq
 800083e:	2301      	moveq	r3, #1
 8000840:	2300      	movne	r3, #0
 8000842:	b2db      	uxtb	r3, r3
 8000844:	461a      	mov	r2, r3
 8000846:	f001 f82b 	bl	80018a0 <HAL_GPIO_WritePin>
					        col = col >> 1; // Dịch trái sau khi ghi giá trị
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	105b      	asrs	r3, r3, #1
 800084e:	603b      	str	r3, [r7, #0]
			  for (int i = 0; i < 8; i++) {
 8000850:	69bb      	ldr	r3, [r7, #24]
 8000852:	3301      	adds	r3, #1
 8000854:	61bb      	str	r3, [r7, #24]
 8000856:	69bb      	ldr	r3, [r7, #24]
 8000858:	2b07      	cmp	r3, #7
 800085a:	dde3      	ble.n	8000824 <display_ledmatix+0x3bc>
					    }
		}

		if(row == 6){// enable row 6
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2b06      	cmp	r3, #6
 8000860:	d14e      	bne.n	8000900 <display_ledmatix+0x498>
			HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, SET);
 8000862:	2201      	movs	r2, #1
 8000864:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000868:	4852      	ldr	r0, [pc, #328]	; (80009b4 <display_ledmatix+0x54c>)
 800086a:	f001 f819 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, SET);
 800086e:	2201      	movs	r2, #1
 8000870:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000874:	484f      	ldr	r0, [pc, #316]	; (80009b4 <display_ledmatix+0x54c>)
 8000876:	f001 f813 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, SET);
 800087a:	2201      	movs	r2, #1
 800087c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000880:	484c      	ldr	r0, [pc, #304]	; (80009b4 <display_ledmatix+0x54c>)
 8000882:	f001 f80d 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, SET);
 8000886:	2201      	movs	r2, #1
 8000888:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800088c:	4849      	ldr	r0, [pc, #292]	; (80009b4 <display_ledmatix+0x54c>)
 800088e:	f001 f807 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, SET);
 8000892:	2201      	movs	r2, #1
 8000894:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000898:	4846      	ldr	r0, [pc, #280]	; (80009b4 <display_ledmatix+0x54c>)
 800089a:	f001 f801 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, SET);
 800089e:	2201      	movs	r2, #1
 80008a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008a4:	4843      	ldr	r0, [pc, #268]	; (80009b4 <display_ledmatix+0x54c>)
 80008a6:	f000 fffb 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008b0:	4840      	ldr	r0, [pc, #256]	; (80009b4 <display_ledmatix+0x54c>)
 80008b2:	f000 fff5 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, SET);
 80008b6:	2201      	movs	r2, #1
 80008b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008bc:	483d      	ldr	r0, [pc, #244]	; (80009b4 <display_ledmatix+0x54c>)
 80008be:	f000 ffef 	bl	80018a0 <HAL_GPIO_WritePin>

			  for (int i = 0; i < 8; i++) {
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
 80008c6:	e018      	b.n	80008fa <display_ledmatix+0x492>
					        HAL_GPIO_WritePin(ENM_GPIO_Port[i], ENM_Pin[i], 1 - (col & 1));
 80008c8:	4a38      	ldr	r2, [pc, #224]	; (80009ac <display_ledmatix+0x544>)
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80008d0:	4a37      	ldr	r2, [pc, #220]	; (80009b0 <display_ledmatix+0x548>)
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	2b00      	cmp	r3, #0
 80008e0:	bf0c      	ite	eq
 80008e2:	2301      	moveq	r3, #1
 80008e4:	2300      	movne	r3, #0
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	461a      	mov	r2, r3
 80008ea:	f000 ffd9 	bl	80018a0 <HAL_GPIO_WritePin>
					        col = col >> 1; // Dịch trái sau khi ghi giá trị
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	105b      	asrs	r3, r3, #1
 80008f2:	603b      	str	r3, [r7, #0]
			  for (int i = 0; i < 8; i++) {
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	3301      	adds	r3, #1
 80008f8:	617b      	str	r3, [r7, #20]
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	2b07      	cmp	r3, #7
 80008fe:	dde3      	ble.n	80008c8 <display_ledmatix+0x460>
					    }
		}

		if(row == 7){// enable row 7
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2b07      	cmp	r3, #7
 8000904:	d14e      	bne.n	80009a4 <display_ledmatix+0x53c>
			HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, SET);
 8000906:	2201      	movs	r2, #1
 8000908:	f44f 7180 	mov.w	r1, #256	; 0x100
 800090c:	4829      	ldr	r0, [pc, #164]	; (80009b4 <display_ledmatix+0x54c>)
 800090e:	f000 ffc7 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, SET);
 8000912:	2201      	movs	r2, #1
 8000914:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000918:	4826      	ldr	r0, [pc, #152]	; (80009b4 <display_ledmatix+0x54c>)
 800091a:	f000 ffc1 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, SET);
 800091e:	2201      	movs	r2, #1
 8000920:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000924:	4823      	ldr	r0, [pc, #140]	; (80009b4 <display_ledmatix+0x54c>)
 8000926:	f000 ffbb 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, SET);
 800092a:	2201      	movs	r2, #1
 800092c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000930:	4820      	ldr	r0, [pc, #128]	; (80009b4 <display_ledmatix+0x54c>)
 8000932:	f000 ffb5 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, SET);
 8000936:	2201      	movs	r2, #1
 8000938:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800093c:	481d      	ldr	r0, [pc, #116]	; (80009b4 <display_ledmatix+0x54c>)
 800093e:	f000 ffaf 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, SET);
 8000942:	2201      	movs	r2, #1
 8000944:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000948:	481a      	ldr	r0, [pc, #104]	; (80009b4 <display_ledmatix+0x54c>)
 800094a:	f000 ffa9 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, SET);
 800094e:	2201      	movs	r2, #1
 8000950:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000954:	4817      	ldr	r0, [pc, #92]	; (80009b4 <display_ledmatix+0x54c>)
 8000956:	f000 ffa3 	bl	80018a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000960:	4814      	ldr	r0, [pc, #80]	; (80009b4 <display_ledmatix+0x54c>)
 8000962:	f000 ff9d 	bl	80018a0 <HAL_GPIO_WritePin>

			  for (int i = 0; i < 8; i++) {
 8000966:	2300      	movs	r3, #0
 8000968:	613b      	str	r3, [r7, #16]
 800096a:	e018      	b.n	800099e <display_ledmatix+0x536>
					        HAL_GPIO_WritePin(ENM_GPIO_Port[i], ENM_Pin[i], 1 - (col & 1));
 800096c:	4a0f      	ldr	r2, [pc, #60]	; (80009ac <display_ledmatix+0x544>)
 800096e:	693b      	ldr	r3, [r7, #16]
 8000970:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000974:	4a0e      	ldr	r2, [pc, #56]	; (80009b0 <display_ledmatix+0x548>)
 8000976:	693b      	ldr	r3, [r7, #16]
 8000978:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	2b00      	cmp	r3, #0
 8000984:	bf0c      	ite	eq
 8000986:	2301      	moveq	r3, #1
 8000988:	2300      	movne	r3, #0
 800098a:	b2db      	uxtb	r3, r3
 800098c:	461a      	mov	r2, r3
 800098e:	f000 ff87 	bl	80018a0 <HAL_GPIO_WritePin>
					        col = col >> 1; // Dịch trái sau khi ghi giá trị
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	105b      	asrs	r3, r3, #1
 8000996:	603b      	str	r3, [r7, #0]
			  for (int i = 0; i < 8; i++) {
 8000998:	693b      	ldr	r3, [r7, #16]
 800099a:	3301      	adds	r3, #1
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	693b      	ldr	r3, [r7, #16]
 80009a0:	2b07      	cmp	r3, #7
 80009a2:	dde3      	ble.n	800096c <display_ledmatix+0x504>
					    }
		}
}
 80009a4:	bf00      	nop
 80009a6:	3730      	adds	r7, #48	; 0x30
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000014 	.word	0x20000014
 80009b0:	20000034 	.word	0x20000034
 80009b4:	40010c00 	.word	0x40010c00

080009b8 <updateLedMatrix>:
void updateLedMatrix(int index){
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2b07      	cmp	r3, #7
 80009c4:	d84a      	bhi.n	8000a5c <updateLedMatrix+0xa4>
 80009c6:	a201      	add	r2, pc, #4	; (adr r2, 80009cc <updateLedMatrix+0x14>)
 80009c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009cc:	080009ed 	.word	0x080009ed
 80009d0:	080009fb 	.word	0x080009fb
 80009d4:	08000a09 	.word	0x08000a09
 80009d8:	08000a17 	.word	0x08000a17
 80009dc:	08000a25 	.word	0x08000a25
 80009e0:	08000a33 	.word	0x08000a33
 80009e4:	08000a41 	.word	0x08000a41
 80009e8:	08000a4f 	.word	0x08000a4f
	switch(index){
	case 0:// display row 0 of led matrix
		display_ledmatix(0, matrix_buffer[0]);
 80009ec:	4b1e      	ldr	r3, [pc, #120]	; (8000a68 <updateLedMatrix+0xb0>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	4619      	mov	r1, r3
 80009f2:	2000      	movs	r0, #0
 80009f4:	f7ff fd38 	bl	8000468 <display_ledmatix>
		break;
 80009f8:	e031      	b.n	8000a5e <updateLedMatrix+0xa6>
	case 1:// display row 1 of led matrix
		display_ledmatix(1, matrix_buffer[1]);
 80009fa:	4b1b      	ldr	r3, [pc, #108]	; (8000a68 <updateLedMatrix+0xb0>)
 80009fc:	785b      	ldrb	r3, [r3, #1]
 80009fe:	4619      	mov	r1, r3
 8000a00:	2001      	movs	r0, #1
 8000a02:	f7ff fd31 	bl	8000468 <display_ledmatix>
		break;
 8000a06:	e02a      	b.n	8000a5e <updateLedMatrix+0xa6>
	case 2:// display row 2 of led matrix
		display_ledmatix(2, matrix_buffer[2]);
 8000a08:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <updateLedMatrix+0xb0>)
 8000a0a:	789b      	ldrb	r3, [r3, #2]
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	2002      	movs	r0, #2
 8000a10:	f7ff fd2a 	bl	8000468 <display_ledmatix>
		break;
 8000a14:	e023      	b.n	8000a5e <updateLedMatrix+0xa6>
	case 3:// display row 3 of led matrix
		display_ledmatix(3, matrix_buffer[3]);
 8000a16:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <updateLedMatrix+0xb0>)
 8000a18:	78db      	ldrb	r3, [r3, #3]
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	2003      	movs	r0, #3
 8000a1e:	f7ff fd23 	bl	8000468 <display_ledmatix>
		break;
 8000a22:	e01c      	b.n	8000a5e <updateLedMatrix+0xa6>
	case 4:// display row 4 of led matrix
		display_ledmatix(4, matrix_buffer[4]);
 8000a24:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <updateLedMatrix+0xb0>)
 8000a26:	791b      	ldrb	r3, [r3, #4]
 8000a28:	4619      	mov	r1, r3
 8000a2a:	2004      	movs	r0, #4
 8000a2c:	f7ff fd1c 	bl	8000468 <display_ledmatix>
		break;
 8000a30:	e015      	b.n	8000a5e <updateLedMatrix+0xa6>
	case 5:// display row 5 of led matrix
		display_ledmatix(5, matrix_buffer[5]);
 8000a32:	4b0d      	ldr	r3, [pc, #52]	; (8000a68 <updateLedMatrix+0xb0>)
 8000a34:	795b      	ldrb	r3, [r3, #5]
 8000a36:	4619      	mov	r1, r3
 8000a38:	2005      	movs	r0, #5
 8000a3a:	f7ff fd15 	bl	8000468 <display_ledmatix>
		break;
 8000a3e:	e00e      	b.n	8000a5e <updateLedMatrix+0xa6>
	case 6:// display row 6 of led matrix
		display_ledmatix(6, matrix_buffer[6]);
 8000a40:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <updateLedMatrix+0xb0>)
 8000a42:	799b      	ldrb	r3, [r3, #6]
 8000a44:	4619      	mov	r1, r3
 8000a46:	2006      	movs	r0, #6
 8000a48:	f7ff fd0e 	bl	8000468 <display_ledmatix>
		break;
 8000a4c:	e007      	b.n	8000a5e <updateLedMatrix+0xa6>
	case 7:// display row 7 of led matrix
		display_ledmatix(7, matrix_buffer[7]);
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <updateLedMatrix+0xb0>)
 8000a50:	79db      	ldrb	r3, [r3, #7]
 8000a52:	4619      	mov	r1, r3
 8000a54:	2007      	movs	r0, #7
 8000a56:	f7ff fd07 	bl	8000468 <display_ledmatix>
		break;
 8000a5a:	e000      	b.n	8000a5e <updateLedMatrix+0xa6>
	default:
		break;
 8000a5c:	bf00      	nop
	}
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	2000000c 	.word	0x2000000c

08000a6c <update7SEG>:

void update7SEG(int index)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2b03      	cmp	r3, #3
 8000a78:	d822      	bhi.n	8000ac0 <update7SEG+0x54>
 8000a7a:	a201      	add	r2, pc, #4	; (adr r2, 8000a80 <update7SEG+0x14>)
 8000a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a80:	08000a91 	.word	0x08000a91
 8000a84:	08000a9d 	.word	0x08000a9d
 8000a88:	08000aa9 	.word	0x08000aa9
 8000a8c:	08000ab5 	.word	0x08000ab5
    switch (index)
    {
        case 0:
            display7SEG(led_buffer[0]);
 8000a90:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <update7SEG+0x60>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff fb59 	bl	800014c <display7SEG>
            break;
 8000a9a:	e012      	b.n	8000ac2 <update7SEG+0x56>
        case 1:
            display7SEG(led_buffer[1]);
 8000a9c:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <update7SEG+0x60>)
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff fb53 	bl	800014c <display7SEG>
            break;
 8000aa6:	e00c      	b.n	8000ac2 <update7SEG+0x56>
        case 2:
            display7SEG(led_buffer[2]);
 8000aa8:	4b08      	ldr	r3, [pc, #32]	; (8000acc <update7SEG+0x60>)
 8000aaa:	689b      	ldr	r3, [r3, #8]
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff fb4d 	bl	800014c <display7SEG>
            break;
 8000ab2:	e006      	b.n	8000ac2 <update7SEG+0x56>
        case 3:
            display7SEG(led_buffer[3]);
 8000ab4:	4b05      	ldr	r3, [pc, #20]	; (8000acc <update7SEG+0x60>)
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff fb47 	bl	800014c <display7SEG>
            break;
 8000abe:	e000      	b.n	8000ac2 <update7SEG+0x56>
        default:
            break;
 8000ac0:	bf00      	nop
    }
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	2000007c 	.word	0x2000007c

08000ad0 <updateClockBuffer>:
void updateClockBuffer()
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
	if(hour<10)
 8000ad4:	4b29      	ldr	r3, [pc, #164]	; (8000b7c <updateClockBuffer+0xac>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b09      	cmp	r3, #9
 8000ada:	dc06      	bgt.n	8000aea <updateClockBuffer+0x1a>
	{
		led_buffer[0]=0;
 8000adc:	4b28      	ldr	r3, [pc, #160]	; (8000b80 <updateClockBuffer+0xb0>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
		led_buffer[1]=hour;
 8000ae2:	4b26      	ldr	r3, [pc, #152]	; (8000b7c <updateClockBuffer+0xac>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a26      	ldr	r2, [pc, #152]	; (8000b80 <updateClockBuffer+0xb0>)
 8000ae8:	6053      	str	r3, [r2, #4]

	}
	if(hour>=10)
 8000aea:	4b24      	ldr	r3, [pc, #144]	; (8000b7c <updateClockBuffer+0xac>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2b09      	cmp	r3, #9
 8000af0:	dd18      	ble.n	8000b24 <updateClockBuffer+0x54>
	{
		led_buffer[0]=hour/10;
 8000af2:	4b22      	ldr	r3, [pc, #136]	; (8000b7c <updateClockBuffer+0xac>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a23      	ldr	r2, [pc, #140]	; (8000b84 <updateClockBuffer+0xb4>)
 8000af8:	fb82 1203 	smull	r1, r2, r2, r3
 8000afc:	1092      	asrs	r2, r2, #2
 8000afe:	17db      	asrs	r3, r3, #31
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	4a1f      	ldr	r2, [pc, #124]	; (8000b80 <updateClockBuffer+0xb0>)
 8000b04:	6013      	str	r3, [r2, #0]
		led_buffer[1]=hour%10;
 8000b06:	4b1d      	ldr	r3, [pc, #116]	; (8000b7c <updateClockBuffer+0xac>)
 8000b08:	6819      	ldr	r1, [r3, #0]
 8000b0a:	4b1e      	ldr	r3, [pc, #120]	; (8000b84 <updateClockBuffer+0xb4>)
 8000b0c:	fb83 2301 	smull	r2, r3, r3, r1
 8000b10:	109a      	asrs	r2, r3, #2
 8000b12:	17cb      	asrs	r3, r1, #31
 8000b14:	1ad2      	subs	r2, r2, r3
 8000b16:	4613      	mov	r3, r2
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	4413      	add	r3, r2
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	1aca      	subs	r2, r1, r3
 8000b20:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <updateClockBuffer+0xb0>)
 8000b22:	605a      	str	r2, [r3, #4]
	}
	if(minute<10)
 8000b24:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <updateClockBuffer+0xb8>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b09      	cmp	r3, #9
 8000b2a:	dc06      	bgt.n	8000b3a <updateClockBuffer+0x6a>
	{
		led_buffer[2]=0;
 8000b2c:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <updateClockBuffer+0xb0>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
		led_buffer[3]=minute;
 8000b32:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <updateClockBuffer+0xb8>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a12      	ldr	r2, [pc, #72]	; (8000b80 <updateClockBuffer+0xb0>)
 8000b38:	60d3      	str	r3, [r2, #12]
	}
	if(minute>=10)
 8000b3a:	4b13      	ldr	r3, [pc, #76]	; (8000b88 <updateClockBuffer+0xb8>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	2b09      	cmp	r3, #9
 8000b40:	dd18      	ble.n	8000b74 <updateClockBuffer+0xa4>
	{
		led_buffer[2]=minute/10;
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <updateClockBuffer+0xb8>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a0f      	ldr	r2, [pc, #60]	; (8000b84 <updateClockBuffer+0xb4>)
 8000b48:	fb82 1203 	smull	r1, r2, r2, r3
 8000b4c:	1092      	asrs	r2, r2, #2
 8000b4e:	17db      	asrs	r3, r3, #31
 8000b50:	1ad3      	subs	r3, r2, r3
 8000b52:	4a0b      	ldr	r2, [pc, #44]	; (8000b80 <updateClockBuffer+0xb0>)
 8000b54:	6093      	str	r3, [r2, #8]
		led_buffer[3]=minute%10;
 8000b56:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <updateClockBuffer+0xb8>)
 8000b58:	6819      	ldr	r1, [r3, #0]
 8000b5a:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <updateClockBuffer+0xb4>)
 8000b5c:	fb83 2301 	smull	r2, r3, r3, r1
 8000b60:	109a      	asrs	r2, r3, #2
 8000b62:	17cb      	asrs	r3, r1, #31
 8000b64:	1ad2      	subs	r2, r2, r3
 8000b66:	4613      	mov	r3, r2
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	4413      	add	r3, r2
 8000b6c:	005b      	lsls	r3, r3, #1
 8000b6e:	1aca      	subs	r2, r1, r3
 8000b70:	4b03      	ldr	r3, [pc, #12]	; (8000b80 <updateClockBuffer+0xb0>)
 8000b72:	60da      	str	r2, [r3, #12]
	}

}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bc80      	pop	{r7}
 8000b7a:	4770      	bx	lr
 8000b7c:	20000000 	.word	0x20000000
 8000b80:	2000007c 	.word	0x2000007c
 8000b84:	66666667 	.word	0x66666667
 8000b88:	20000004 	.word	0x20000004

08000b8c <setTimer_maxtrix>:
int timer_flag2=0;
int timer_cycle2=10;
int timer_counter_matrix=0;
int timer_flag_matrix=0;
void setTimer_maxtrix(int duration)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
	timer_counter_matrix=duration/timer_cycle;
 8000b94:	4b07      	ldr	r3, [pc, #28]	; (8000bb4 <setTimer_maxtrix+0x28>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	687a      	ldr	r2, [r7, #4]
 8000b9a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b9e:	4a06      	ldr	r2, [pc, #24]	; (8000bb8 <setTimer_maxtrix+0x2c>)
 8000ba0:	6013      	str	r3, [r2, #0]
	timer_flag_matrix=0;
 8000ba2:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <setTimer_maxtrix+0x30>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
}
 8000ba8:	bf00      	nop
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bc80      	pop	{r7}
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	20000044 	.word	0x20000044
 8000bb8:	200000a8 	.word	0x200000a8
 8000bbc:	200000ac 	.word	0x200000ac

08000bc0 <timerRun_maxtrix>:
void timerRun_maxtrix()
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
	if(timer_counter_matrix>0)
 8000bc4:	4b09      	ldr	r3, [pc, #36]	; (8000bec <timerRun_maxtrix+0x2c>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	dd0b      	ble.n	8000be4 <timerRun_maxtrix+0x24>
	{
		timer_counter_matrix--;
 8000bcc:	4b07      	ldr	r3, [pc, #28]	; (8000bec <timerRun_maxtrix+0x2c>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	3b01      	subs	r3, #1
 8000bd2:	4a06      	ldr	r2, [pc, #24]	; (8000bec <timerRun_maxtrix+0x2c>)
 8000bd4:	6013      	str	r3, [r2, #0]
		if(timer_counter_matrix==0)
 8000bd6:	4b05      	ldr	r3, [pc, #20]	; (8000bec <timerRun_maxtrix+0x2c>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d102      	bne.n	8000be4 <timerRun_maxtrix+0x24>
			timer_flag_matrix=1;
 8000bde:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <timerRun_maxtrix+0x30>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	601a      	str	r2, [r3, #0]
	}}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bc80      	pop	{r7}
 8000bea:	4770      	bx	lr
 8000bec:	200000a8 	.word	0x200000a8
 8000bf0:	200000ac 	.word	0x200000ac

08000bf4 <setTimer>:
void setTimer(int duration)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
	timer_counter=duration/timer_cycle;
 8000bfc:	4b07      	ldr	r3, [pc, #28]	; (8000c1c <setTimer+0x28>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	687a      	ldr	r2, [r7, #4]
 8000c02:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c06:	4a06      	ldr	r2, [pc, #24]	; (8000c20 <setTimer+0x2c>)
 8000c08:	6013      	str	r3, [r2, #0]
	timer_flag=0;
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <setTimer+0x30>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bc80      	pop	{r7}
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	20000044 	.word	0x20000044
 8000c20:	20000090 	.word	0x20000090
 8000c24:	20000094 	.word	0x20000094

08000c28 <timerRun>:
void timerRun()
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
	if(timer_counter>0)
 8000c2c:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <timerRun+0x2c>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	dd0b      	ble.n	8000c4c <timerRun+0x24>
	{
		timer_counter--;
 8000c34:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <timerRun+0x2c>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	3b01      	subs	r3, #1
 8000c3a:	4a06      	ldr	r2, [pc, #24]	; (8000c54 <timerRun+0x2c>)
 8000c3c:	6013      	str	r3, [r2, #0]
		if(timer_counter==0)
 8000c3e:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <timerRun+0x2c>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d102      	bne.n	8000c4c <timerRun+0x24>
			timer_flag=1;
 8000c46:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <timerRun+0x30>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	601a      	str	r2, [r3, #0]
	}
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr
 8000c54:	20000090 	.word	0x20000090
 8000c58:	20000094 	.word	0x20000094

08000c5c <setTimer1>:
void setTimer1(int duration1)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
	timer_counter1=duration1/timer_cycle1;
 8000c64:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <setTimer1+0x28>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c6e:	4a06      	ldr	r2, [pc, #24]	; (8000c88 <setTimer1+0x2c>)
 8000c70:	6013      	str	r3, [r2, #0]
	timer_flag1=0;
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <setTimer1+0x30>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bc80      	pop	{r7}
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	20000048 	.word	0x20000048
 8000c88:	20000098 	.word	0x20000098
 8000c8c:	2000009c 	.word	0x2000009c

08000c90 <timerRun1>:
void timerRun1()
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
	if(timer_counter1>0)
 8000c94:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <timerRun1+0x2c>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	dd0b      	ble.n	8000cb4 <timerRun1+0x24>
	{
		timer_counter1--;
 8000c9c:	4b07      	ldr	r3, [pc, #28]	; (8000cbc <timerRun1+0x2c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	3b01      	subs	r3, #1
 8000ca2:	4a06      	ldr	r2, [pc, #24]	; (8000cbc <timerRun1+0x2c>)
 8000ca4:	6013      	str	r3, [r2, #0]
		if(timer_counter1==0)
 8000ca6:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <timerRun1+0x2c>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d102      	bne.n	8000cb4 <timerRun1+0x24>
			timer_flag1=1;
 8000cae:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <timerRun1+0x30>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	601a      	str	r2, [r3, #0]
	}
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bc80      	pop	{r7}
 8000cba:	4770      	bx	lr
 8000cbc:	20000098 	.word	0x20000098
 8000cc0:	2000009c 	.word	0x2000009c

08000cc4 <setTimer2>:
void setTimer2(int duration1)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
	timer_counter2=duration1/timer_cycle2;
 8000ccc:	4b07      	ldr	r3, [pc, #28]	; (8000cec <setTimer2+0x28>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	687a      	ldr	r2, [r7, #4]
 8000cd2:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cd6:	4a06      	ldr	r2, [pc, #24]	; (8000cf0 <setTimer2+0x2c>)
 8000cd8:	6013      	str	r3, [r2, #0]
	timer_flag2=0;
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <setTimer2+0x30>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bc80      	pop	{r7}
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	2000004c 	.word	0x2000004c
 8000cf0:	200000a0 	.word	0x200000a0
 8000cf4:	200000a4 	.word	0x200000a4

08000cf8 <timerRun2>:
void timerRun2()
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
	if(timer_counter2>0)
 8000cfc:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <timerRun2+0x2c>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	dd0b      	ble.n	8000d1c <timerRun2+0x24>
	{
		timer_counter2--;
 8000d04:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <timerRun2+0x2c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	3b01      	subs	r3, #1
 8000d0a:	4a06      	ldr	r2, [pc, #24]	; (8000d24 <timerRun2+0x2c>)
 8000d0c:	6013      	str	r3, [r2, #0]
		if(timer_counter2==0)
 8000d0e:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <timerRun2+0x2c>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d102      	bne.n	8000d1c <timerRun2+0x24>
			timer_flag2=1;
 8000d16:	4b04      	ldr	r3, [pc, #16]	; (8000d28 <timerRun2+0x30>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	601a      	str	r2, [r3, #0]
	}
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr
 8000d24:	200000a0 	.word	0x200000a0
 8000d28:	200000a4 	.word	0x200000a4

08000d2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d32:	f000 facb 	bl	80012cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d36:	f000 f921 	bl	8000f7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d3a:	f000 f9a7 	bl	800108c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000d3e:	f000 f959 	bl	8000ff4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000d42:	4883      	ldr	r0, [pc, #524]	; (8000f50 <main+0x224>)
 8000d44:	f001 fa0a 	bl	800215c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer(1000);
 8000d48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d4c:	f7ff ff52 	bl	8000bf4 <setTimer>
  setTimer1(250);
 8000d50:	20fa      	movs	r0, #250	; 0xfa
 8000d52:	f7ff ff83 	bl	8000c5c <setTimer1>
  setTimer2(1000);
 8000d56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d5a:	f7ff ffb3 	bl	8000cc4 <setTimer2>
  setTimer_maxtrix(200);
 8000d5e:	20c8      	movs	r0, #200	; 0xc8
 8000d60:	f7ff ff14 	bl	8000b8c <setTimer_maxtrix>
  int state=0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */
    if(timer_flag==1)
 8000d68:	4b7a      	ldr	r3, [pc, #488]	; (8000f54 <main+0x228>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d129      	bne.n	8000dc4 <main+0x98>
    {
    	  second ++;
 8000d70:	4b79      	ldr	r3, [pc, #484]	; (8000f58 <main+0x22c>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	3301      	adds	r3, #1
 8000d76:	4a78      	ldr	r2, [pc, #480]	; (8000f58 <main+0x22c>)
 8000d78:	6013      	str	r3, [r2, #0]
    	  	  if (second >= 60)
 8000d7a:	4b77      	ldr	r3, [pc, #476]	; (8000f58 <main+0x22c>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2b3b      	cmp	r3, #59	; 0x3b
 8000d80:	dd07      	ble.n	8000d92 <main+0x66>
    	  	  {
    	  		  second = 0;
 8000d82:	4b75      	ldr	r3, [pc, #468]	; (8000f58 <main+0x22c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
    	  	  	  minute++;
 8000d88:	4b74      	ldr	r3, [pc, #464]	; (8000f5c <main+0x230>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	4a73      	ldr	r2, [pc, #460]	; (8000f5c <main+0x230>)
 8000d90:	6013      	str	r3, [r2, #0]
    	  	  }
    	  	  if(minute >= 60)
 8000d92:	4b72      	ldr	r3, [pc, #456]	; (8000f5c <main+0x230>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2b3b      	cmp	r3, #59	; 0x3b
 8000d98:	dd07      	ble.n	8000daa <main+0x7e>
    	  	  {
    	  		  minute = 0;
 8000d9a:	4b70      	ldr	r3, [pc, #448]	; (8000f5c <main+0x230>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
    	  	  	  hour++;
 8000da0:	4b6f      	ldr	r3, [pc, #444]	; (8000f60 <main+0x234>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	3301      	adds	r3, #1
 8000da6:	4a6e      	ldr	r2, [pc, #440]	; (8000f60 <main+0x234>)
 8000da8:	6013      	str	r3, [r2, #0]
    	  	  }
    	  	  if(hour >= 24)
 8000daa:	4b6d      	ldr	r3, [pc, #436]	; (8000f60 <main+0x234>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2b17      	cmp	r3, #23
 8000db0:	dd02      	ble.n	8000db8 <main+0x8c>
    	  	  {
    	  		  hour = 0;
 8000db2:	4b6b      	ldr	r3, [pc, #428]	; (8000f60 <main+0x234>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
    	  	  }
    	  	  updateClockBuffer();
 8000db8:	f7ff fe8a 	bl	8000ad0 <updateClockBuffer>
	            setTimer(1000);
 8000dbc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dc0:	f7ff ff18 	bl	8000bf4 <setTimer>
    }
    if(timer_flag_matrix==1)
 8000dc4:	4b67      	ldr	r3, [pc, #412]	; (8000f64 <main+0x238>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d112      	bne.n	8000df2 <main+0xc6>
    {
    	updateLedMatrix(index_led_matrix++);
 8000dcc:	4b66      	ldr	r3, [pc, #408]	; (8000f68 <main+0x23c>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	1c5a      	adds	r2, r3, #1
 8000dd2:	4965      	ldr	r1, [pc, #404]	; (8000f68 <main+0x23c>)
 8000dd4:	600a      	str	r2, [r1, #0]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff fdee 	bl	80009b8 <updateLedMatrix>
        if(index_led_matrix>=MAX_LED_MATRIX)
 8000ddc:	4b62      	ldr	r3, [pc, #392]	; (8000f68 <main+0x23c>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2208      	movs	r2, #8
 8000de2:	4293      	cmp	r3, r2
 8000de4:	db02      	blt.n	8000dec <main+0xc0>
        	index_led_matrix=0;
 8000de6:	4b60      	ldr	r3, [pc, #384]	; (8000f68 <main+0x23c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
        setTimer_maxtrix(10);
 8000dec:	200a      	movs	r0, #10
 8000dee:	f7ff fecd 	bl	8000b8c <setTimer_maxtrix>
    }
    if(timer_flag2==1)
 8000df2:	4b5e      	ldr	r3, [pc, #376]	; (8000f6c <main+0x240>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d10b      	bne.n	8000e12 <main+0xe6>
    {
        HAL_GPIO_TogglePin(Led_Red_GPIO_Port, Led_Red_Pin);
 8000dfa:	2120      	movs	r1, #32
 8000dfc:	485c      	ldr	r0, [pc, #368]	; (8000f70 <main+0x244>)
 8000dfe:	f000 fd67 	bl	80018d0 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(DOT_GPIO_Port, DOT_Pin);
 8000e02:	2110      	movs	r1, #16
 8000e04:	485a      	ldr	r0, [pc, #360]	; (8000f70 <main+0x244>)
 8000e06:	f000 fd63 	bl	80018d0 <HAL_GPIO_TogglePin>
        setTimer2(1000);
 8000e0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e0e:	f7ff ff59 	bl	8000cc4 <setTimer2>

    }
    if(timer_flag1==1)
 8000e12:	4b58      	ldr	r3, [pc, #352]	; (8000f74 <main+0x248>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d1a6      	bne.n	8000d68 <main+0x3c>
    {
        if(index_led>= MAX_LED)
 8000e1a:	4b57      	ldr	r3, [pc, #348]	; (8000f78 <main+0x24c>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	2204      	movs	r2, #4
 8000e20:	4293      	cmp	r3, r2
 8000e22:	db02      	blt.n	8000e2a <main+0xfe>
        {
        	index_led=0;
 8000e24:	4b54      	ldr	r3, [pc, #336]	; (8000f78 <main+0x24c>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
        }
        // Chuyển đổi trạng thái hiển thị LED 7 đoạn
        if (state == 0)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d120      	bne.n	8000e72 <main+0x146>
        {
            HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET); // Bật LED 1
 8000e30:	2200      	movs	r2, #0
 8000e32:	2140      	movs	r1, #64	; 0x40
 8000e34:	484e      	ldr	r0, [pc, #312]	; (8000f70 <main+0x244>)
 8000e36:	f000 fd33 	bl	80018a0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);   // Tắt LED 2
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	2180      	movs	r1, #128	; 0x80
 8000e3e:	484c      	ldr	r0, [pc, #304]	; (8000f70 <main+0x244>)
 8000e40:	f000 fd2e 	bl	80018a0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);   // Tắt LED 3
 8000e44:	2201      	movs	r2, #1
 8000e46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e4a:	4849      	ldr	r0, [pc, #292]	; (8000f70 <main+0x244>)
 8000e4c:	f000 fd28 	bl	80018a0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);   // Tắt LED 4
 8000e50:	2201      	movs	r2, #1
 8000e52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e56:	4846      	ldr	r0, [pc, #280]	; (8000f70 <main+0x244>)
 8000e58:	f000 fd22 	bl	80018a0 <HAL_GPIO_WritePin>
            update7SEG(index_led++); // Hiển thị số 1
 8000e5c:	4b46      	ldr	r3, [pc, #280]	; (8000f78 <main+0x24c>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	1c5a      	adds	r2, r3, #1
 8000e62:	4945      	ldr	r1, [pc, #276]	; (8000f78 <main+0x24c>)
 8000e64:	600a      	str	r2, [r1, #0]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fe00 	bl	8000a6c <update7SEG>
            state = 1; // Cập nhật trạng thái
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	e06a      	b.n	8000f48 <main+0x21c>
        }
        else if (state == 1)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d120      	bne.n	8000eba <main+0x18e>
        {
            HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);   // Tắt LED 1
 8000e78:	2201      	movs	r2, #1
 8000e7a:	2140      	movs	r1, #64	; 0x40
 8000e7c:	483c      	ldr	r0, [pc, #240]	; (8000f70 <main+0x244>)
 8000e7e:	f000 fd0f 	bl	80018a0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET); // Bật LED 2
 8000e82:	2200      	movs	r2, #0
 8000e84:	2180      	movs	r1, #128	; 0x80
 8000e86:	483a      	ldr	r0, [pc, #232]	; (8000f70 <main+0x244>)
 8000e88:	f000 fd0a 	bl	80018a0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);   // Tắt LED 3
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e92:	4837      	ldr	r0, [pc, #220]	; (8000f70 <main+0x244>)
 8000e94:	f000 fd04 	bl	80018a0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);   // Tắt LED 4
 8000e98:	2201      	movs	r2, #1
 8000e9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e9e:	4834      	ldr	r0, [pc, #208]	; (8000f70 <main+0x244>)
 8000ea0:	f000 fcfe 	bl	80018a0 <HAL_GPIO_WritePin>
            update7SEG(index_led++); // Hiển thị số 1
 8000ea4:	4b34      	ldr	r3, [pc, #208]	; (8000f78 <main+0x24c>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	1c5a      	adds	r2, r3, #1
 8000eaa:	4933      	ldr	r1, [pc, #204]	; (8000f78 <main+0x24c>)
 8000eac:	600a      	str	r2, [r1, #0]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff fddc 	bl	8000a6c <update7SEG>
            state = 2; // Cập nhật trạng thái
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	e046      	b.n	8000f48 <main+0x21c>
        }
        else if (state == 2)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d120      	bne.n	8000f02 <main+0x1d6>
            {
                HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);   // Tắt LED 1
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	2140      	movs	r1, #64	; 0x40
 8000ec4:	482a      	ldr	r0, [pc, #168]	; (8000f70 <main+0x244>)
 8000ec6:	f000 fceb 	bl	80018a0 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET); // Bật LED 2
 8000eca:	2201      	movs	r2, #1
 8000ecc:	2180      	movs	r1, #128	; 0x80
 8000ece:	4828      	ldr	r0, [pc, #160]	; (8000f70 <main+0x244>)
 8000ed0:	f000 fce6 	bl	80018a0 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);   // Tắt LED 3
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eda:	4825      	ldr	r0, [pc, #148]	; (8000f70 <main+0x244>)
 8000edc:	f000 fce0 	bl	80018a0 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);   // Tắt LED 4
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ee6:	4822      	ldr	r0, [pc, #136]	; (8000f70 <main+0x244>)
 8000ee8:	f000 fcda 	bl	80018a0 <HAL_GPIO_WritePin>
                update7SEG(index_led++); // Hiển thị số 1
 8000eec:	4b22      	ldr	r3, [pc, #136]	; (8000f78 <main+0x24c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	1c5a      	adds	r2, r3, #1
 8000ef2:	4921      	ldr	r1, [pc, #132]	; (8000f78 <main+0x24c>)
 8000ef4:	600a      	str	r2, [r1, #0]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff fdb8 	bl	8000a6c <update7SEG>
                state = 3; // Cập nhật trạng thái
 8000efc:	2303      	movs	r3, #3
 8000efe:	607b      	str	r3, [r7, #4]
 8000f00:	e022      	b.n	8000f48 <main+0x21c>
            }
        else if (state == 3)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2b03      	cmp	r3, #3
 8000f06:	d11f      	bne.n	8000f48 <main+0x21c>
            {
                HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);   // Tắt LED 1
 8000f08:	2201      	movs	r2, #1
 8000f0a:	2140      	movs	r1, #64	; 0x40
 8000f0c:	4818      	ldr	r0, [pc, #96]	; (8000f70 <main+0x244>)
 8000f0e:	f000 fcc7 	bl	80018a0 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET); // Bật LED 2
 8000f12:	2201      	movs	r2, #1
 8000f14:	2180      	movs	r1, #128	; 0x80
 8000f16:	4816      	ldr	r0, [pc, #88]	; (8000f70 <main+0x244>)
 8000f18:	f000 fcc2 	bl	80018a0 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);   // Tắt LED 3
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f22:	4813      	ldr	r0, [pc, #76]	; (8000f70 <main+0x244>)
 8000f24:	f000 fcbc 	bl	80018a0 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);   // Tắt LED 4
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f2e:	4810      	ldr	r0, [pc, #64]	; (8000f70 <main+0x244>)
 8000f30:	f000 fcb6 	bl	80018a0 <HAL_GPIO_WritePin>
                update7SEG(index_led++); // Hiển thị số 1
 8000f34:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <main+0x24c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	1c5a      	adds	r2, r3, #1
 8000f3a:	490f      	ldr	r1, [pc, #60]	; (8000f78 <main+0x24c>)
 8000f3c:	600a      	str	r2, [r1, #0]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fd94 	bl	8000a6c <update7SEG>
                state = 0; // Cập nhật trạng thái
 8000f44:	2300      	movs	r3, #0
 8000f46:	607b      	str	r3, [r7, #4]
            }
        setTimer1(250);
 8000f48:	20fa      	movs	r0, #250	; 0xfa
 8000f4a:	f7ff fe87 	bl	8000c5c <setTimer1>
    if(timer_flag==1)
 8000f4e:	e70b      	b.n	8000d68 <main+0x3c>
 8000f50:	200000b0 	.word	0x200000b0
 8000f54:	20000094 	.word	0x20000094
 8000f58:	20000008 	.word	0x20000008
 8000f5c:	20000004 	.word	0x20000004
 8000f60:	20000000 	.word	0x20000000
 8000f64:	200000ac 	.word	0x200000ac
 8000f68:	2000008c 	.word	0x2000008c
 8000f6c:	200000a4 	.word	0x200000a4
 8000f70:	40010800 	.word	0x40010800
 8000f74:	2000009c 	.word	0x2000009c
 8000f78:	20000078 	.word	0x20000078

08000f7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b090      	sub	sp, #64	; 0x40
 8000f80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f82:	f107 0318 	add.w	r3, r7, #24
 8000f86:	2228      	movs	r2, #40	; 0x28
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f001 fc96 	bl	80028bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f90:	1d3b      	adds	r3, r7, #4
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	609a      	str	r2, [r3, #8]
 8000f9a:	60da      	str	r2, [r3, #12]
 8000f9c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fa6:	2310      	movs	r3, #16
 8000fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000faa:	2300      	movs	r3, #0
 8000fac:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fae:	f107 0318 	add.w	r3, r7, #24
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 fca6 	bl	8001904 <HAL_RCC_OscConfig>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000fbe:	f000 f8cb 	bl	8001158 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc2:	230f      	movs	r3, #15
 8000fc4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 ff12 	bl	8001e04 <HAL_RCC_ClockConfig>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000fe6:	f000 f8b7 	bl	8001158 <Error_Handler>
  }
}
 8000fea:	bf00      	nop
 8000fec:	3740      	adds	r7, #64	; 0x40
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ffa:	f107 0308 	add.w	r3, r7, #8
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001008:	463b      	mov	r3, r7
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001010:	4b1d      	ldr	r3, [pc, #116]	; (8001088 <MX_TIM2_Init+0x94>)
 8001012:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001016:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001018:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <MX_TIM2_Init+0x94>)
 800101a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800101e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001020:	4b19      	ldr	r3, [pc, #100]	; (8001088 <MX_TIM2_Init+0x94>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001026:	4b18      	ldr	r3, [pc, #96]	; (8001088 <MX_TIM2_Init+0x94>)
 8001028:	2209      	movs	r2, #9
 800102a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800102c:	4b16      	ldr	r3, [pc, #88]	; (8001088 <MX_TIM2_Init+0x94>)
 800102e:	2200      	movs	r2, #0
 8001030:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001032:	4b15      	ldr	r3, [pc, #84]	; (8001088 <MX_TIM2_Init+0x94>)
 8001034:	2200      	movs	r2, #0
 8001036:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001038:	4813      	ldr	r0, [pc, #76]	; (8001088 <MX_TIM2_Init+0x94>)
 800103a:	f001 f83f 	bl	80020bc <HAL_TIM_Base_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001044:	f000 f888 	bl	8001158 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001048:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800104c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800104e:	f107 0308 	add.w	r3, r7, #8
 8001052:	4619      	mov	r1, r3
 8001054:	480c      	ldr	r0, [pc, #48]	; (8001088 <MX_TIM2_Init+0x94>)
 8001056:	f001 f9bd 	bl	80023d4 <HAL_TIM_ConfigClockSource>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001060:	f000 f87a 	bl	8001158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001064:	2300      	movs	r3, #0
 8001066:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001068:	2300      	movs	r3, #0
 800106a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800106c:	463b      	mov	r3, r7
 800106e:	4619      	mov	r1, r3
 8001070:	4805      	ldr	r0, [pc, #20]	; (8001088 <MX_TIM2_Init+0x94>)
 8001072:	f001 fb95 	bl	80027a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800107c:	f000 f86c 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001080:	bf00      	nop
 8001082:	3718      	adds	r7, #24
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	200000b0 	.word	0x200000b0

0800108c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001092:	f107 0308 	add.w	r3, r7, #8
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a0:	4b22      	ldr	r3, [pc, #136]	; (800112c <MX_GPIO_Init+0xa0>)
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	4a21      	ldr	r2, [pc, #132]	; (800112c <MX_GPIO_Init+0xa0>)
 80010a6:	f043 0304 	orr.w	r3, r3, #4
 80010aa:	6193      	str	r3, [r2, #24]
 80010ac:	4b1f      	ldr	r3, [pc, #124]	; (800112c <MX_GPIO_Init+0xa0>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	f003 0304 	and.w	r3, r3, #4
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b8:	4b1c      	ldr	r3, [pc, #112]	; (800112c <MX_GPIO_Init+0xa0>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	4a1b      	ldr	r2, [pc, #108]	; (800112c <MX_GPIO_Init+0xa0>)
 80010be:	f043 0308 	orr.w	r3, r3, #8
 80010c2:	6193      	str	r3, [r2, #24]
 80010c4:	4b19      	ldr	r3, [pc, #100]	; (800112c <MX_GPIO_Init+0xa0>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	f003 0308 	and.w	r3, r3, #8
 80010cc:	603b      	str	r3, [r7, #0]
 80010ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENM0_Pin|ENM1_Pin|DOT_Pin|Led_Red_Pin
 80010d0:	2200      	movs	r2, #0
 80010d2:	f64f 71fc 	movw	r1, #65532	; 0xfffc
 80010d6:	4816      	ldr	r0, [pc, #88]	; (8001130 <MX_GPIO_Init+0xa4>)
 80010d8:	f000 fbe2 	bl	80018a0 <HAL_GPIO_WritePin>
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|ROW2_Pin
 80010dc:	2200      	movs	r2, #0
 80010de:	f64f 717f 	movw	r1, #65407	; 0xff7f
 80010e2:	4814      	ldr	r0, [pc, #80]	; (8001134 <MX_GPIO_Init+0xa8>)
 80010e4:	f000 fbdc 	bl	80018a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENM0_Pin ENM1_Pin DOT_Pin Led_Red_Pin
                           EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           ENM2_Pin ENM3_Pin ENM4_Pin ENM5_Pin
                           ENM6_Pin ENM7_Pin */
  GPIO_InitStruct.Pin = ENM0_Pin|ENM1_Pin|DOT_Pin|Led_Red_Pin
 80010e8:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80010ec:	60bb      	str	r3, [r7, #8]
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ee:	2301      	movs	r3, #1
 80010f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	2302      	movs	r3, #2
 80010f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fa:	f107 0308 	add.w	r3, r7, #8
 80010fe:	4619      	mov	r1, r3
 8001100:	480b      	ldr	r0, [pc, #44]	; (8001130 <MX_GPIO_Init+0xa4>)
 8001102:	f000 fa53 	bl	80015ac <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin ROW2_Pin
                           ROW3_Pin ROW4_Pin ROW5_Pin ROW6_Pin
                           ROW7_Pin SEG3_Pin SEG4_Pin SEG5_Pin
                           SEG6_Pin ROW0_Pin ROW1_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|ROW2_Pin
 8001106:	f64f 737f 	movw	r3, #65407	; 0xff7f
 800110a:	60bb      	str	r3, [r7, #8]
                          |ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin
                          |ROW7_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin|ROW0_Pin|ROW1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110c:	2301      	movs	r3, #1
 800110e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001114:	2302      	movs	r3, #2
 8001116:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001118:	f107 0308 	add.w	r3, r7, #8
 800111c:	4619      	mov	r1, r3
 800111e:	4805      	ldr	r0, [pc, #20]	; (8001134 <MX_GPIO_Init+0xa8>)
 8001120:	f000 fa44 	bl	80015ac <HAL_GPIO_Init>

}
 8001124:	bf00      	nop
 8001126:	3718      	adds	r7, #24
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40021000 	.word	0x40021000
 8001130:	40010800 	.word	0x40010800
 8001134:	40010c00 	.word	0x40010c00

08001138 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 timerRun();
 8001140:	f7ff fd72 	bl	8000c28 <timerRun>
 timerRun1();
 8001144:	f7ff fda4 	bl	8000c90 <timerRun1>
 timerRun2();
 8001148:	f7ff fdd6 	bl	8000cf8 <timerRun2>
 timerRun_maxtrix();
 800114c:	f7ff fd38 	bl	8000bc0 <timerRun_maxtrix>
}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800115c:	b672      	cpsid	i
}
 800115e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001160:	e7fe      	b.n	8001160 <Error_Handler+0x8>
	...

08001164 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800116a:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <HAL_MspInit+0x5c>)
 800116c:	699b      	ldr	r3, [r3, #24]
 800116e:	4a14      	ldr	r2, [pc, #80]	; (80011c0 <HAL_MspInit+0x5c>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	6193      	str	r3, [r2, #24]
 8001176:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <HAL_MspInit+0x5c>)
 8001178:	699b      	ldr	r3, [r3, #24]
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001182:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <HAL_MspInit+0x5c>)
 8001184:	69db      	ldr	r3, [r3, #28]
 8001186:	4a0e      	ldr	r2, [pc, #56]	; (80011c0 <HAL_MspInit+0x5c>)
 8001188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800118c:	61d3      	str	r3, [r2, #28]
 800118e:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <HAL_MspInit+0x5c>)
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800119a:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <HAL_MspInit+0x60>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	4a04      	ldr	r2, [pc, #16]	; (80011c4 <HAL_MspInit+0x60>)
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b6:	bf00      	nop
 80011b8:	3714      	adds	r7, #20
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr
 80011c0:	40021000 	.word	0x40021000
 80011c4:	40010000 	.word	0x40010000

080011c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011d8:	d113      	bne.n	8001202 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011da:	4b0c      	ldr	r3, [pc, #48]	; (800120c <HAL_TIM_Base_MspInit+0x44>)
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	4a0b      	ldr	r2, [pc, #44]	; (800120c <HAL_TIM_Base_MspInit+0x44>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	61d3      	str	r3, [r2, #28]
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <HAL_TIM_Base_MspInit+0x44>)
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2100      	movs	r1, #0
 80011f6:	201c      	movs	r0, #28
 80011f8:	f000 f9a1 	bl	800153e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011fc:	201c      	movs	r0, #28
 80011fe:	f000 f9ba 	bl	8001576 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001202:	bf00      	nop
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40021000 	.word	0x40021000

08001210 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001214:	e7fe      	b.n	8001214 <NMI_Handler+0x4>

08001216 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800121a:	e7fe      	b.n	800121a <HardFault_Handler+0x4>

0800121c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <MemManage_Handler+0x4>

08001222 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <BusFault_Handler+0x4>

08001228 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800122c:	e7fe      	b.n	800122c <UsageFault_Handler+0x4>

0800122e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr

0800123a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	46bd      	mov	sp, r7
 8001242:	bc80      	pop	{r7}
 8001244:	4770      	bx	lr

08001246 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	bc80      	pop	{r7}
 8001250:	4770      	bx	lr

08001252 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001256:	f000 f87f 	bl	8001358 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001264:	4802      	ldr	r0, [pc, #8]	; (8001270 <TIM2_IRQHandler+0x10>)
 8001266:	f000 ffc5 	bl	80021f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	200000b0 	.word	0x200000b0

08001274 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr

08001280 <Reset_Handler>:
 8001280:	f7ff fff8 	bl	8001274 <SystemInit>
 8001284:	480b      	ldr	r0, [pc, #44]	; (80012b4 <LoopFillZerobss+0xe>)
 8001286:	490c      	ldr	r1, [pc, #48]	; (80012b8 <LoopFillZerobss+0x12>)
 8001288:	4a0c      	ldr	r2, [pc, #48]	; (80012bc <LoopFillZerobss+0x16>)
 800128a:	2300      	movs	r3, #0
 800128c:	e002      	b.n	8001294 <LoopCopyDataInit>

0800128e <CopyDataInit>:
 800128e:	58d4      	ldr	r4, [r2, r3]
 8001290:	50c4      	str	r4, [r0, r3]
 8001292:	3304      	adds	r3, #4

08001294 <LoopCopyDataInit>:
 8001294:	18c4      	adds	r4, r0, r3
 8001296:	428c      	cmp	r4, r1
 8001298:	d3f9      	bcc.n	800128e <CopyDataInit>
 800129a:	4a09      	ldr	r2, [pc, #36]	; (80012c0 <LoopFillZerobss+0x1a>)
 800129c:	4c09      	ldr	r4, [pc, #36]	; (80012c4 <LoopFillZerobss+0x1e>)
 800129e:	2300      	movs	r3, #0
 80012a0:	e001      	b.n	80012a6 <LoopFillZerobss>

080012a2 <FillZerobss>:
 80012a2:	6013      	str	r3, [r2, #0]
 80012a4:	3204      	adds	r2, #4

080012a6 <LoopFillZerobss>:
 80012a6:	42a2      	cmp	r2, r4
 80012a8:	d3fb      	bcc.n	80012a2 <FillZerobss>
 80012aa:	f001 fae3 	bl	8002874 <__libc_init_array>
 80012ae:	f7ff fd3d 	bl	8000d2c <main>
 80012b2:	4770      	bx	lr
 80012b4:	20000000 	.word	0x20000000
 80012b8:	2000005c 	.word	0x2000005c
 80012bc:	08002910 	.word	0x08002910
 80012c0:	2000005c 	.word	0x2000005c
 80012c4:	200000fc 	.word	0x200000fc

080012c8 <ADC1_2_IRQHandler>:
 80012c8:	e7fe      	b.n	80012c8 <ADC1_2_IRQHandler>
	...

080012cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012d0:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <HAL_Init+0x28>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a07      	ldr	r2, [pc, #28]	; (80012f4 <HAL_Init+0x28>)
 80012d6:	f043 0310 	orr.w	r3, r3, #16
 80012da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012dc:	2003      	movs	r0, #3
 80012de:	f000 f923 	bl	8001528 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012e2:	200f      	movs	r0, #15
 80012e4:	f000 f808 	bl	80012f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012e8:	f7ff ff3c 	bl	8001164 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40022000 	.word	0x40022000

080012f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001300:	4b12      	ldr	r3, [pc, #72]	; (800134c <HAL_InitTick+0x54>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	4b12      	ldr	r3, [pc, #72]	; (8001350 <HAL_InitTick+0x58>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	4619      	mov	r1, r3
 800130a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800130e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001312:	fbb2 f3f3 	udiv	r3, r2, r3
 8001316:	4618      	mov	r0, r3
 8001318:	f000 f93b 	bl	8001592 <HAL_SYSTICK_Config>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e00e      	b.n	8001344 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2b0f      	cmp	r3, #15
 800132a:	d80a      	bhi.n	8001342 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800132c:	2200      	movs	r2, #0
 800132e:	6879      	ldr	r1, [r7, #4]
 8001330:	f04f 30ff 	mov.w	r0, #4294967295
 8001334:	f000 f903 	bl	800153e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001338:	4a06      	ldr	r2, [pc, #24]	; (8001354 <HAL_InitTick+0x5c>)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800133e:	2300      	movs	r3, #0
 8001340:	e000      	b.n	8001344 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
}
 8001344:	4618      	mov	r0, r3
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000050 	.word	0x20000050
 8001350:	20000058 	.word	0x20000058
 8001354:	20000054 	.word	0x20000054

08001358 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800135c:	4b05      	ldr	r3, [pc, #20]	; (8001374 <HAL_IncTick+0x1c>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	461a      	mov	r2, r3
 8001362:	4b05      	ldr	r3, [pc, #20]	; (8001378 <HAL_IncTick+0x20>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4413      	add	r3, r2
 8001368:	4a03      	ldr	r2, [pc, #12]	; (8001378 <HAL_IncTick+0x20>)
 800136a:	6013      	str	r3, [r2, #0]
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr
 8001374:	20000058 	.word	0x20000058
 8001378:	200000f8 	.word	0x200000f8

0800137c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  return uwTick;
 8001380:	4b02      	ldr	r3, [pc, #8]	; (800138c <HAL_GetTick+0x10>)
 8001382:	681b      	ldr	r3, [r3, #0]
}
 8001384:	4618      	mov	r0, r3
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr
 800138c:	200000f8 	.word	0x200000f8

08001390 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <__NVIC_SetPriorityGrouping+0x44>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013a6:	68ba      	ldr	r2, [r7, #8]
 80013a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013ac:	4013      	ands	r3, r2
 80013ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013c2:	4a04      	ldr	r2, [pc, #16]	; (80013d4 <__NVIC_SetPriorityGrouping+0x44>)
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	60d3      	str	r3, [r2, #12]
}
 80013c8:	bf00      	nop
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bc80      	pop	{r7}
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013dc:	4b04      	ldr	r3, [pc, #16]	; (80013f0 <__NVIC_GetPriorityGrouping+0x18>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	0a1b      	lsrs	r3, r3, #8
 80013e2:	f003 0307 	and.w	r3, r3, #7
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	2b00      	cmp	r3, #0
 8001404:	db0b      	blt.n	800141e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	f003 021f 	and.w	r2, r3, #31
 800140c:	4906      	ldr	r1, [pc, #24]	; (8001428 <__NVIC_EnableIRQ+0x34>)
 800140e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001412:	095b      	lsrs	r3, r3, #5
 8001414:	2001      	movs	r0, #1
 8001416:	fa00 f202 	lsl.w	r2, r0, r2
 800141a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr
 8001428:	e000e100 	.word	0xe000e100

0800142c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	6039      	str	r1, [r7, #0]
 8001436:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143c:	2b00      	cmp	r3, #0
 800143e:	db0a      	blt.n	8001456 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	b2da      	uxtb	r2, r3
 8001444:	490c      	ldr	r1, [pc, #48]	; (8001478 <__NVIC_SetPriority+0x4c>)
 8001446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144a:	0112      	lsls	r2, r2, #4
 800144c:	b2d2      	uxtb	r2, r2
 800144e:	440b      	add	r3, r1
 8001450:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001454:	e00a      	b.n	800146c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	b2da      	uxtb	r2, r3
 800145a:	4908      	ldr	r1, [pc, #32]	; (800147c <__NVIC_SetPriority+0x50>)
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	f003 030f 	and.w	r3, r3, #15
 8001462:	3b04      	subs	r3, #4
 8001464:	0112      	lsls	r2, r2, #4
 8001466:	b2d2      	uxtb	r2, r2
 8001468:	440b      	add	r3, r1
 800146a:	761a      	strb	r2, [r3, #24]
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	bc80      	pop	{r7}
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	e000e100 	.word	0xe000e100
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001480:	b480      	push	{r7}
 8001482:	b089      	sub	sp, #36	; 0x24
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	f1c3 0307 	rsb	r3, r3, #7
 800149a:	2b04      	cmp	r3, #4
 800149c:	bf28      	it	cs
 800149e:	2304      	movcs	r3, #4
 80014a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3304      	adds	r3, #4
 80014a6:	2b06      	cmp	r3, #6
 80014a8:	d902      	bls.n	80014b0 <NVIC_EncodePriority+0x30>
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	3b03      	subs	r3, #3
 80014ae:	e000      	b.n	80014b2 <NVIC_EncodePriority+0x32>
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b4:	f04f 32ff 	mov.w	r2, #4294967295
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43da      	mvns	r2, r3
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	401a      	ands	r2, r3
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c8:	f04f 31ff 	mov.w	r1, #4294967295
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa01 f303 	lsl.w	r3, r1, r3
 80014d2:	43d9      	mvns	r1, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d8:	4313      	orrs	r3, r2
         );
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3724      	adds	r7, #36	; 0x24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr

080014e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3b01      	subs	r3, #1
 80014f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014f4:	d301      	bcc.n	80014fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014f6:	2301      	movs	r3, #1
 80014f8:	e00f      	b.n	800151a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014fa:	4a0a      	ldr	r2, [pc, #40]	; (8001524 <SysTick_Config+0x40>)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	3b01      	subs	r3, #1
 8001500:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001502:	210f      	movs	r1, #15
 8001504:	f04f 30ff 	mov.w	r0, #4294967295
 8001508:	f7ff ff90 	bl	800142c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800150c:	4b05      	ldr	r3, [pc, #20]	; (8001524 <SysTick_Config+0x40>)
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001512:	4b04      	ldr	r3, [pc, #16]	; (8001524 <SysTick_Config+0x40>)
 8001514:	2207      	movs	r2, #7
 8001516:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	e000e010 	.word	0xe000e010

08001528 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f7ff ff2d 	bl	8001390 <__NVIC_SetPriorityGrouping>
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800153e:	b580      	push	{r7, lr}
 8001540:	b086      	sub	sp, #24
 8001542:	af00      	add	r7, sp, #0
 8001544:	4603      	mov	r3, r0
 8001546:	60b9      	str	r1, [r7, #8]
 8001548:	607a      	str	r2, [r7, #4]
 800154a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001550:	f7ff ff42 	bl	80013d8 <__NVIC_GetPriorityGrouping>
 8001554:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	68b9      	ldr	r1, [r7, #8]
 800155a:	6978      	ldr	r0, [r7, #20]
 800155c:	f7ff ff90 	bl	8001480 <NVIC_EncodePriority>
 8001560:	4602      	mov	r2, r0
 8001562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001566:	4611      	mov	r1, r2
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff ff5f 	bl	800142c <__NVIC_SetPriority>
}
 800156e:	bf00      	nop
 8001570:	3718      	adds	r7, #24
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b082      	sub	sp, #8
 800157a:	af00      	add	r7, sp, #0
 800157c:	4603      	mov	r3, r0
 800157e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff ff35 	bl	80013f4 <__NVIC_EnableIRQ>
}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b082      	sub	sp, #8
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f7ff ffa2 	bl	80014e4 <SysTick_Config>
 80015a0:	4603      	mov	r3, r0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
	...

080015ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b08b      	sub	sp, #44	; 0x2c
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015b6:	2300      	movs	r3, #0
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015ba:	2300      	movs	r3, #0
 80015bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015be:	e148      	b.n	8001852 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015c0:	2201      	movs	r2, #1
 80015c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	69fa      	ldr	r2, [r7, #28]
 80015d0:	4013      	ands	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	429a      	cmp	r2, r3
 80015da:	f040 8137 	bne.w	800184c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	4aa3      	ldr	r2, [pc, #652]	; (8001870 <HAL_GPIO_Init+0x2c4>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d05e      	beq.n	80016a6 <HAL_GPIO_Init+0xfa>
 80015e8:	4aa1      	ldr	r2, [pc, #644]	; (8001870 <HAL_GPIO_Init+0x2c4>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d875      	bhi.n	80016da <HAL_GPIO_Init+0x12e>
 80015ee:	4aa1      	ldr	r2, [pc, #644]	; (8001874 <HAL_GPIO_Init+0x2c8>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d058      	beq.n	80016a6 <HAL_GPIO_Init+0xfa>
 80015f4:	4a9f      	ldr	r2, [pc, #636]	; (8001874 <HAL_GPIO_Init+0x2c8>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d86f      	bhi.n	80016da <HAL_GPIO_Init+0x12e>
 80015fa:	4a9f      	ldr	r2, [pc, #636]	; (8001878 <HAL_GPIO_Init+0x2cc>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d052      	beq.n	80016a6 <HAL_GPIO_Init+0xfa>
 8001600:	4a9d      	ldr	r2, [pc, #628]	; (8001878 <HAL_GPIO_Init+0x2cc>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d869      	bhi.n	80016da <HAL_GPIO_Init+0x12e>
 8001606:	4a9d      	ldr	r2, [pc, #628]	; (800187c <HAL_GPIO_Init+0x2d0>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d04c      	beq.n	80016a6 <HAL_GPIO_Init+0xfa>
 800160c:	4a9b      	ldr	r2, [pc, #620]	; (800187c <HAL_GPIO_Init+0x2d0>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d863      	bhi.n	80016da <HAL_GPIO_Init+0x12e>
 8001612:	4a9b      	ldr	r2, [pc, #620]	; (8001880 <HAL_GPIO_Init+0x2d4>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d046      	beq.n	80016a6 <HAL_GPIO_Init+0xfa>
 8001618:	4a99      	ldr	r2, [pc, #612]	; (8001880 <HAL_GPIO_Init+0x2d4>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d85d      	bhi.n	80016da <HAL_GPIO_Init+0x12e>
 800161e:	2b12      	cmp	r3, #18
 8001620:	d82a      	bhi.n	8001678 <HAL_GPIO_Init+0xcc>
 8001622:	2b12      	cmp	r3, #18
 8001624:	d859      	bhi.n	80016da <HAL_GPIO_Init+0x12e>
 8001626:	a201      	add	r2, pc, #4	; (adr r2, 800162c <HAL_GPIO_Init+0x80>)
 8001628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800162c:	080016a7 	.word	0x080016a7
 8001630:	08001681 	.word	0x08001681
 8001634:	08001693 	.word	0x08001693
 8001638:	080016d5 	.word	0x080016d5
 800163c:	080016db 	.word	0x080016db
 8001640:	080016db 	.word	0x080016db
 8001644:	080016db 	.word	0x080016db
 8001648:	080016db 	.word	0x080016db
 800164c:	080016db 	.word	0x080016db
 8001650:	080016db 	.word	0x080016db
 8001654:	080016db 	.word	0x080016db
 8001658:	080016db 	.word	0x080016db
 800165c:	080016db 	.word	0x080016db
 8001660:	080016db 	.word	0x080016db
 8001664:	080016db 	.word	0x080016db
 8001668:	080016db 	.word	0x080016db
 800166c:	080016db 	.word	0x080016db
 8001670:	08001689 	.word	0x08001689
 8001674:	0800169d 	.word	0x0800169d
 8001678:	4a82      	ldr	r2, [pc, #520]	; (8001884 <HAL_GPIO_Init+0x2d8>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d013      	beq.n	80016a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800167e:	e02c      	b.n	80016da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	623b      	str	r3, [r7, #32]
          break;
 8001686:	e029      	b.n	80016dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	3304      	adds	r3, #4
 800168e:	623b      	str	r3, [r7, #32]
          break;
 8001690:	e024      	b.n	80016dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	3308      	adds	r3, #8
 8001698:	623b      	str	r3, [r7, #32]
          break;
 800169a:	e01f      	b.n	80016dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	330c      	adds	r3, #12
 80016a2:	623b      	str	r3, [r7, #32]
          break;
 80016a4:	e01a      	b.n	80016dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d102      	bne.n	80016b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016ae:	2304      	movs	r3, #4
 80016b0:	623b      	str	r3, [r7, #32]
          break;
 80016b2:	e013      	b.n	80016dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d105      	bne.n	80016c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016bc:	2308      	movs	r3, #8
 80016be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	69fa      	ldr	r2, [r7, #28]
 80016c4:	611a      	str	r2, [r3, #16]
          break;
 80016c6:	e009      	b.n	80016dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016c8:	2308      	movs	r3, #8
 80016ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	69fa      	ldr	r2, [r7, #28]
 80016d0:	615a      	str	r2, [r3, #20]
          break;
 80016d2:	e003      	b.n	80016dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016d4:	2300      	movs	r3, #0
 80016d6:	623b      	str	r3, [r7, #32]
          break;
 80016d8:	e000      	b.n	80016dc <HAL_GPIO_Init+0x130>
          break;
 80016da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	2bff      	cmp	r3, #255	; 0xff
 80016e0:	d801      	bhi.n	80016e6 <HAL_GPIO_Init+0x13a>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	e001      	b.n	80016ea <HAL_GPIO_Init+0x13e>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	3304      	adds	r3, #4
 80016ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	2bff      	cmp	r3, #255	; 0xff
 80016f0:	d802      	bhi.n	80016f8 <HAL_GPIO_Init+0x14c>
 80016f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	e002      	b.n	80016fe <HAL_GPIO_Init+0x152>
 80016f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fa:	3b08      	subs	r3, #8
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	210f      	movs	r1, #15
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	fa01 f303 	lsl.w	r3, r1, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	401a      	ands	r2, r3
 8001710:	6a39      	ldr	r1, [r7, #32]
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	fa01 f303 	lsl.w	r3, r1, r3
 8001718:	431a      	orrs	r2, r3
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	f000 8090 	beq.w	800184c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800172c:	4b56      	ldr	r3, [pc, #344]	; (8001888 <HAL_GPIO_Init+0x2dc>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	4a55      	ldr	r2, [pc, #340]	; (8001888 <HAL_GPIO_Init+0x2dc>)
 8001732:	f043 0301 	orr.w	r3, r3, #1
 8001736:	6193      	str	r3, [r2, #24]
 8001738:	4b53      	ldr	r3, [pc, #332]	; (8001888 <HAL_GPIO_Init+0x2dc>)
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001744:	4a51      	ldr	r2, [pc, #324]	; (800188c <HAL_GPIO_Init+0x2e0>)
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001748:	089b      	lsrs	r3, r3, #2
 800174a:	3302      	adds	r3, #2
 800174c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001750:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001754:	f003 0303 	and.w	r3, r3, #3
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	220f      	movs	r2, #15
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	43db      	mvns	r3, r3
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	4013      	ands	r3, r2
 8001766:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4a49      	ldr	r2, [pc, #292]	; (8001890 <HAL_GPIO_Init+0x2e4>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d00d      	beq.n	800178c <HAL_GPIO_Init+0x1e0>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a48      	ldr	r2, [pc, #288]	; (8001894 <HAL_GPIO_Init+0x2e8>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d007      	beq.n	8001788 <HAL_GPIO_Init+0x1dc>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4a47      	ldr	r2, [pc, #284]	; (8001898 <HAL_GPIO_Init+0x2ec>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d101      	bne.n	8001784 <HAL_GPIO_Init+0x1d8>
 8001780:	2302      	movs	r3, #2
 8001782:	e004      	b.n	800178e <HAL_GPIO_Init+0x1e2>
 8001784:	2303      	movs	r3, #3
 8001786:	e002      	b.n	800178e <HAL_GPIO_Init+0x1e2>
 8001788:	2301      	movs	r3, #1
 800178a:	e000      	b.n	800178e <HAL_GPIO_Init+0x1e2>
 800178c:	2300      	movs	r3, #0
 800178e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001790:	f002 0203 	and.w	r2, r2, #3
 8001794:	0092      	lsls	r2, r2, #2
 8001796:	4093      	lsls	r3, r2
 8001798:	68fa      	ldr	r2, [r7, #12]
 800179a:	4313      	orrs	r3, r2
 800179c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800179e:	493b      	ldr	r1, [pc, #236]	; (800188c <HAL_GPIO_Init+0x2e0>)
 80017a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a2:	089b      	lsrs	r3, r3, #2
 80017a4:	3302      	adds	r3, #2
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d006      	beq.n	80017c6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017b8:	4b38      	ldr	r3, [pc, #224]	; (800189c <HAL_GPIO_Init+0x2f0>)
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	4937      	ldr	r1, [pc, #220]	; (800189c <HAL_GPIO_Init+0x2f0>)
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	608b      	str	r3, [r1, #8]
 80017c4:	e006      	b.n	80017d4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017c6:	4b35      	ldr	r3, [pc, #212]	; (800189c <HAL_GPIO_Init+0x2f0>)
 80017c8:	689a      	ldr	r2, [r3, #8]
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	43db      	mvns	r3, r3
 80017ce:	4933      	ldr	r1, [pc, #204]	; (800189c <HAL_GPIO_Init+0x2f0>)
 80017d0:	4013      	ands	r3, r2
 80017d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d006      	beq.n	80017ee <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017e0:	4b2e      	ldr	r3, [pc, #184]	; (800189c <HAL_GPIO_Init+0x2f0>)
 80017e2:	68da      	ldr	r2, [r3, #12]
 80017e4:	492d      	ldr	r1, [pc, #180]	; (800189c <HAL_GPIO_Init+0x2f0>)
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	60cb      	str	r3, [r1, #12]
 80017ec:	e006      	b.n	80017fc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017ee:	4b2b      	ldr	r3, [pc, #172]	; (800189c <HAL_GPIO_Init+0x2f0>)
 80017f0:	68da      	ldr	r2, [r3, #12]
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	43db      	mvns	r3, r3
 80017f6:	4929      	ldr	r1, [pc, #164]	; (800189c <HAL_GPIO_Init+0x2f0>)
 80017f8:	4013      	ands	r3, r2
 80017fa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d006      	beq.n	8001816 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001808:	4b24      	ldr	r3, [pc, #144]	; (800189c <HAL_GPIO_Init+0x2f0>)
 800180a:	685a      	ldr	r2, [r3, #4]
 800180c:	4923      	ldr	r1, [pc, #140]	; (800189c <HAL_GPIO_Init+0x2f0>)
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	4313      	orrs	r3, r2
 8001812:	604b      	str	r3, [r1, #4]
 8001814:	e006      	b.n	8001824 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001816:	4b21      	ldr	r3, [pc, #132]	; (800189c <HAL_GPIO_Init+0x2f0>)
 8001818:	685a      	ldr	r2, [r3, #4]
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	43db      	mvns	r3, r3
 800181e:	491f      	ldr	r1, [pc, #124]	; (800189c <HAL_GPIO_Init+0x2f0>)
 8001820:	4013      	ands	r3, r2
 8001822:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d006      	beq.n	800183e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001830:	4b1a      	ldr	r3, [pc, #104]	; (800189c <HAL_GPIO_Init+0x2f0>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	4919      	ldr	r1, [pc, #100]	; (800189c <HAL_GPIO_Init+0x2f0>)
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	4313      	orrs	r3, r2
 800183a:	600b      	str	r3, [r1, #0]
 800183c:	e006      	b.n	800184c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800183e:	4b17      	ldr	r3, [pc, #92]	; (800189c <HAL_GPIO_Init+0x2f0>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	43db      	mvns	r3, r3
 8001846:	4915      	ldr	r1, [pc, #84]	; (800189c <HAL_GPIO_Init+0x2f0>)
 8001848:	4013      	ands	r3, r2
 800184a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184e:	3301      	adds	r3, #1
 8001850:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001858:	fa22 f303 	lsr.w	r3, r2, r3
 800185c:	2b00      	cmp	r3, #0
 800185e:	f47f aeaf 	bne.w	80015c0 <HAL_GPIO_Init+0x14>
  }
}
 8001862:	bf00      	nop
 8001864:	bf00      	nop
 8001866:	372c      	adds	r7, #44	; 0x2c
 8001868:	46bd      	mov	sp, r7
 800186a:	bc80      	pop	{r7}
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	10320000 	.word	0x10320000
 8001874:	10310000 	.word	0x10310000
 8001878:	10220000 	.word	0x10220000
 800187c:	10210000 	.word	0x10210000
 8001880:	10120000 	.word	0x10120000
 8001884:	10110000 	.word	0x10110000
 8001888:	40021000 	.word	0x40021000
 800188c:	40010000 	.word	0x40010000
 8001890:	40010800 	.word	0x40010800
 8001894:	40010c00 	.word	0x40010c00
 8001898:	40011000 	.word	0x40011000
 800189c:	40010400 	.word	0x40010400

080018a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	460b      	mov	r3, r1
 80018aa:	807b      	strh	r3, [r7, #2]
 80018ac:	4613      	mov	r3, r2
 80018ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018b0:	787b      	ldrb	r3, [r7, #1]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018b6:	887a      	ldrh	r2, [r7, #2]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018bc:	e003      	b.n	80018c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018be:	887b      	ldrh	r3, [r7, #2]
 80018c0:	041a      	lsls	r2, r3, #16
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	611a      	str	r2, [r3, #16]
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr

080018d0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018e2:	887a      	ldrh	r2, [r7, #2]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	4013      	ands	r3, r2
 80018e8:	041a      	lsls	r2, r3, #16
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	43d9      	mvns	r1, r3
 80018ee:	887b      	ldrh	r3, [r7, #2]
 80018f0:	400b      	ands	r3, r1
 80018f2:	431a      	orrs	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	611a      	str	r2, [r3, #16]
}
 80018f8:	bf00      	nop
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr
	...

08001904 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e26c      	b.n	8001df0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	2b00      	cmp	r3, #0
 8001920:	f000 8087 	beq.w	8001a32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001924:	4b92      	ldr	r3, [pc, #584]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 030c 	and.w	r3, r3, #12
 800192c:	2b04      	cmp	r3, #4
 800192e:	d00c      	beq.n	800194a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001930:	4b8f      	ldr	r3, [pc, #572]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 030c 	and.w	r3, r3, #12
 8001938:	2b08      	cmp	r3, #8
 800193a:	d112      	bne.n	8001962 <HAL_RCC_OscConfig+0x5e>
 800193c:	4b8c      	ldr	r3, [pc, #560]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001948:	d10b      	bne.n	8001962 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800194a:	4b89      	ldr	r3, [pc, #548]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d06c      	beq.n	8001a30 <HAL_RCC_OscConfig+0x12c>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d168      	bne.n	8001a30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e246      	b.n	8001df0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800196a:	d106      	bne.n	800197a <HAL_RCC_OscConfig+0x76>
 800196c:	4b80      	ldr	r3, [pc, #512]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a7f      	ldr	r2, [pc, #508]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001972:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001976:	6013      	str	r3, [r2, #0]
 8001978:	e02e      	b.n	80019d8 <HAL_RCC_OscConfig+0xd4>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d10c      	bne.n	800199c <HAL_RCC_OscConfig+0x98>
 8001982:	4b7b      	ldr	r3, [pc, #492]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a7a      	ldr	r2, [pc, #488]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001988:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800198c:	6013      	str	r3, [r2, #0]
 800198e:	4b78      	ldr	r3, [pc, #480]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a77      	ldr	r2, [pc, #476]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001994:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001998:	6013      	str	r3, [r2, #0]
 800199a:	e01d      	b.n	80019d8 <HAL_RCC_OscConfig+0xd4>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019a4:	d10c      	bne.n	80019c0 <HAL_RCC_OscConfig+0xbc>
 80019a6:	4b72      	ldr	r3, [pc, #456]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a71      	ldr	r2, [pc, #452]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019b0:	6013      	str	r3, [r2, #0]
 80019b2:	4b6f      	ldr	r3, [pc, #444]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a6e      	ldr	r2, [pc, #440]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 80019b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	e00b      	b.n	80019d8 <HAL_RCC_OscConfig+0xd4>
 80019c0:	4b6b      	ldr	r3, [pc, #428]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a6a      	ldr	r2, [pc, #424]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 80019c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ca:	6013      	str	r3, [r2, #0]
 80019cc:	4b68      	ldr	r3, [pc, #416]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a67      	ldr	r2, [pc, #412]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 80019d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d013      	beq.n	8001a08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e0:	f7ff fccc 	bl	800137c <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019e8:	f7ff fcc8 	bl	800137c <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b64      	cmp	r3, #100	; 0x64
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e1fa      	b.n	8001df0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019fa:	4b5d      	ldr	r3, [pc, #372]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d0f0      	beq.n	80019e8 <HAL_RCC_OscConfig+0xe4>
 8001a06:	e014      	b.n	8001a32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a08:	f7ff fcb8 	bl	800137c <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a10:	f7ff fcb4 	bl	800137c <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b64      	cmp	r3, #100	; 0x64
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e1e6      	b.n	8001df0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a22:	4b53      	ldr	r3, [pc, #332]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1f0      	bne.n	8001a10 <HAL_RCC_OscConfig+0x10c>
 8001a2e:	e000      	b.n	8001a32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d063      	beq.n	8001b06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a3e:	4b4c      	ldr	r3, [pc, #304]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f003 030c 	and.w	r3, r3, #12
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d00b      	beq.n	8001a62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a4a:	4b49      	ldr	r3, [pc, #292]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f003 030c 	and.w	r3, r3, #12
 8001a52:	2b08      	cmp	r3, #8
 8001a54:	d11c      	bne.n	8001a90 <HAL_RCC_OscConfig+0x18c>
 8001a56:	4b46      	ldr	r3, [pc, #280]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d116      	bne.n	8001a90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a62:	4b43      	ldr	r3, [pc, #268]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d005      	beq.n	8001a7a <HAL_RCC_OscConfig+0x176>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d001      	beq.n	8001a7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e1ba      	b.n	8001df0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a7a:	4b3d      	ldr	r3, [pc, #244]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	4939      	ldr	r1, [pc, #228]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a8e:	e03a      	b.n	8001b06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	691b      	ldr	r3, [r3, #16]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d020      	beq.n	8001ada <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a98:	4b36      	ldr	r3, [pc, #216]	; (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9e:	f7ff fc6d 	bl	800137c <HAL_GetTick>
 8001aa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa4:	e008      	b.n	8001ab8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aa6:	f7ff fc69 	bl	800137c <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e19b      	b.n	8001df0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab8:	4b2d      	ldr	r3, [pc, #180]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d0f0      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac4:	4b2a      	ldr	r3, [pc, #168]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	695b      	ldr	r3, [r3, #20]
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	4927      	ldr	r1, [pc, #156]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	600b      	str	r3, [r1, #0]
 8001ad8:	e015      	b.n	8001b06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ada:	4b26      	ldr	r3, [pc, #152]	; (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae0:	f7ff fc4c 	bl	800137c <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae8:	f7ff fc48 	bl	800137c <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e17a      	b.n	8001df0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001afa:	4b1d      	ldr	r3, [pc, #116]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1f0      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0308 	and.w	r3, r3, #8
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d03a      	beq.n	8001b88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d019      	beq.n	8001b4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b1a:	4b17      	ldr	r3, [pc, #92]	; (8001b78 <HAL_RCC_OscConfig+0x274>)
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b20:	f7ff fc2c 	bl	800137c <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b28:	f7ff fc28 	bl	800137c <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e15a      	b.n	8001df0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b3a:	4b0d      	ldr	r3, [pc, #52]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d0f0      	beq.n	8001b28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b46:	2001      	movs	r0, #1
 8001b48:	f000 fa9a 	bl	8002080 <RCC_Delay>
 8001b4c:	e01c      	b.n	8001b88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b4e:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <HAL_RCC_OscConfig+0x274>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b54:	f7ff fc12 	bl	800137c <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b5a:	e00f      	b.n	8001b7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b5c:	f7ff fc0e 	bl	800137c <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d908      	bls.n	8001b7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e140      	b.n	8001df0 <HAL_RCC_OscConfig+0x4ec>
 8001b6e:	bf00      	nop
 8001b70:	40021000 	.word	0x40021000
 8001b74:	42420000 	.word	0x42420000
 8001b78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b7c:	4b9e      	ldr	r3, [pc, #632]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1e9      	bne.n	8001b5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0304 	and.w	r3, r3, #4
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	f000 80a6 	beq.w	8001ce2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b96:	2300      	movs	r3, #0
 8001b98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b9a:	4b97      	ldr	r3, [pc, #604]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d10d      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ba6:	4b94      	ldr	r3, [pc, #592]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	4a93      	ldr	r2, [pc, #588]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb0:	61d3      	str	r3, [r2, #28]
 8001bb2:	4b91      	ldr	r3, [pc, #580]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bba:	60bb      	str	r3, [r7, #8]
 8001bbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc2:	4b8e      	ldr	r3, [pc, #568]	; (8001dfc <HAL_RCC_OscConfig+0x4f8>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d118      	bne.n	8001c00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bce:	4b8b      	ldr	r3, [pc, #556]	; (8001dfc <HAL_RCC_OscConfig+0x4f8>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a8a      	ldr	r2, [pc, #552]	; (8001dfc <HAL_RCC_OscConfig+0x4f8>)
 8001bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bda:	f7ff fbcf 	bl	800137c <HAL_GetTick>
 8001bde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be0:	e008      	b.n	8001bf4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001be2:	f7ff fbcb 	bl	800137c <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b64      	cmp	r3, #100	; 0x64
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e0fd      	b.n	8001df0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf4:	4b81      	ldr	r3, [pc, #516]	; (8001dfc <HAL_RCC_OscConfig+0x4f8>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d0f0      	beq.n	8001be2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d106      	bne.n	8001c16 <HAL_RCC_OscConfig+0x312>
 8001c08:	4b7b      	ldr	r3, [pc, #492]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001c0a:	6a1b      	ldr	r3, [r3, #32]
 8001c0c:	4a7a      	ldr	r2, [pc, #488]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001c0e:	f043 0301 	orr.w	r3, r3, #1
 8001c12:	6213      	str	r3, [r2, #32]
 8001c14:	e02d      	b.n	8001c72 <HAL_RCC_OscConfig+0x36e>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10c      	bne.n	8001c38 <HAL_RCC_OscConfig+0x334>
 8001c1e:	4b76      	ldr	r3, [pc, #472]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001c20:	6a1b      	ldr	r3, [r3, #32]
 8001c22:	4a75      	ldr	r2, [pc, #468]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001c24:	f023 0301 	bic.w	r3, r3, #1
 8001c28:	6213      	str	r3, [r2, #32]
 8001c2a:	4b73      	ldr	r3, [pc, #460]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001c2c:	6a1b      	ldr	r3, [r3, #32]
 8001c2e:	4a72      	ldr	r2, [pc, #456]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001c30:	f023 0304 	bic.w	r3, r3, #4
 8001c34:	6213      	str	r3, [r2, #32]
 8001c36:	e01c      	b.n	8001c72 <HAL_RCC_OscConfig+0x36e>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	2b05      	cmp	r3, #5
 8001c3e:	d10c      	bne.n	8001c5a <HAL_RCC_OscConfig+0x356>
 8001c40:	4b6d      	ldr	r3, [pc, #436]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001c42:	6a1b      	ldr	r3, [r3, #32]
 8001c44:	4a6c      	ldr	r2, [pc, #432]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001c46:	f043 0304 	orr.w	r3, r3, #4
 8001c4a:	6213      	str	r3, [r2, #32]
 8001c4c:	4b6a      	ldr	r3, [pc, #424]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
 8001c50:	4a69      	ldr	r2, [pc, #420]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001c52:	f043 0301 	orr.w	r3, r3, #1
 8001c56:	6213      	str	r3, [r2, #32]
 8001c58:	e00b      	b.n	8001c72 <HAL_RCC_OscConfig+0x36e>
 8001c5a:	4b67      	ldr	r3, [pc, #412]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001c5c:	6a1b      	ldr	r3, [r3, #32]
 8001c5e:	4a66      	ldr	r2, [pc, #408]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001c60:	f023 0301 	bic.w	r3, r3, #1
 8001c64:	6213      	str	r3, [r2, #32]
 8001c66:	4b64      	ldr	r3, [pc, #400]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001c68:	6a1b      	ldr	r3, [r3, #32]
 8001c6a:	4a63      	ldr	r2, [pc, #396]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001c6c:	f023 0304 	bic.w	r3, r3, #4
 8001c70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d015      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c7a:	f7ff fb7f 	bl	800137c <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c80:	e00a      	b.n	8001c98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c82:	f7ff fb7b 	bl	800137c <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e0ab      	b.n	8001df0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c98:	4b57      	ldr	r3, [pc, #348]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d0ee      	beq.n	8001c82 <HAL_RCC_OscConfig+0x37e>
 8001ca4:	e014      	b.n	8001cd0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca6:	f7ff fb69 	bl	800137c <HAL_GetTick>
 8001caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cac:	e00a      	b.n	8001cc4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cae:	f7ff fb65 	bl	800137c <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e095      	b.n	8001df0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cc4:	4b4c      	ldr	r3, [pc, #304]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001cc6:	6a1b      	ldr	r3, [r3, #32]
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d1ee      	bne.n	8001cae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001cd0:	7dfb      	ldrb	r3, [r7, #23]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d105      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cd6:	4b48      	ldr	r3, [pc, #288]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	4a47      	ldr	r2, [pc, #284]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001cdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ce0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f000 8081 	beq.w	8001dee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cec:	4b42      	ldr	r3, [pc, #264]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f003 030c 	and.w	r3, r3, #12
 8001cf4:	2b08      	cmp	r3, #8
 8001cf6:	d061      	beq.n	8001dbc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	69db      	ldr	r3, [r3, #28]
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d146      	bne.n	8001d8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d00:	4b3f      	ldr	r3, [pc, #252]	; (8001e00 <HAL_RCC_OscConfig+0x4fc>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d06:	f7ff fb39 	bl	800137c <HAL_GetTick>
 8001d0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d0e:	f7ff fb35 	bl	800137c <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e067      	b.n	8001df0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d20:	4b35      	ldr	r3, [pc, #212]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1f0      	bne.n	8001d0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d34:	d108      	bne.n	8001d48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d36:	4b30      	ldr	r3, [pc, #192]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	492d      	ldr	r1, [pc, #180]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d48:	4b2b      	ldr	r3, [pc, #172]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a19      	ldr	r1, [r3, #32]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d58:	430b      	orrs	r3, r1
 8001d5a:	4927      	ldr	r1, [pc, #156]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d60:	4b27      	ldr	r3, [pc, #156]	; (8001e00 <HAL_RCC_OscConfig+0x4fc>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d66:	f7ff fb09 	bl	800137c <HAL_GetTick>
 8001d6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d6e:	f7ff fb05 	bl	800137c <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e037      	b.n	8001df0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d80:	4b1d      	ldr	r3, [pc, #116]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0f0      	beq.n	8001d6e <HAL_RCC_OscConfig+0x46a>
 8001d8c:	e02f      	b.n	8001dee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d8e:	4b1c      	ldr	r3, [pc, #112]	; (8001e00 <HAL_RCC_OscConfig+0x4fc>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d94:	f7ff faf2 	bl	800137c <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d9c:	f7ff faee 	bl	800137c <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e020      	b.n	8001df0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dae:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1f0      	bne.n	8001d9c <HAL_RCC_OscConfig+0x498>
 8001dba:	e018      	b.n	8001dee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	69db      	ldr	r3, [r3, #28]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d101      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e013      	b.n	8001df0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001dc8:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <HAL_RCC_OscConfig+0x4f4>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a1b      	ldr	r3, [r3, #32]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d106      	bne.n	8001dea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d001      	beq.n	8001dee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e000      	b.n	8001df0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3718      	adds	r7, #24
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	40007000 	.word	0x40007000
 8001e00:	42420060 	.word	0x42420060

08001e04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e0d0      	b.n	8001fba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e18:	4b6a      	ldr	r3, [pc, #424]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0307 	and.w	r3, r3, #7
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d910      	bls.n	8001e48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e26:	4b67      	ldr	r3, [pc, #412]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f023 0207 	bic.w	r2, r3, #7
 8001e2e:	4965      	ldr	r1, [pc, #404]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e36:	4b63      	ldr	r3, [pc, #396]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d001      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e0b8      	b.n	8001fba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d020      	beq.n	8001e96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d005      	beq.n	8001e6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e60:	4b59      	ldr	r3, [pc, #356]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	4a58      	ldr	r2, [pc, #352]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0308 	and.w	r3, r3, #8
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d005      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e78:	4b53      	ldr	r3, [pc, #332]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	4a52      	ldr	r2, [pc, #328]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e84:	4b50      	ldr	r3, [pc, #320]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	494d      	ldr	r1, [pc, #308]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d040      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d107      	bne.n	8001eba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eaa:	4b47      	ldr	r3, [pc, #284]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d115      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e07f      	b.n	8001fba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d107      	bne.n	8001ed2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ec2:	4b41      	ldr	r3, [pc, #260]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d109      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e073      	b.n	8001fba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed2:	4b3d      	ldr	r3, [pc, #244]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e06b      	b.n	8001fba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ee2:	4b39      	ldr	r3, [pc, #228]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f023 0203 	bic.w	r2, r3, #3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	4936      	ldr	r1, [pc, #216]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ef4:	f7ff fa42 	bl	800137c <HAL_GetTick>
 8001ef8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efa:	e00a      	b.n	8001f12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001efc:	f7ff fa3e 	bl	800137c <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e053      	b.n	8001fba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f12:	4b2d      	ldr	r3, [pc, #180]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f003 020c 	and.w	r2, r3, #12
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d1eb      	bne.n	8001efc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f24:	4b27      	ldr	r3, [pc, #156]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d210      	bcs.n	8001f54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f32:	4b24      	ldr	r3, [pc, #144]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f023 0207 	bic.w	r2, r3, #7
 8001f3a:	4922      	ldr	r1, [pc, #136]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f42:	4b20      	ldr	r3, [pc, #128]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d001      	beq.n	8001f54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e032      	b.n	8001fba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0304 	and.w	r3, r3, #4
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d008      	beq.n	8001f72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f60:	4b19      	ldr	r3, [pc, #100]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	4916      	ldr	r1, [pc, #88]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0308 	and.w	r3, r3, #8
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d009      	beq.n	8001f92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f7e:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	490e      	ldr	r1, [pc, #56]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f92:	f000 f821 	bl	8001fd8 <HAL_RCC_GetSysClockFreq>
 8001f96:	4602      	mov	r2, r0
 8001f98:	4b0b      	ldr	r3, [pc, #44]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	091b      	lsrs	r3, r3, #4
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	490a      	ldr	r1, [pc, #40]	; (8001fcc <HAL_RCC_ClockConfig+0x1c8>)
 8001fa4:	5ccb      	ldrb	r3, [r1, r3]
 8001fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8001faa:	4a09      	ldr	r2, [pc, #36]	; (8001fd0 <HAL_RCC_ClockConfig+0x1cc>)
 8001fac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fae:	4b09      	ldr	r3, [pc, #36]	; (8001fd4 <HAL_RCC_ClockConfig+0x1d0>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff f9a0 	bl	80012f8 <HAL_InitTick>

  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40022000 	.word	0x40022000
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	080028e4 	.word	0x080028e4
 8001fd0:	20000050 	.word	0x20000050
 8001fd4:	20000054 	.word	0x20000054

08001fd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b087      	sub	sp, #28
 8001fdc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60bb      	str	r3, [r7, #8]
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	617b      	str	r3, [r7, #20]
 8001fea:	2300      	movs	r3, #0
 8001fec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ff2:	4b1e      	ldr	r3, [pc, #120]	; (800206c <HAL_RCC_GetSysClockFreq+0x94>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f003 030c 	and.w	r3, r3, #12
 8001ffe:	2b04      	cmp	r3, #4
 8002000:	d002      	beq.n	8002008 <HAL_RCC_GetSysClockFreq+0x30>
 8002002:	2b08      	cmp	r3, #8
 8002004:	d003      	beq.n	800200e <HAL_RCC_GetSysClockFreq+0x36>
 8002006:	e027      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002008:	4b19      	ldr	r3, [pc, #100]	; (8002070 <HAL_RCC_GetSysClockFreq+0x98>)
 800200a:	613b      	str	r3, [r7, #16]
      break;
 800200c:	e027      	b.n	800205e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	0c9b      	lsrs	r3, r3, #18
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	4a17      	ldr	r2, [pc, #92]	; (8002074 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002018:	5cd3      	ldrb	r3, [r2, r3]
 800201a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d010      	beq.n	8002048 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002026:	4b11      	ldr	r3, [pc, #68]	; (800206c <HAL_RCC_GetSysClockFreq+0x94>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	0c5b      	lsrs	r3, r3, #17
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	4a11      	ldr	r2, [pc, #68]	; (8002078 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002032:	5cd3      	ldrb	r3, [r2, r3]
 8002034:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a0d      	ldr	r2, [pc, #52]	; (8002070 <HAL_RCC_GetSysClockFreq+0x98>)
 800203a:	fb02 f203 	mul.w	r2, r2, r3
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	fbb2 f3f3 	udiv	r3, r2, r3
 8002044:	617b      	str	r3, [r7, #20]
 8002046:	e004      	b.n	8002052 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a0c      	ldr	r2, [pc, #48]	; (800207c <HAL_RCC_GetSysClockFreq+0xa4>)
 800204c:	fb02 f303 	mul.w	r3, r2, r3
 8002050:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	613b      	str	r3, [r7, #16]
      break;
 8002056:	e002      	b.n	800205e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002058:	4b05      	ldr	r3, [pc, #20]	; (8002070 <HAL_RCC_GetSysClockFreq+0x98>)
 800205a:	613b      	str	r3, [r7, #16]
      break;
 800205c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800205e:	693b      	ldr	r3, [r7, #16]
}
 8002060:	4618      	mov	r0, r3
 8002062:	371c      	adds	r7, #28
 8002064:	46bd      	mov	sp, r7
 8002066:	bc80      	pop	{r7}
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	40021000 	.word	0x40021000
 8002070:	007a1200 	.word	0x007a1200
 8002074:	080028f4 	.word	0x080028f4
 8002078:	08002904 	.word	0x08002904
 800207c:	003d0900 	.word	0x003d0900

08002080 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002088:	4b0a      	ldr	r3, [pc, #40]	; (80020b4 <RCC_Delay+0x34>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a0a      	ldr	r2, [pc, #40]	; (80020b8 <RCC_Delay+0x38>)
 800208e:	fba2 2303 	umull	r2, r3, r2, r3
 8002092:	0a5b      	lsrs	r3, r3, #9
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	fb02 f303 	mul.w	r3, r2, r3
 800209a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800209c:	bf00      	nop
  }
  while (Delay --);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	1e5a      	subs	r2, r3, #1
 80020a2:	60fa      	str	r2, [r7, #12]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1f9      	bne.n	800209c <RCC_Delay+0x1c>
}
 80020a8:	bf00      	nop
 80020aa:	bf00      	nop
 80020ac:	3714      	adds	r7, #20
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr
 80020b4:	20000050 	.word	0x20000050
 80020b8:	10624dd3 	.word	0x10624dd3

080020bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e041      	b.n	8002152 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d106      	bne.n	80020e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7ff f870 	bl	80011c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2202      	movs	r2, #2
 80020ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3304      	adds	r3, #4
 80020f8:	4619      	mov	r1, r3
 80020fa:	4610      	mov	r0, r2
 80020fc:	f000 fa56 	bl	80025ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
	...

0800215c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800216a:	b2db      	uxtb	r3, r3
 800216c:	2b01      	cmp	r3, #1
 800216e:	d001      	beq.n	8002174 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e035      	b.n	80021e0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2202      	movs	r2, #2
 8002178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68da      	ldr	r2, [r3, #12]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f042 0201 	orr.w	r2, r2, #1
 800218a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a16      	ldr	r2, [pc, #88]	; (80021ec <HAL_TIM_Base_Start_IT+0x90>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d009      	beq.n	80021aa <HAL_TIM_Base_Start_IT+0x4e>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800219e:	d004      	beq.n	80021aa <HAL_TIM_Base_Start_IT+0x4e>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a12      	ldr	r2, [pc, #72]	; (80021f0 <HAL_TIM_Base_Start_IT+0x94>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d111      	bne.n	80021ce <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 0307 	and.w	r3, r3, #7
 80021b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2b06      	cmp	r3, #6
 80021ba:	d010      	beq.n	80021de <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f042 0201 	orr.w	r2, r2, #1
 80021ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021cc:	e007      	b.n	80021de <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f042 0201 	orr.w	r2, r2, #1
 80021dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	40012c00 	.word	0x40012c00
 80021f0:	40000400 	.word	0x40000400

080021f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d020      	beq.n	8002258 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d01b      	beq.n	8002258 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f06f 0202 	mvn.w	r2, #2
 8002228:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2201      	movs	r2, #1
 800222e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f998 	bl	8002574 <HAL_TIM_IC_CaptureCallback>
 8002244:	e005      	b.n	8002252 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 f98b 	bl	8002562 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 f99a 	bl	8002586 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	f003 0304 	and.w	r3, r3, #4
 800225e:	2b00      	cmp	r3, #0
 8002260:	d020      	beq.n	80022a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	2b00      	cmp	r3, #0
 800226a:	d01b      	beq.n	80022a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f06f 0204 	mvn.w	r2, #4
 8002274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2202      	movs	r2, #2
 800227a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 f972 	bl	8002574 <HAL_TIM_IC_CaptureCallback>
 8002290:	e005      	b.n	800229e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 f965 	bl	8002562 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f000 f974 	bl	8002586 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d020      	beq.n	80022f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f003 0308 	and.w	r3, r3, #8
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d01b      	beq.n	80022f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f06f 0208 	mvn.w	r2, #8
 80022c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2204      	movs	r2, #4
 80022c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	f003 0303 	and.w	r3, r3, #3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 f94c 	bl	8002574 <HAL_TIM_IC_CaptureCallback>
 80022dc:	e005      	b.n	80022ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 f93f 	bl	8002562 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f000 f94e 	bl	8002586 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	f003 0310 	and.w	r3, r3, #16
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d020      	beq.n	800233c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f003 0310 	and.w	r3, r3, #16
 8002300:	2b00      	cmp	r3, #0
 8002302:	d01b      	beq.n	800233c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f06f 0210 	mvn.w	r2, #16
 800230c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2208      	movs	r2, #8
 8002312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f926 	bl	8002574 <HAL_TIM_IC_CaptureCallback>
 8002328:	e005      	b.n	8002336 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 f919 	bl	8002562 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f000 f928 	bl	8002586 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00c      	beq.n	8002360 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b00      	cmp	r3, #0
 800234e:	d007      	beq.n	8002360 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f06f 0201 	mvn.w	r2, #1
 8002358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7fe feec 	bl	8001138 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00c      	beq.n	8002384 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002370:	2b00      	cmp	r3, #0
 8002372:	d007      	beq.n	8002384 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800237c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 fa6f 	bl	8002862 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00c      	beq.n	80023a8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002394:	2b00      	cmp	r3, #0
 8002396:	d007      	beq.n	80023a8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 f8f8 	bl	8002598 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	f003 0320 	and.w	r3, r3, #32
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00c      	beq.n	80023cc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f003 0320 	and.w	r3, r3, #32
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d007      	beq.n	80023cc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f06f 0220 	mvn.w	r2, #32
 80023c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 fa42 	bl	8002850 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023cc:	bf00      	nop
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023de:	2300      	movs	r3, #0
 80023e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d101      	bne.n	80023f0 <HAL_TIM_ConfigClockSource+0x1c>
 80023ec:	2302      	movs	r3, #2
 80023ee:	e0b4      	b.n	800255a <HAL_TIM_ConfigClockSource+0x186>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2202      	movs	r2, #2
 80023fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800240e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002416:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68ba      	ldr	r2, [r7, #8]
 800241e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002428:	d03e      	beq.n	80024a8 <HAL_TIM_ConfigClockSource+0xd4>
 800242a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800242e:	f200 8087 	bhi.w	8002540 <HAL_TIM_ConfigClockSource+0x16c>
 8002432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002436:	f000 8086 	beq.w	8002546 <HAL_TIM_ConfigClockSource+0x172>
 800243a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800243e:	d87f      	bhi.n	8002540 <HAL_TIM_ConfigClockSource+0x16c>
 8002440:	2b70      	cmp	r3, #112	; 0x70
 8002442:	d01a      	beq.n	800247a <HAL_TIM_ConfigClockSource+0xa6>
 8002444:	2b70      	cmp	r3, #112	; 0x70
 8002446:	d87b      	bhi.n	8002540 <HAL_TIM_ConfigClockSource+0x16c>
 8002448:	2b60      	cmp	r3, #96	; 0x60
 800244a:	d050      	beq.n	80024ee <HAL_TIM_ConfigClockSource+0x11a>
 800244c:	2b60      	cmp	r3, #96	; 0x60
 800244e:	d877      	bhi.n	8002540 <HAL_TIM_ConfigClockSource+0x16c>
 8002450:	2b50      	cmp	r3, #80	; 0x50
 8002452:	d03c      	beq.n	80024ce <HAL_TIM_ConfigClockSource+0xfa>
 8002454:	2b50      	cmp	r3, #80	; 0x50
 8002456:	d873      	bhi.n	8002540 <HAL_TIM_ConfigClockSource+0x16c>
 8002458:	2b40      	cmp	r3, #64	; 0x40
 800245a:	d058      	beq.n	800250e <HAL_TIM_ConfigClockSource+0x13a>
 800245c:	2b40      	cmp	r3, #64	; 0x40
 800245e:	d86f      	bhi.n	8002540 <HAL_TIM_ConfigClockSource+0x16c>
 8002460:	2b30      	cmp	r3, #48	; 0x30
 8002462:	d064      	beq.n	800252e <HAL_TIM_ConfigClockSource+0x15a>
 8002464:	2b30      	cmp	r3, #48	; 0x30
 8002466:	d86b      	bhi.n	8002540 <HAL_TIM_ConfigClockSource+0x16c>
 8002468:	2b20      	cmp	r3, #32
 800246a:	d060      	beq.n	800252e <HAL_TIM_ConfigClockSource+0x15a>
 800246c:	2b20      	cmp	r3, #32
 800246e:	d867      	bhi.n	8002540 <HAL_TIM_ConfigClockSource+0x16c>
 8002470:	2b00      	cmp	r3, #0
 8002472:	d05c      	beq.n	800252e <HAL_TIM_ConfigClockSource+0x15a>
 8002474:	2b10      	cmp	r3, #16
 8002476:	d05a      	beq.n	800252e <HAL_TIM_ConfigClockSource+0x15a>
 8002478:	e062      	b.n	8002540 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6818      	ldr	r0, [r3, #0]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	6899      	ldr	r1, [r3, #8]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	f000 f96a 	bl	8002762 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800249c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	609a      	str	r2, [r3, #8]
      break;
 80024a6:	e04f      	b.n	8002548 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6818      	ldr	r0, [r3, #0]
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	6899      	ldr	r1, [r3, #8]
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	f000 f953 	bl	8002762 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024ca:	609a      	str	r2, [r3, #8]
      break;
 80024cc:	e03c      	b.n	8002548 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6818      	ldr	r0, [r3, #0]
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	6859      	ldr	r1, [r3, #4]
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	461a      	mov	r2, r3
 80024dc:	f000 f8ca 	bl	8002674 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2150      	movs	r1, #80	; 0x50
 80024e6:	4618      	mov	r0, r3
 80024e8:	f000 f921 	bl	800272e <TIM_ITRx_SetConfig>
      break;
 80024ec:	e02c      	b.n	8002548 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6818      	ldr	r0, [r3, #0]
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	6859      	ldr	r1, [r3, #4]
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	461a      	mov	r2, r3
 80024fc:	f000 f8e8 	bl	80026d0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2160      	movs	r1, #96	; 0x60
 8002506:	4618      	mov	r0, r3
 8002508:	f000 f911 	bl	800272e <TIM_ITRx_SetConfig>
      break;
 800250c:	e01c      	b.n	8002548 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6818      	ldr	r0, [r3, #0]
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	6859      	ldr	r1, [r3, #4]
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	461a      	mov	r2, r3
 800251c:	f000 f8aa 	bl	8002674 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2140      	movs	r1, #64	; 0x40
 8002526:	4618      	mov	r0, r3
 8002528:	f000 f901 	bl	800272e <TIM_ITRx_SetConfig>
      break;
 800252c:	e00c      	b.n	8002548 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4619      	mov	r1, r3
 8002538:	4610      	mov	r0, r2
 800253a:	f000 f8f8 	bl	800272e <TIM_ITRx_SetConfig>
      break;
 800253e:	e003      	b.n	8002548 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	73fb      	strb	r3, [r7, #15]
      break;
 8002544:	e000      	b.n	8002548 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002546:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002558:	7bfb      	ldrb	r3, [r7, #15]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002562:	b480      	push	{r7}
 8002564:	b083      	sub	sp, #12
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800256a:	bf00      	nop
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	bc80      	pop	{r7}
 8002572:	4770      	bx	lr

08002574 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	bc80      	pop	{r7}
 8002584:	4770      	bx	lr

08002586 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002586:	b480      	push	{r7}
 8002588:	b083      	sub	sp, #12
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr

08002598 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bc80      	pop	{r7}
 80025a8:	4770      	bx	lr
	...

080025ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a2b      	ldr	r2, [pc, #172]	; (800266c <TIM_Base_SetConfig+0xc0>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d007      	beq.n	80025d4 <TIM_Base_SetConfig+0x28>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ca:	d003      	beq.n	80025d4 <TIM_Base_SetConfig+0x28>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a28      	ldr	r2, [pc, #160]	; (8002670 <TIM_Base_SetConfig+0xc4>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d108      	bne.n	80025e6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a20      	ldr	r2, [pc, #128]	; (800266c <TIM_Base_SetConfig+0xc0>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d007      	beq.n	80025fe <TIM_Base_SetConfig+0x52>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025f4:	d003      	beq.n	80025fe <TIM_Base_SetConfig+0x52>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a1d      	ldr	r2, [pc, #116]	; (8002670 <TIM_Base_SetConfig+0xc4>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d108      	bne.n	8002610 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002604:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	4313      	orrs	r3, r2
 800260e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	4313      	orrs	r3, r2
 800261c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a0d      	ldr	r2, [pc, #52]	; (800266c <TIM_Base_SetConfig+0xc0>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d103      	bne.n	8002644 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	691a      	ldr	r2, [r3, #16]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b00      	cmp	r3, #0
 8002654:	d005      	beq.n	8002662 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	f023 0201 	bic.w	r2, r3, #1
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	611a      	str	r2, [r3, #16]
  }
}
 8002662:	bf00      	nop
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	bc80      	pop	{r7}
 800266a:	4770      	bx	lr
 800266c:	40012c00 	.word	0x40012c00
 8002670:	40000400 	.word	0x40000400

08002674 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002674:	b480      	push	{r7}
 8002676:	b087      	sub	sp, #28
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6a1b      	ldr	r3, [r3, #32]
 8002684:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	f023 0201 	bic.w	r2, r3, #1
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800269e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	011b      	lsls	r3, r3, #4
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	f023 030a 	bic.w	r3, r3, #10
 80026b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	621a      	str	r2, [r3, #32]
}
 80026c6:	bf00      	nop
 80026c8:	371c      	adds	r7, #28
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bc80      	pop	{r7}
 80026ce:	4770      	bx	lr

080026d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b087      	sub	sp, #28
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	f023 0210 	bic.w	r2, r3, #16
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80026fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	031b      	lsls	r3, r3, #12
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	4313      	orrs	r3, r2
 8002704:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800270c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	011b      	lsls	r3, r3, #4
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	4313      	orrs	r3, r2
 8002716:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	621a      	str	r2, [r3, #32]
}
 8002724:	bf00      	nop
 8002726:	371c      	adds	r7, #28
 8002728:	46bd      	mov	sp, r7
 800272a:	bc80      	pop	{r7}
 800272c:	4770      	bx	lr

0800272e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800272e:	b480      	push	{r7}
 8002730:	b085      	sub	sp, #20
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
 8002736:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002744:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	4313      	orrs	r3, r2
 800274c:	f043 0307 	orr.w	r3, r3, #7
 8002750:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	609a      	str	r2, [r3, #8]
}
 8002758:	bf00      	nop
 800275a:	3714      	adds	r7, #20
 800275c:	46bd      	mov	sp, r7
 800275e:	bc80      	pop	{r7}
 8002760:	4770      	bx	lr

08002762 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002762:	b480      	push	{r7}
 8002764:	b087      	sub	sp, #28
 8002766:	af00      	add	r7, sp, #0
 8002768:	60f8      	str	r0, [r7, #12]
 800276a:	60b9      	str	r1, [r7, #8]
 800276c:	607a      	str	r2, [r7, #4]
 800276e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800277c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	021a      	lsls	r2, r3, #8
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	431a      	orrs	r2, r3
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	4313      	orrs	r3, r2
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	4313      	orrs	r3, r2
 800278e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	697a      	ldr	r2, [r7, #20]
 8002794:	609a      	str	r2, [r3, #8]
}
 8002796:	bf00      	nop
 8002798:	371c      	adds	r7, #28
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr

080027a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d101      	bne.n	80027b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027b4:	2302      	movs	r3, #2
 80027b6:	e041      	b.n	800283c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2202      	movs	r2, #2
 80027c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a14      	ldr	r2, [pc, #80]	; (8002848 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d009      	beq.n	8002810 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002804:	d004      	beq.n	8002810 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a10      	ldr	r2, [pc, #64]	; (800284c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d10c      	bne.n	800282a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002816:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	68ba      	ldr	r2, [r7, #8]
 800281e:	4313      	orrs	r3, r2
 8002820:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68ba      	ldr	r2, [r7, #8]
 8002828:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2201      	movs	r2, #1
 800282e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3714      	adds	r7, #20
 8002840:	46bd      	mov	sp, r7
 8002842:	bc80      	pop	{r7}
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	40012c00 	.word	0x40012c00
 800284c:	40000400 	.word	0x40000400

08002850 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr

08002862 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr

08002874 <__libc_init_array>:
 8002874:	b570      	push	{r4, r5, r6, lr}
 8002876:	2600      	movs	r6, #0
 8002878:	4d0c      	ldr	r5, [pc, #48]	; (80028ac <__libc_init_array+0x38>)
 800287a:	4c0d      	ldr	r4, [pc, #52]	; (80028b0 <__libc_init_array+0x3c>)
 800287c:	1b64      	subs	r4, r4, r5
 800287e:	10a4      	asrs	r4, r4, #2
 8002880:	42a6      	cmp	r6, r4
 8002882:	d109      	bne.n	8002898 <__libc_init_array+0x24>
 8002884:	f000 f822 	bl	80028cc <_init>
 8002888:	2600      	movs	r6, #0
 800288a:	4d0a      	ldr	r5, [pc, #40]	; (80028b4 <__libc_init_array+0x40>)
 800288c:	4c0a      	ldr	r4, [pc, #40]	; (80028b8 <__libc_init_array+0x44>)
 800288e:	1b64      	subs	r4, r4, r5
 8002890:	10a4      	asrs	r4, r4, #2
 8002892:	42a6      	cmp	r6, r4
 8002894:	d105      	bne.n	80028a2 <__libc_init_array+0x2e>
 8002896:	bd70      	pop	{r4, r5, r6, pc}
 8002898:	f855 3b04 	ldr.w	r3, [r5], #4
 800289c:	4798      	blx	r3
 800289e:	3601      	adds	r6, #1
 80028a0:	e7ee      	b.n	8002880 <__libc_init_array+0xc>
 80028a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80028a6:	4798      	blx	r3
 80028a8:	3601      	adds	r6, #1
 80028aa:	e7f2      	b.n	8002892 <__libc_init_array+0x1e>
 80028ac:	08002908 	.word	0x08002908
 80028b0:	08002908 	.word	0x08002908
 80028b4:	08002908 	.word	0x08002908
 80028b8:	0800290c 	.word	0x0800290c

080028bc <memset>:
 80028bc:	4603      	mov	r3, r0
 80028be:	4402      	add	r2, r0
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d100      	bne.n	80028c6 <memset+0xa>
 80028c4:	4770      	bx	lr
 80028c6:	f803 1b01 	strb.w	r1, [r3], #1
 80028ca:	e7f9      	b.n	80028c0 <memset+0x4>

080028cc <_init>:
 80028cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ce:	bf00      	nop
 80028d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028d2:	bc08      	pop	{r3}
 80028d4:	469e      	mov	lr, r3
 80028d6:	4770      	bx	lr

080028d8 <_fini>:
 80028d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028da:	bf00      	nop
 80028dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028de:	bc08      	pop	{r3}
 80028e0:	469e      	mov	lr, r3
 80028e2:	4770      	bx	lr
