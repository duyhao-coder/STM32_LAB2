
EX_1_LAB2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000294c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002a58  08002a58  00012a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a7c  08002a7c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08002a7c  08002a7c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a7c  08002a7c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a7c  08002a7c  00012a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a80  08002a80  00012a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002a84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000005c  08002ae0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08002ae0  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000089a8  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001586  00000000  00000000  00028a2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  00029fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000900  00000000  00000000  0002a960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016362  00000000  00000000  0002b260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000098a9  00000000  00000000  000415c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082435  00000000  00000000  0004ae6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cd2a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027e8  00000000  00000000  000cd2f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a40 	.word	0x08002a40

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08002a40 	.word	0x08002a40

0800014c <display7SEG>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void display7SEG(int num)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b09      	cmp	r3, #9
 8000158:	f200 8180 	bhi.w	800045c <display7SEG+0x310>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <display7SEG+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	0800018d 	.word	0x0800018d
 8000168:	080001d5 	.word	0x080001d5
 800016c:	0800021d 	.word	0x0800021d
 8000170:	08000265 	.word	0x08000265
 8000174:	080002ad 	.word	0x080002ad
 8000178:	080002f5 	.word	0x080002f5
 800017c:	0800033d 	.word	0x0800033d
 8000180:	08000385 	.word	0x08000385
 8000184:	080003cd 	.word	0x080003cd
 8000188:	08000415 	.word	0x08000415
	switch(num){
	case 0:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 800018c:	2200      	movs	r2, #0
 800018e:	2101      	movs	r1, #1
 8000190:	48b4      	ldr	r0, [pc, #720]	; (8000464 <display7SEG+0x318>)
 8000192:	f001 fc3f 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000196:	2200      	movs	r2, #0
 8000198:	2102      	movs	r1, #2
 800019a:	48b2      	ldr	r0, [pc, #712]	; (8000464 <display7SEG+0x318>)
 800019c:	f001 fc3a 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80001a0:	2200      	movs	r2, #0
 80001a2:	2104      	movs	r1, #4
 80001a4:	48af      	ldr	r0, [pc, #700]	; (8000464 <display7SEG+0x318>)
 80001a6:	f001 fc35 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 80001aa:	2200      	movs	r2, #0
 80001ac:	2108      	movs	r1, #8
 80001ae:	48ad      	ldr	r0, [pc, #692]	; (8000464 <display7SEG+0x318>)
 80001b0:	f001 fc30 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 80001b4:	2200      	movs	r2, #0
 80001b6:	2110      	movs	r1, #16
 80001b8:	48aa      	ldr	r0, [pc, #680]	; (8000464 <display7SEG+0x318>)
 80001ba:	f001 fc2b 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 80001be:	2200      	movs	r2, #0
 80001c0:	2120      	movs	r1, #32
 80001c2:	48a8      	ldr	r0, [pc, #672]	; (8000464 <display7SEG+0x318>)
 80001c4:	f001 fc26 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 80001c8:	2201      	movs	r2, #1
 80001ca:	2140      	movs	r1, #64	; 0x40
 80001cc:	48a5      	ldr	r0, [pc, #660]	; (8000464 <display7SEG+0x318>)
 80001ce:	f001 fc21 	bl	8001a14 <HAL_GPIO_WritePin>
		break;
 80001d2:	e143      	b.n	800045c <display7SEG+0x310>
	case 1:


		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_SET);
 80001d4:	2201      	movs	r2, #1
 80001d6:	2101      	movs	r1, #1
 80001d8:	48a2      	ldr	r0, [pc, #648]	; (8000464 <display7SEG+0x318>)
 80001da:	f001 fc1b 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 80001de:	2200      	movs	r2, #0
 80001e0:	2102      	movs	r1, #2
 80001e2:	48a0      	ldr	r0, [pc, #640]	; (8000464 <display7SEG+0x318>)
 80001e4:	f001 fc16 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80001e8:	2200      	movs	r2, #0
 80001ea:	2104      	movs	r1, #4
 80001ec:	489d      	ldr	r0, [pc, #628]	; (8000464 <display7SEG+0x318>)
 80001ee:	f001 fc11 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 80001f2:	2201      	movs	r2, #1
 80001f4:	2108      	movs	r1, #8
 80001f6:	489b      	ldr	r0, [pc, #620]	; (8000464 <display7SEG+0x318>)
 80001f8:	f001 fc0c 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 80001fc:	2201      	movs	r2, #1
 80001fe:	2110      	movs	r1, #16
 8000200:	4898      	ldr	r0, [pc, #608]	; (8000464 <display7SEG+0x318>)
 8000202:	f001 fc07 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 8000206:	2201      	movs	r2, #1
 8000208:	2120      	movs	r1, #32
 800020a:	4896      	ldr	r0, [pc, #600]	; (8000464 <display7SEG+0x318>)
 800020c:	f001 fc02 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 8000210:	2201      	movs	r2, #1
 8000212:	2140      	movs	r1, #64	; 0x40
 8000214:	4893      	ldr	r0, [pc, #588]	; (8000464 <display7SEG+0x318>)
 8000216:	f001 fbfd 	bl	8001a14 <HAL_GPIO_WritePin>
		break;
 800021a:	e11f      	b.n	800045c <display7SEG+0x310>

	case 2:

		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 800021c:	2200      	movs	r2, #0
 800021e:	2101      	movs	r1, #1
 8000220:	4890      	ldr	r0, [pc, #576]	; (8000464 <display7SEG+0x318>)
 8000222:	f001 fbf7 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000226:	2200      	movs	r2, #0
 8000228:	2102      	movs	r1, #2
 800022a:	488e      	ldr	r0, [pc, #568]	; (8000464 <display7SEG+0x318>)
 800022c:	f001 fbf2 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_SET);
 8000230:	2201      	movs	r2, #1
 8000232:	2104      	movs	r1, #4
 8000234:	488b      	ldr	r0, [pc, #556]	; (8000464 <display7SEG+0x318>)
 8000236:	f001 fbed 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 800023a:	2200      	movs	r2, #0
 800023c:	2108      	movs	r1, #8
 800023e:	4889      	ldr	r0, [pc, #548]	; (8000464 <display7SEG+0x318>)
 8000240:	f001 fbe8 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000244:	2200      	movs	r2, #0
 8000246:	2110      	movs	r1, #16
 8000248:	4886      	ldr	r0, [pc, #536]	; (8000464 <display7SEG+0x318>)
 800024a:	f001 fbe3 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 800024e:	2201      	movs	r2, #1
 8000250:	2120      	movs	r1, #32
 8000252:	4884      	ldr	r0, [pc, #528]	; (8000464 <display7SEG+0x318>)
 8000254:	f001 fbde 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000258:	2200      	movs	r2, #0
 800025a:	2140      	movs	r1, #64	; 0x40
 800025c:	4881      	ldr	r0, [pc, #516]	; (8000464 <display7SEG+0x318>)
 800025e:	f001 fbd9 	bl	8001a14 <HAL_GPIO_WritePin>
		break;
 8000262:	e0fb      	b.n	800045c <display7SEG+0x310>

	case 3:


		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000264:	2200      	movs	r2, #0
 8000266:	2101      	movs	r1, #1
 8000268:	487e      	ldr	r0, [pc, #504]	; (8000464 <display7SEG+0x318>)
 800026a:	f001 fbd3 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 800026e:	2200      	movs	r2, #0
 8000270:	2102      	movs	r1, #2
 8000272:	487c      	ldr	r0, [pc, #496]	; (8000464 <display7SEG+0x318>)
 8000274:	f001 fbce 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000278:	2200      	movs	r2, #0
 800027a:	2104      	movs	r1, #4
 800027c:	4879      	ldr	r0, [pc, #484]	; (8000464 <display7SEG+0x318>)
 800027e:	f001 fbc9 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000282:	2200      	movs	r2, #0
 8000284:	2108      	movs	r1, #8
 8000286:	4877      	ldr	r0, [pc, #476]	; (8000464 <display7SEG+0x318>)
 8000288:	f001 fbc4 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 800028c:	2201      	movs	r2, #1
 800028e:	2110      	movs	r1, #16
 8000290:	4874      	ldr	r0, [pc, #464]	; (8000464 <display7SEG+0x318>)
 8000292:	f001 fbbf 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 8000296:	2201      	movs	r2, #1
 8000298:	2120      	movs	r1, #32
 800029a:	4872      	ldr	r0, [pc, #456]	; (8000464 <display7SEG+0x318>)
 800029c:	f001 fbba 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 80002a0:	2200      	movs	r2, #0
 80002a2:	2140      	movs	r1, #64	; 0x40
 80002a4:	486f      	ldr	r0, [pc, #444]	; (8000464 <display7SEG+0x318>)
 80002a6:	f001 fbb5 	bl	8001a14 <HAL_GPIO_WritePin>
		break;
 80002aa:	e0d7      	b.n	800045c <display7SEG+0x310>

	case 4:

		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_SET);
 80002ac:	2201      	movs	r2, #1
 80002ae:	2101      	movs	r1, #1
 80002b0:	486c      	ldr	r0, [pc, #432]	; (8000464 <display7SEG+0x318>)
 80002b2:	f001 fbaf 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 80002b6:	2200      	movs	r2, #0
 80002b8:	2102      	movs	r1, #2
 80002ba:	486a      	ldr	r0, [pc, #424]	; (8000464 <display7SEG+0x318>)
 80002bc:	f001 fbaa 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80002c0:	2200      	movs	r2, #0
 80002c2:	2104      	movs	r1, #4
 80002c4:	4867      	ldr	r0, [pc, #412]	; (8000464 <display7SEG+0x318>)
 80002c6:	f001 fba5 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 80002ca:	2201      	movs	r2, #1
 80002cc:	2108      	movs	r1, #8
 80002ce:	4865      	ldr	r0, [pc, #404]	; (8000464 <display7SEG+0x318>)
 80002d0:	f001 fba0 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 80002d4:	2201      	movs	r2, #1
 80002d6:	2110      	movs	r1, #16
 80002d8:	4862      	ldr	r0, [pc, #392]	; (8000464 <display7SEG+0x318>)
 80002da:	f001 fb9b 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 80002de:	2200      	movs	r2, #0
 80002e0:	2120      	movs	r1, #32
 80002e2:	4860      	ldr	r0, [pc, #384]	; (8000464 <display7SEG+0x318>)
 80002e4:	f001 fb96 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 80002e8:	2200      	movs	r2, #0
 80002ea:	2140      	movs	r1, #64	; 0x40
 80002ec:	485d      	ldr	r0, [pc, #372]	; (8000464 <display7SEG+0x318>)
 80002ee:	f001 fb91 	bl	8001a14 <HAL_GPIO_WritePin>
		break;
 80002f2:	e0b3      	b.n	800045c <display7SEG+0x310>

	case 5:

		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 80002f4:	2200      	movs	r2, #0
 80002f6:	2101      	movs	r1, #1
 80002f8:	485a      	ldr	r0, [pc, #360]	; (8000464 <display7SEG+0x318>)
 80002fa:	f001 fb8b 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_SET);
 80002fe:	2201      	movs	r2, #1
 8000300:	2102      	movs	r1, #2
 8000302:	4858      	ldr	r0, [pc, #352]	; (8000464 <display7SEG+0x318>)
 8000304:	f001 fb86 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	2104      	movs	r1, #4
 800030c:	4855      	ldr	r0, [pc, #340]	; (8000464 <display7SEG+0x318>)
 800030e:	f001 fb81 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000312:	2200      	movs	r2, #0
 8000314:	2108      	movs	r1, #8
 8000316:	4853      	ldr	r0, [pc, #332]	; (8000464 <display7SEG+0x318>)
 8000318:	f001 fb7c 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 800031c:	2201      	movs	r2, #1
 800031e:	2110      	movs	r1, #16
 8000320:	4850      	ldr	r0, [pc, #320]	; (8000464 <display7SEG+0x318>)
 8000322:	f001 fb77 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000326:	2200      	movs	r2, #0
 8000328:	2120      	movs	r1, #32
 800032a:	484e      	ldr	r0, [pc, #312]	; (8000464 <display7SEG+0x318>)
 800032c:	f001 fb72 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000330:	2200      	movs	r2, #0
 8000332:	2140      	movs	r1, #64	; 0x40
 8000334:	484b      	ldr	r0, [pc, #300]	; (8000464 <display7SEG+0x318>)
 8000336:	f001 fb6d 	bl	8001a14 <HAL_GPIO_WritePin>
		break;
 800033a:	e08f      	b.n	800045c <display7SEG+0x310>

	case 6:

		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 800033c:	2200      	movs	r2, #0
 800033e:	2101      	movs	r1, #1
 8000340:	4848      	ldr	r0, [pc, #288]	; (8000464 <display7SEG+0x318>)
 8000342:	f001 fb67 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_SET);
 8000346:	2201      	movs	r2, #1
 8000348:	2102      	movs	r1, #2
 800034a:	4846      	ldr	r0, [pc, #280]	; (8000464 <display7SEG+0x318>)
 800034c:	f001 fb62 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000350:	2200      	movs	r2, #0
 8000352:	2104      	movs	r1, #4
 8000354:	4843      	ldr	r0, [pc, #268]	; (8000464 <display7SEG+0x318>)
 8000356:	f001 fb5d 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 800035a:	2200      	movs	r2, #0
 800035c:	2108      	movs	r1, #8
 800035e:	4841      	ldr	r0, [pc, #260]	; (8000464 <display7SEG+0x318>)
 8000360:	f001 fb58 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000364:	2200      	movs	r2, #0
 8000366:	2110      	movs	r1, #16
 8000368:	483e      	ldr	r0, [pc, #248]	; (8000464 <display7SEG+0x318>)
 800036a:	f001 fb53 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 800036e:	2200      	movs	r2, #0
 8000370:	2120      	movs	r1, #32
 8000372:	483c      	ldr	r0, [pc, #240]	; (8000464 <display7SEG+0x318>)
 8000374:	f001 fb4e 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	2140      	movs	r1, #64	; 0x40
 800037c:	4839      	ldr	r0, [pc, #228]	; (8000464 <display7SEG+0x318>)
 800037e:	f001 fb49 	bl	8001a14 <HAL_GPIO_WritePin>
		break;
 8000382:	e06b      	b.n	800045c <display7SEG+0x310>

	case 7:


		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	2101      	movs	r1, #1
 8000388:	4836      	ldr	r0, [pc, #216]	; (8000464 <display7SEG+0x318>)
 800038a:	f001 fb43 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 800038e:	2200      	movs	r2, #0
 8000390:	2102      	movs	r1, #2
 8000392:	4834      	ldr	r0, [pc, #208]	; (8000464 <display7SEG+0x318>)
 8000394:	f001 fb3e 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000398:	2200      	movs	r2, #0
 800039a:	2104      	movs	r1, #4
 800039c:	4831      	ldr	r0, [pc, #196]	; (8000464 <display7SEG+0x318>)
 800039e:	f001 fb39 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 80003a2:	2201      	movs	r2, #1
 80003a4:	2108      	movs	r1, #8
 80003a6:	482f      	ldr	r0, [pc, #188]	; (8000464 <display7SEG+0x318>)
 80003a8:	f001 fb34 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 80003ac:	2201      	movs	r2, #1
 80003ae:	2110      	movs	r1, #16
 80003b0:	482c      	ldr	r0, [pc, #176]	; (8000464 <display7SEG+0x318>)
 80003b2:	f001 fb2f 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 80003b6:	2201      	movs	r2, #1
 80003b8:	2120      	movs	r1, #32
 80003ba:	482a      	ldr	r0, [pc, #168]	; (8000464 <display7SEG+0x318>)
 80003bc:	f001 fb2a 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 80003c0:	2201      	movs	r2, #1
 80003c2:	2140      	movs	r1, #64	; 0x40
 80003c4:	4827      	ldr	r0, [pc, #156]	; (8000464 <display7SEG+0x318>)
 80003c6:	f001 fb25 	bl	8001a14 <HAL_GPIO_WritePin>
		break;
 80003ca:	e047      	b.n	800045c <display7SEG+0x310>

	case 8:

		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	2101      	movs	r1, #1
 80003d0:	4824      	ldr	r0, [pc, #144]	; (8000464 <display7SEG+0x318>)
 80003d2:	f001 fb1f 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 80003d6:	2200      	movs	r2, #0
 80003d8:	2102      	movs	r1, #2
 80003da:	4822      	ldr	r0, [pc, #136]	; (8000464 <display7SEG+0x318>)
 80003dc:	f001 fb1a 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2104      	movs	r1, #4
 80003e4:	481f      	ldr	r0, [pc, #124]	; (8000464 <display7SEG+0x318>)
 80003e6:	f001 fb15 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 80003ea:	2200      	movs	r2, #0
 80003ec:	2108      	movs	r1, #8
 80003ee:	481d      	ldr	r0, [pc, #116]	; (8000464 <display7SEG+0x318>)
 80003f0:	f001 fb10 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 80003f4:	2200      	movs	r2, #0
 80003f6:	2110      	movs	r1, #16
 80003f8:	481a      	ldr	r0, [pc, #104]	; (8000464 <display7SEG+0x318>)
 80003fa:	f001 fb0b 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 80003fe:	2200      	movs	r2, #0
 8000400:	2120      	movs	r1, #32
 8000402:	4818      	ldr	r0, [pc, #96]	; (8000464 <display7SEG+0x318>)
 8000404:	f001 fb06 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000408:	2200      	movs	r2, #0
 800040a:	2140      	movs	r1, #64	; 0x40
 800040c:	4815      	ldr	r0, [pc, #84]	; (8000464 <display7SEG+0x318>)
 800040e:	f001 fb01 	bl	8001a14 <HAL_GPIO_WritePin>
		break;
 8000412:	e023      	b.n	800045c <display7SEG+0x310>

	case 9:

		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000414:	2200      	movs	r2, #0
 8000416:	2101      	movs	r1, #1
 8000418:	4812      	ldr	r0, [pc, #72]	; (8000464 <display7SEG+0x318>)
 800041a:	f001 fafb 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 800041e:	2200      	movs	r2, #0
 8000420:	2102      	movs	r1, #2
 8000422:	4810      	ldr	r0, [pc, #64]	; (8000464 <display7SEG+0x318>)
 8000424:	f001 faf6 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000428:	2200      	movs	r2, #0
 800042a:	2104      	movs	r1, #4
 800042c:	480d      	ldr	r0, [pc, #52]	; (8000464 <display7SEG+0x318>)
 800042e:	f001 faf1 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000432:	2200      	movs	r2, #0
 8000434:	2108      	movs	r1, #8
 8000436:	480b      	ldr	r0, [pc, #44]	; (8000464 <display7SEG+0x318>)
 8000438:	f001 faec 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 800043c:	2201      	movs	r2, #1
 800043e:	2110      	movs	r1, #16
 8000440:	4808      	ldr	r0, [pc, #32]	; (8000464 <display7SEG+0x318>)
 8000442:	f001 fae7 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000446:	2200      	movs	r2, #0
 8000448:	2120      	movs	r1, #32
 800044a:	4806      	ldr	r0, [pc, #24]	; (8000464 <display7SEG+0x318>)
 800044c:	f001 fae2 	bl	8001a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000450:	2200      	movs	r2, #0
 8000452:	2140      	movs	r1, #64	; 0x40
 8000454:	4803      	ldr	r0, [pc, #12]	; (8000464 <display7SEG+0x318>)
 8000456:	f001 fadd 	bl	8001a14 <HAL_GPIO_WritePin>
		break;
 800045a:	bf00      	nop

	}
}
 800045c:	bf00      	nop
 800045e:	3708      	adds	r7, #8
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	40010c00 	.word	0x40010c00

08000468 <updateMatrix_buffer>:
uint16_t ENM_Pin[8] = {
    ENM0_Pin, ENM1_Pin, ENM2_Pin,
    ENM3_Pin, ENM4_Pin, ENM5_Pin,
    ENM6_Pin, ENM7_Pin
};
void updateMatrix_buffer(){
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
	matrix_buffer[0] = (matrix_buffer[0] >> 1) | (matrix_buffer[0] << 7);
 800046c:	4b39      	ldr	r3, [pc, #228]	; (8000554 <updateMatrix_buffer+0xec>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	085b      	lsrs	r3, r3, #1
 8000472:	b2db      	uxtb	r3, r3
 8000474:	b25a      	sxtb	r2, r3
 8000476:	4b37      	ldr	r3, [pc, #220]	; (8000554 <updateMatrix_buffer+0xec>)
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	01db      	lsls	r3, r3, #7
 800047c:	b25b      	sxtb	r3, r3
 800047e:	4313      	orrs	r3, r2
 8000480:	b25b      	sxtb	r3, r3
 8000482:	b2da      	uxtb	r2, r3
 8000484:	4b33      	ldr	r3, [pc, #204]	; (8000554 <updateMatrix_buffer+0xec>)
 8000486:	701a      	strb	r2, [r3, #0]
	matrix_buffer[1] = (matrix_buffer[1] >> 1) | (matrix_buffer[1] << 7);
 8000488:	4b32      	ldr	r3, [pc, #200]	; (8000554 <updateMatrix_buffer+0xec>)
 800048a:	785b      	ldrb	r3, [r3, #1]
 800048c:	085b      	lsrs	r3, r3, #1
 800048e:	b2db      	uxtb	r3, r3
 8000490:	b25a      	sxtb	r2, r3
 8000492:	4b30      	ldr	r3, [pc, #192]	; (8000554 <updateMatrix_buffer+0xec>)
 8000494:	785b      	ldrb	r3, [r3, #1]
 8000496:	01db      	lsls	r3, r3, #7
 8000498:	b25b      	sxtb	r3, r3
 800049a:	4313      	orrs	r3, r2
 800049c:	b25b      	sxtb	r3, r3
 800049e:	b2da      	uxtb	r2, r3
 80004a0:	4b2c      	ldr	r3, [pc, #176]	; (8000554 <updateMatrix_buffer+0xec>)
 80004a2:	705a      	strb	r2, [r3, #1]
	matrix_buffer[2] = (matrix_buffer[2] >> 1) | (matrix_buffer[2] << 7);
 80004a4:	4b2b      	ldr	r3, [pc, #172]	; (8000554 <updateMatrix_buffer+0xec>)
 80004a6:	789b      	ldrb	r3, [r3, #2]
 80004a8:	085b      	lsrs	r3, r3, #1
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	b25a      	sxtb	r2, r3
 80004ae:	4b29      	ldr	r3, [pc, #164]	; (8000554 <updateMatrix_buffer+0xec>)
 80004b0:	789b      	ldrb	r3, [r3, #2]
 80004b2:	01db      	lsls	r3, r3, #7
 80004b4:	b25b      	sxtb	r3, r3
 80004b6:	4313      	orrs	r3, r2
 80004b8:	b25b      	sxtb	r3, r3
 80004ba:	b2da      	uxtb	r2, r3
 80004bc:	4b25      	ldr	r3, [pc, #148]	; (8000554 <updateMatrix_buffer+0xec>)
 80004be:	709a      	strb	r2, [r3, #2]
	matrix_buffer[3] = (matrix_buffer[3] >> 1) | (matrix_buffer[3] << 7);
 80004c0:	4b24      	ldr	r3, [pc, #144]	; (8000554 <updateMatrix_buffer+0xec>)
 80004c2:	78db      	ldrb	r3, [r3, #3]
 80004c4:	085b      	lsrs	r3, r3, #1
 80004c6:	b2db      	uxtb	r3, r3
 80004c8:	b25a      	sxtb	r2, r3
 80004ca:	4b22      	ldr	r3, [pc, #136]	; (8000554 <updateMatrix_buffer+0xec>)
 80004cc:	78db      	ldrb	r3, [r3, #3]
 80004ce:	01db      	lsls	r3, r3, #7
 80004d0:	b25b      	sxtb	r3, r3
 80004d2:	4313      	orrs	r3, r2
 80004d4:	b25b      	sxtb	r3, r3
 80004d6:	b2da      	uxtb	r2, r3
 80004d8:	4b1e      	ldr	r3, [pc, #120]	; (8000554 <updateMatrix_buffer+0xec>)
 80004da:	70da      	strb	r2, [r3, #3]
	matrix_buffer[4] = (matrix_buffer[4] >> 1) | (matrix_buffer[4] << 7);
 80004dc:	4b1d      	ldr	r3, [pc, #116]	; (8000554 <updateMatrix_buffer+0xec>)
 80004de:	791b      	ldrb	r3, [r3, #4]
 80004e0:	085b      	lsrs	r3, r3, #1
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	b25a      	sxtb	r2, r3
 80004e6:	4b1b      	ldr	r3, [pc, #108]	; (8000554 <updateMatrix_buffer+0xec>)
 80004e8:	791b      	ldrb	r3, [r3, #4]
 80004ea:	01db      	lsls	r3, r3, #7
 80004ec:	b25b      	sxtb	r3, r3
 80004ee:	4313      	orrs	r3, r2
 80004f0:	b25b      	sxtb	r3, r3
 80004f2:	b2da      	uxtb	r2, r3
 80004f4:	4b17      	ldr	r3, [pc, #92]	; (8000554 <updateMatrix_buffer+0xec>)
 80004f6:	711a      	strb	r2, [r3, #4]
	matrix_buffer[5] = (matrix_buffer[5] >> 1) | (matrix_buffer[5] << 7);
 80004f8:	4b16      	ldr	r3, [pc, #88]	; (8000554 <updateMatrix_buffer+0xec>)
 80004fa:	795b      	ldrb	r3, [r3, #5]
 80004fc:	085b      	lsrs	r3, r3, #1
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	b25a      	sxtb	r2, r3
 8000502:	4b14      	ldr	r3, [pc, #80]	; (8000554 <updateMatrix_buffer+0xec>)
 8000504:	795b      	ldrb	r3, [r3, #5]
 8000506:	01db      	lsls	r3, r3, #7
 8000508:	b25b      	sxtb	r3, r3
 800050a:	4313      	orrs	r3, r2
 800050c:	b25b      	sxtb	r3, r3
 800050e:	b2da      	uxtb	r2, r3
 8000510:	4b10      	ldr	r3, [pc, #64]	; (8000554 <updateMatrix_buffer+0xec>)
 8000512:	715a      	strb	r2, [r3, #5]
	matrix_buffer[6] = (matrix_buffer[6] >> 1) | (matrix_buffer[6] << 7);
 8000514:	4b0f      	ldr	r3, [pc, #60]	; (8000554 <updateMatrix_buffer+0xec>)
 8000516:	799b      	ldrb	r3, [r3, #6]
 8000518:	085b      	lsrs	r3, r3, #1
 800051a:	b2db      	uxtb	r3, r3
 800051c:	b25a      	sxtb	r2, r3
 800051e:	4b0d      	ldr	r3, [pc, #52]	; (8000554 <updateMatrix_buffer+0xec>)
 8000520:	799b      	ldrb	r3, [r3, #6]
 8000522:	01db      	lsls	r3, r3, #7
 8000524:	b25b      	sxtb	r3, r3
 8000526:	4313      	orrs	r3, r2
 8000528:	b25b      	sxtb	r3, r3
 800052a:	b2da      	uxtb	r2, r3
 800052c:	4b09      	ldr	r3, [pc, #36]	; (8000554 <updateMatrix_buffer+0xec>)
 800052e:	719a      	strb	r2, [r3, #6]
	matrix_buffer[7] = (matrix_buffer[7] >> 1) | (matrix_buffer[7] << 7);
 8000530:	4b08      	ldr	r3, [pc, #32]	; (8000554 <updateMatrix_buffer+0xec>)
 8000532:	79db      	ldrb	r3, [r3, #7]
 8000534:	085b      	lsrs	r3, r3, #1
 8000536:	b2db      	uxtb	r3, r3
 8000538:	b25a      	sxtb	r2, r3
 800053a:	4b06      	ldr	r3, [pc, #24]	; (8000554 <updateMatrix_buffer+0xec>)
 800053c:	79db      	ldrb	r3, [r3, #7]
 800053e:	01db      	lsls	r3, r3, #7
 8000540:	b25b      	sxtb	r3, r3
 8000542:	4313      	orrs	r3, r2
 8000544:	b25b      	sxtb	r3, r3
 8000546:	b2da      	uxtb	r2, r3
 8000548:	4b02      	ldr	r3, [pc, #8]	; (8000554 <updateMatrix_buffer+0xec>)
 800054a:	71da      	strb	r2, [r3, #7]

}
 800054c:	bf00      	nop
 800054e:	46bd      	mov	sp, r7
 8000550:	bc80      	pop	{r7}
 8000552:	4770      	bx	lr
 8000554:	2000000c 	.word	0x2000000c

08000558 <display_ledmatix>:
void display_ledmatix(int row,int col)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b08c      	sub	sp, #48	; 0x30
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
 8000560:	6039      	str	r1, [r7, #0]
	int shift = 1;// mask used to get bit by bit of buffer
 8000562:	2301      	movs	r3, #1
 8000564:	60fb      	str	r3, [r7, #12]

		if(row == 0){// enable row 0
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d14e      	bne.n	800060a <display_ledmatix+0xb2>
			HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, RESET);
 800056c:	2200      	movs	r2, #0
 800056e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000572:	48bc      	ldr	r0, [pc, #752]	; (8000864 <display_ledmatix+0x30c>)
 8000574:	f001 fa4e 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, SET);
 8000578:	2201      	movs	r2, #1
 800057a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800057e:	48b9      	ldr	r0, [pc, #740]	; (8000864 <display_ledmatix+0x30c>)
 8000580:	f001 fa48 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, SET);
 8000584:	2201      	movs	r2, #1
 8000586:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800058a:	48b6      	ldr	r0, [pc, #728]	; (8000864 <display_ledmatix+0x30c>)
 800058c:	f001 fa42 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, SET);
 8000590:	2201      	movs	r2, #1
 8000592:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000596:	48b3      	ldr	r0, [pc, #716]	; (8000864 <display_ledmatix+0x30c>)
 8000598:	f001 fa3c 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, SET);
 800059c:	2201      	movs	r2, #1
 800059e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005a2:	48b0      	ldr	r0, [pc, #704]	; (8000864 <display_ledmatix+0x30c>)
 80005a4:	f001 fa36 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, SET);
 80005a8:	2201      	movs	r2, #1
 80005aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ae:	48ad      	ldr	r0, [pc, #692]	; (8000864 <display_ledmatix+0x30c>)
 80005b0:	f001 fa30 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, SET);
 80005b4:	2201      	movs	r2, #1
 80005b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005ba:	48aa      	ldr	r0, [pc, #680]	; (8000864 <display_ledmatix+0x30c>)
 80005bc:	f001 fa2a 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, SET);
 80005c0:	2201      	movs	r2, #1
 80005c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005c6:	48a7      	ldr	r0, [pc, #668]	; (8000864 <display_ledmatix+0x30c>)
 80005c8:	f001 fa24 	bl	8001a14 <HAL_GPIO_WritePin>

			// get bit by bit of buffer, then assign to ENM-PIN to control COL-PIN
			  for (int i = 0; i < 8; i++) {
 80005cc:	2300      	movs	r3, #0
 80005ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80005d0:	e018      	b.n	8000604 <display_ledmatix+0xac>
			        HAL_GPIO_WritePin(ENM_GPIO_Port[i], ENM_Pin[i], 1 - (col & 1));
 80005d2:	4aa5      	ldr	r2, [pc, #660]	; (8000868 <display_ledmatix+0x310>)
 80005d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005d6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005da:	4aa4      	ldr	r2, [pc, #656]	; (800086c <display_ledmatix+0x314>)
 80005dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005de:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	f003 0301 	and.w	r3, r3, #1
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	bf0c      	ite	eq
 80005ec:	2301      	moveq	r3, #1
 80005ee:	2300      	movne	r3, #0
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	461a      	mov	r2, r3
 80005f4:	f001 fa0e 	bl	8001a14 <HAL_GPIO_WritePin>
			        col = col >> 1; // Dịch trái sau khi ghi giá trị
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	105b      	asrs	r3, r3, #1
 80005fc:	603b      	str	r3, [r7, #0]
			  for (int i = 0; i < 8; i++) {
 80005fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000600:	3301      	adds	r3, #1
 8000602:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000606:	2b07      	cmp	r3, #7
 8000608:	dde3      	ble.n	80005d2 <display_ledmatix+0x7a>
			    }
		}

		if(row == 1){// enable row 1
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2b01      	cmp	r3, #1
 800060e:	d14e      	bne.n	80006ae <display_ledmatix+0x156>
			HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, SET);
 8000610:	2201      	movs	r2, #1
 8000612:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000616:	4893      	ldr	r0, [pc, #588]	; (8000864 <display_ledmatix+0x30c>)
 8000618:	f001 f9fc 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000622:	4890      	ldr	r0, [pc, #576]	; (8000864 <display_ledmatix+0x30c>)
 8000624:	f001 f9f6 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, SET);
 8000628:	2201      	movs	r2, #1
 800062a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800062e:	488d      	ldr	r0, [pc, #564]	; (8000864 <display_ledmatix+0x30c>)
 8000630:	f001 f9f0 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, SET);
 8000634:	2201      	movs	r2, #1
 8000636:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800063a:	488a      	ldr	r0, [pc, #552]	; (8000864 <display_ledmatix+0x30c>)
 800063c:	f001 f9ea 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, SET);
 8000640:	2201      	movs	r2, #1
 8000642:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000646:	4887      	ldr	r0, [pc, #540]	; (8000864 <display_ledmatix+0x30c>)
 8000648:	f001 f9e4 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, SET);
 800064c:	2201      	movs	r2, #1
 800064e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000652:	4884      	ldr	r0, [pc, #528]	; (8000864 <display_ledmatix+0x30c>)
 8000654:	f001 f9de 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, SET);
 8000658:	2201      	movs	r2, #1
 800065a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800065e:	4881      	ldr	r0, [pc, #516]	; (8000864 <display_ledmatix+0x30c>)
 8000660:	f001 f9d8 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, SET);
 8000664:	2201      	movs	r2, #1
 8000666:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800066a:	487e      	ldr	r0, [pc, #504]	; (8000864 <display_ledmatix+0x30c>)
 800066c:	f001 f9d2 	bl	8001a14 <HAL_GPIO_WritePin>

			  for (int i = 0; i < 8; i++) {
 8000670:	2300      	movs	r3, #0
 8000672:	62bb      	str	r3, [r7, #40]	; 0x28
 8000674:	e018      	b.n	80006a8 <display_ledmatix+0x150>
					        HAL_GPIO_WritePin(ENM_GPIO_Port[i], ENM_Pin[i], 1 - (col & 1));
 8000676:	4a7c      	ldr	r2, [pc, #496]	; (8000868 <display_ledmatix+0x310>)
 8000678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800067a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800067e:	4a7b      	ldr	r2, [pc, #492]	; (800086c <display_ledmatix+0x314>)
 8000680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000682:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	f003 0301 	and.w	r3, r3, #1
 800068c:	2b00      	cmp	r3, #0
 800068e:	bf0c      	ite	eq
 8000690:	2301      	moveq	r3, #1
 8000692:	2300      	movne	r3, #0
 8000694:	b2db      	uxtb	r3, r3
 8000696:	461a      	mov	r2, r3
 8000698:	f001 f9bc 	bl	8001a14 <HAL_GPIO_WritePin>
					        col = col >> 1; // Dịch trái sau khi ghi giá trị
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	105b      	asrs	r3, r3, #1
 80006a0:	603b      	str	r3, [r7, #0]
			  for (int i = 0; i < 8; i++) {
 80006a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006a4:	3301      	adds	r3, #1
 80006a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80006a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006aa:	2b07      	cmp	r3, #7
 80006ac:	dde3      	ble.n	8000676 <display_ledmatix+0x11e>
					    }
		}

		if(row == 2){// enable row 2
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2b02      	cmp	r3, #2
 80006b2:	d14e      	bne.n	8000752 <display_ledmatix+0x1fa>
			HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, SET);
 80006b4:	2201      	movs	r2, #1
 80006b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ba:	486a      	ldr	r0, [pc, #424]	; (8000864 <display_ledmatix+0x30c>)
 80006bc:	f001 f9aa 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, SET);
 80006c0:	2201      	movs	r2, #1
 80006c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006c6:	4867      	ldr	r0, [pc, #412]	; (8000864 <display_ledmatix+0x30c>)
 80006c8:	f001 f9a4 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006d2:	4864      	ldr	r0, [pc, #400]	; (8000864 <display_ledmatix+0x30c>)
 80006d4:	f001 f99e 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, SET);
 80006d8:	2201      	movs	r2, #1
 80006da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006de:	4861      	ldr	r0, [pc, #388]	; (8000864 <display_ledmatix+0x30c>)
 80006e0:	f001 f998 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, SET);
 80006e4:	2201      	movs	r2, #1
 80006e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ea:	485e      	ldr	r0, [pc, #376]	; (8000864 <display_ledmatix+0x30c>)
 80006ec:	f001 f992 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, SET);
 80006f0:	2201      	movs	r2, #1
 80006f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006f6:	485b      	ldr	r0, [pc, #364]	; (8000864 <display_ledmatix+0x30c>)
 80006f8:	f001 f98c 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, SET);
 80006fc:	2201      	movs	r2, #1
 80006fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000702:	4858      	ldr	r0, [pc, #352]	; (8000864 <display_ledmatix+0x30c>)
 8000704:	f001 f986 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, SET);
 8000708:	2201      	movs	r2, #1
 800070a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800070e:	4855      	ldr	r0, [pc, #340]	; (8000864 <display_ledmatix+0x30c>)
 8000710:	f001 f980 	bl	8001a14 <HAL_GPIO_WritePin>

			  for (int i = 0; i < 8; i++) {
 8000714:	2300      	movs	r3, #0
 8000716:	627b      	str	r3, [r7, #36]	; 0x24
 8000718:	e018      	b.n	800074c <display_ledmatix+0x1f4>
					        HAL_GPIO_WritePin(ENM_GPIO_Port[i], ENM_Pin[i], 1 - (col & 1));
 800071a:	4a53      	ldr	r2, [pc, #332]	; (8000868 <display_ledmatix+0x310>)
 800071c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800071e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000722:	4a52      	ldr	r2, [pc, #328]	; (800086c <display_ledmatix+0x314>)
 8000724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000726:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	f003 0301 	and.w	r3, r3, #1
 8000730:	2b00      	cmp	r3, #0
 8000732:	bf0c      	ite	eq
 8000734:	2301      	moveq	r3, #1
 8000736:	2300      	movne	r3, #0
 8000738:	b2db      	uxtb	r3, r3
 800073a:	461a      	mov	r2, r3
 800073c:	f001 f96a 	bl	8001a14 <HAL_GPIO_WritePin>
					        col = col >> 1; // Dịch trái sau khi ghi giá trị
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	105b      	asrs	r3, r3, #1
 8000744:	603b      	str	r3, [r7, #0]
			  for (int i = 0; i < 8; i++) {
 8000746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000748:	3301      	adds	r3, #1
 800074a:	627b      	str	r3, [r7, #36]	; 0x24
 800074c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800074e:	2b07      	cmp	r3, #7
 8000750:	dde3      	ble.n	800071a <display_ledmatix+0x1c2>
					    }
		}

		if(row == 3){// enable row 3
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	2b03      	cmp	r3, #3
 8000756:	d14e      	bne.n	80007f6 <display_ledmatix+0x29e>
			HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, SET);
 8000758:	2201      	movs	r2, #1
 800075a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800075e:	4841      	ldr	r0, [pc, #260]	; (8000864 <display_ledmatix+0x30c>)
 8000760:	f001 f958 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, SET);
 8000764:	2201      	movs	r2, #1
 8000766:	f44f 7100 	mov.w	r1, #512	; 0x200
 800076a:	483e      	ldr	r0, [pc, #248]	; (8000864 <display_ledmatix+0x30c>)
 800076c:	f001 f952 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, SET);
 8000770:	2201      	movs	r2, #1
 8000772:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000776:	483b      	ldr	r0, [pc, #236]	; (8000864 <display_ledmatix+0x30c>)
 8000778:	f001 f94c 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000782:	4838      	ldr	r0, [pc, #224]	; (8000864 <display_ledmatix+0x30c>)
 8000784:	f001 f946 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, SET);
 8000788:	2201      	movs	r2, #1
 800078a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800078e:	4835      	ldr	r0, [pc, #212]	; (8000864 <display_ledmatix+0x30c>)
 8000790:	f001 f940 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, SET);
 8000794:	2201      	movs	r2, #1
 8000796:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800079a:	4832      	ldr	r0, [pc, #200]	; (8000864 <display_ledmatix+0x30c>)
 800079c:	f001 f93a 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, SET);
 80007a0:	2201      	movs	r2, #1
 80007a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007a6:	482f      	ldr	r0, [pc, #188]	; (8000864 <display_ledmatix+0x30c>)
 80007a8:	f001 f934 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, SET);
 80007ac:	2201      	movs	r2, #1
 80007ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007b2:	482c      	ldr	r0, [pc, #176]	; (8000864 <display_ledmatix+0x30c>)
 80007b4:	f001 f92e 	bl	8001a14 <HAL_GPIO_WritePin>

			  for (int i = 0; i < 8; i++) {
 80007b8:	2300      	movs	r3, #0
 80007ba:	623b      	str	r3, [r7, #32]
 80007bc:	e018      	b.n	80007f0 <display_ledmatix+0x298>
					        HAL_GPIO_WritePin(ENM_GPIO_Port[i], ENM_Pin[i], 1 - (col & 1));
 80007be:	4a2a      	ldr	r2, [pc, #168]	; (8000868 <display_ledmatix+0x310>)
 80007c0:	6a3b      	ldr	r3, [r7, #32]
 80007c2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80007c6:	4a29      	ldr	r2, [pc, #164]	; (800086c <display_ledmatix+0x314>)
 80007c8:	6a3b      	ldr	r3, [r7, #32]
 80007ca:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	f003 0301 	and.w	r3, r3, #1
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	bf0c      	ite	eq
 80007d8:	2301      	moveq	r3, #1
 80007da:	2300      	movne	r3, #0
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	461a      	mov	r2, r3
 80007e0:	f001 f918 	bl	8001a14 <HAL_GPIO_WritePin>
					        col = col >> 1; // Dịch trái sau khi ghi giá trị
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	105b      	asrs	r3, r3, #1
 80007e8:	603b      	str	r3, [r7, #0]
			  for (int i = 0; i < 8; i++) {
 80007ea:	6a3b      	ldr	r3, [r7, #32]
 80007ec:	3301      	adds	r3, #1
 80007ee:	623b      	str	r3, [r7, #32]
 80007f0:	6a3b      	ldr	r3, [r7, #32]
 80007f2:	2b07      	cmp	r3, #7
 80007f4:	dde3      	ble.n	80007be <display_ledmatix+0x266>
					    }
		}

		if(row == 4){// enable row 4
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2b04      	cmp	r3, #4
 80007fa:	d155      	bne.n	80008a8 <display_ledmatix+0x350>
			HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, SET);
 80007fc:	2201      	movs	r2, #1
 80007fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000802:	4818      	ldr	r0, [pc, #96]	; (8000864 <display_ledmatix+0x30c>)
 8000804:	f001 f906 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, SET);
 8000808:	2201      	movs	r2, #1
 800080a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800080e:	4815      	ldr	r0, [pc, #84]	; (8000864 <display_ledmatix+0x30c>)
 8000810:	f001 f900 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, SET);
 8000814:	2201      	movs	r2, #1
 8000816:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800081a:	4812      	ldr	r0, [pc, #72]	; (8000864 <display_ledmatix+0x30c>)
 800081c:	f001 f8fa 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, SET);
 8000820:	2201      	movs	r2, #1
 8000822:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000826:	480f      	ldr	r0, [pc, #60]	; (8000864 <display_ledmatix+0x30c>)
 8000828:	f001 f8f4 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000832:	480c      	ldr	r0, [pc, #48]	; (8000864 <display_ledmatix+0x30c>)
 8000834:	f001 f8ee 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, SET);
 8000838:	2201      	movs	r2, #1
 800083a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800083e:	4809      	ldr	r0, [pc, #36]	; (8000864 <display_ledmatix+0x30c>)
 8000840:	f001 f8e8 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, SET);
 8000844:	2201      	movs	r2, #1
 8000846:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800084a:	4806      	ldr	r0, [pc, #24]	; (8000864 <display_ledmatix+0x30c>)
 800084c:	f001 f8e2 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, SET);
 8000850:	2201      	movs	r2, #1
 8000852:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000856:	4803      	ldr	r0, [pc, #12]	; (8000864 <display_ledmatix+0x30c>)
 8000858:	f001 f8dc 	bl	8001a14 <HAL_GPIO_WritePin>

			  for (int i = 0; i < 8; i++) {
 800085c:	2300      	movs	r3, #0
 800085e:	61fb      	str	r3, [r7, #28]
 8000860:	e01f      	b.n	80008a2 <display_ledmatix+0x34a>
 8000862:	bf00      	nop
 8000864:	40010c00 	.word	0x40010c00
 8000868:	20000014 	.word	0x20000014
 800086c:	20000034 	.word	0x20000034
					        HAL_GPIO_WritePin(ENM_GPIO_Port[i], ENM_Pin[i], 1 - (col & 1));
 8000870:	4a8a      	ldr	r2, [pc, #552]	; (8000a9c <display_ledmatix+0x544>)
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000878:	4a89      	ldr	r2, [pc, #548]	; (8000aa0 <display_ledmatix+0x548>)
 800087a:	69fb      	ldr	r3, [r7, #28]
 800087c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	2b00      	cmp	r3, #0
 8000888:	bf0c      	ite	eq
 800088a:	2301      	moveq	r3, #1
 800088c:	2300      	movne	r3, #0
 800088e:	b2db      	uxtb	r3, r3
 8000890:	461a      	mov	r2, r3
 8000892:	f001 f8bf 	bl	8001a14 <HAL_GPIO_WritePin>
					        col = col >> 1; // Dịch trái sau khi ghi giá trị
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	105b      	asrs	r3, r3, #1
 800089a:	603b      	str	r3, [r7, #0]
			  for (int i = 0; i < 8; i++) {
 800089c:	69fb      	ldr	r3, [r7, #28]
 800089e:	3301      	adds	r3, #1
 80008a0:	61fb      	str	r3, [r7, #28]
 80008a2:	69fb      	ldr	r3, [r7, #28]
 80008a4:	2b07      	cmp	r3, #7
 80008a6:	dde3      	ble.n	8000870 <display_ledmatix+0x318>
					    }
		}

		if(row == 5){// enable row 5
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2b05      	cmp	r3, #5
 80008ac:	d14e      	bne.n	800094c <display_ledmatix+0x3f4>
			HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, SET);
 80008ae:	2201      	movs	r2, #1
 80008b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008b4:	487b      	ldr	r0, [pc, #492]	; (8000aa4 <display_ledmatix+0x54c>)
 80008b6:	f001 f8ad 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, SET);
 80008ba:	2201      	movs	r2, #1
 80008bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008c0:	4878      	ldr	r0, [pc, #480]	; (8000aa4 <display_ledmatix+0x54c>)
 80008c2:	f001 f8a7 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, SET);
 80008c6:	2201      	movs	r2, #1
 80008c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008cc:	4875      	ldr	r0, [pc, #468]	; (8000aa4 <display_ledmatix+0x54c>)
 80008ce:	f001 f8a1 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, SET);
 80008d2:	2201      	movs	r2, #1
 80008d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008d8:	4872      	ldr	r0, [pc, #456]	; (8000aa4 <display_ledmatix+0x54c>)
 80008da:	f001 f89b 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, SET);
 80008de:	2201      	movs	r2, #1
 80008e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008e4:	486f      	ldr	r0, [pc, #444]	; (8000aa4 <display_ledmatix+0x54c>)
 80008e6:	f001 f895 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008f0:	486c      	ldr	r0, [pc, #432]	; (8000aa4 <display_ledmatix+0x54c>)
 80008f2:	f001 f88f 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, SET);
 80008f6:	2201      	movs	r2, #1
 80008f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008fc:	4869      	ldr	r0, [pc, #420]	; (8000aa4 <display_ledmatix+0x54c>)
 80008fe:	f001 f889 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, SET);
 8000902:	2201      	movs	r2, #1
 8000904:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000908:	4866      	ldr	r0, [pc, #408]	; (8000aa4 <display_ledmatix+0x54c>)
 800090a:	f001 f883 	bl	8001a14 <HAL_GPIO_WritePin>

			  for (int i = 0; i < 8; i++) {
 800090e:	2300      	movs	r3, #0
 8000910:	61bb      	str	r3, [r7, #24]
 8000912:	e018      	b.n	8000946 <display_ledmatix+0x3ee>
					        HAL_GPIO_WritePin(ENM_GPIO_Port[i], ENM_Pin[i], 1 - (col & 1));
 8000914:	4a61      	ldr	r2, [pc, #388]	; (8000a9c <display_ledmatix+0x544>)
 8000916:	69bb      	ldr	r3, [r7, #24]
 8000918:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800091c:	4a60      	ldr	r2, [pc, #384]	; (8000aa0 <display_ledmatix+0x548>)
 800091e:	69bb      	ldr	r3, [r7, #24]
 8000920:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	2b00      	cmp	r3, #0
 800092c:	bf0c      	ite	eq
 800092e:	2301      	moveq	r3, #1
 8000930:	2300      	movne	r3, #0
 8000932:	b2db      	uxtb	r3, r3
 8000934:	461a      	mov	r2, r3
 8000936:	f001 f86d 	bl	8001a14 <HAL_GPIO_WritePin>
					        col = col >> 1; // Dịch trái sau khi ghi giá trị
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	105b      	asrs	r3, r3, #1
 800093e:	603b      	str	r3, [r7, #0]
			  for (int i = 0; i < 8; i++) {
 8000940:	69bb      	ldr	r3, [r7, #24]
 8000942:	3301      	adds	r3, #1
 8000944:	61bb      	str	r3, [r7, #24]
 8000946:	69bb      	ldr	r3, [r7, #24]
 8000948:	2b07      	cmp	r3, #7
 800094a:	dde3      	ble.n	8000914 <display_ledmatix+0x3bc>
					    }
		}

		if(row == 6){// enable row 6
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2b06      	cmp	r3, #6
 8000950:	d14e      	bne.n	80009f0 <display_ledmatix+0x498>
			HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, SET);
 8000952:	2201      	movs	r2, #1
 8000954:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000958:	4852      	ldr	r0, [pc, #328]	; (8000aa4 <display_ledmatix+0x54c>)
 800095a:	f001 f85b 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, SET);
 800095e:	2201      	movs	r2, #1
 8000960:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000964:	484f      	ldr	r0, [pc, #316]	; (8000aa4 <display_ledmatix+0x54c>)
 8000966:	f001 f855 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, SET);
 800096a:	2201      	movs	r2, #1
 800096c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000970:	484c      	ldr	r0, [pc, #304]	; (8000aa4 <display_ledmatix+0x54c>)
 8000972:	f001 f84f 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, SET);
 8000976:	2201      	movs	r2, #1
 8000978:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800097c:	4849      	ldr	r0, [pc, #292]	; (8000aa4 <display_ledmatix+0x54c>)
 800097e:	f001 f849 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, SET);
 8000982:	2201      	movs	r2, #1
 8000984:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000988:	4846      	ldr	r0, [pc, #280]	; (8000aa4 <display_ledmatix+0x54c>)
 800098a:	f001 f843 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, SET);
 800098e:	2201      	movs	r2, #1
 8000990:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000994:	4843      	ldr	r0, [pc, #268]	; (8000aa4 <display_ledmatix+0x54c>)
 8000996:	f001 f83d 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009a0:	4840      	ldr	r0, [pc, #256]	; (8000aa4 <display_ledmatix+0x54c>)
 80009a2:	f001 f837 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, SET);
 80009a6:	2201      	movs	r2, #1
 80009a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009ac:	483d      	ldr	r0, [pc, #244]	; (8000aa4 <display_ledmatix+0x54c>)
 80009ae:	f001 f831 	bl	8001a14 <HAL_GPIO_WritePin>

			  for (int i = 0; i < 8; i++) {
 80009b2:	2300      	movs	r3, #0
 80009b4:	617b      	str	r3, [r7, #20]
 80009b6:	e018      	b.n	80009ea <display_ledmatix+0x492>
					        HAL_GPIO_WritePin(ENM_GPIO_Port[i], ENM_Pin[i], 1 - (col & 1));
 80009b8:	4a38      	ldr	r2, [pc, #224]	; (8000a9c <display_ledmatix+0x544>)
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80009c0:	4a37      	ldr	r2, [pc, #220]	; (8000aa0 <display_ledmatix+0x548>)
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	bf0c      	ite	eq
 80009d2:	2301      	moveq	r3, #1
 80009d4:	2300      	movne	r3, #0
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	461a      	mov	r2, r3
 80009da:	f001 f81b 	bl	8001a14 <HAL_GPIO_WritePin>
					        col = col >> 1; // Dịch trái sau khi ghi giá trị
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	105b      	asrs	r3, r3, #1
 80009e2:	603b      	str	r3, [r7, #0]
			  for (int i = 0; i < 8; i++) {
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	3301      	adds	r3, #1
 80009e8:	617b      	str	r3, [r7, #20]
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	2b07      	cmp	r3, #7
 80009ee:	dde3      	ble.n	80009b8 <display_ledmatix+0x460>
					    }
		}

		if(row == 7){// enable row 7
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2b07      	cmp	r3, #7
 80009f4:	d14e      	bne.n	8000a94 <display_ledmatix+0x53c>
			HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, SET);
 80009f6:	2201      	movs	r2, #1
 80009f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009fc:	4829      	ldr	r0, [pc, #164]	; (8000aa4 <display_ledmatix+0x54c>)
 80009fe:	f001 f809 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, SET);
 8000a02:	2201      	movs	r2, #1
 8000a04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a08:	4826      	ldr	r0, [pc, #152]	; (8000aa4 <display_ledmatix+0x54c>)
 8000a0a:	f001 f803 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, SET);
 8000a0e:	2201      	movs	r2, #1
 8000a10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a14:	4823      	ldr	r0, [pc, #140]	; (8000aa4 <display_ledmatix+0x54c>)
 8000a16:	f000 fffd 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, SET);
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a20:	4820      	ldr	r0, [pc, #128]	; (8000aa4 <display_ledmatix+0x54c>)
 8000a22:	f000 fff7 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, SET);
 8000a26:	2201      	movs	r2, #1
 8000a28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a2c:	481d      	ldr	r0, [pc, #116]	; (8000aa4 <display_ledmatix+0x54c>)
 8000a2e:	f000 fff1 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, SET);
 8000a32:	2201      	movs	r2, #1
 8000a34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a38:	481a      	ldr	r0, [pc, #104]	; (8000aa4 <display_ledmatix+0x54c>)
 8000a3a:	f000 ffeb 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, SET);
 8000a3e:	2201      	movs	r2, #1
 8000a40:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a44:	4817      	ldr	r0, [pc, #92]	; (8000aa4 <display_ledmatix+0x54c>)
 8000a46:	f000 ffe5 	bl	8001a14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a50:	4814      	ldr	r0, [pc, #80]	; (8000aa4 <display_ledmatix+0x54c>)
 8000a52:	f000 ffdf 	bl	8001a14 <HAL_GPIO_WritePin>

			  for (int i = 0; i < 8; i++) {
 8000a56:	2300      	movs	r3, #0
 8000a58:	613b      	str	r3, [r7, #16]
 8000a5a:	e018      	b.n	8000a8e <display_ledmatix+0x536>
					        HAL_GPIO_WritePin(ENM_GPIO_Port[i], ENM_Pin[i], 1 - (col & 1));
 8000a5c:	4a0f      	ldr	r2, [pc, #60]	; (8000a9c <display_ledmatix+0x544>)
 8000a5e:	693b      	ldr	r3, [r7, #16]
 8000a60:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a64:	4a0e      	ldr	r2, [pc, #56]	; (8000aa0 <display_ledmatix+0x548>)
 8000a66:	693b      	ldr	r3, [r7, #16]
 8000a68:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	bf0c      	ite	eq
 8000a76:	2301      	moveq	r3, #1
 8000a78:	2300      	movne	r3, #0
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	f000 ffc9 	bl	8001a14 <HAL_GPIO_WritePin>
					        col = col >> 1; // Dịch trái sau khi ghi giá trị
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	105b      	asrs	r3, r3, #1
 8000a86:	603b      	str	r3, [r7, #0]
			  for (int i = 0; i < 8; i++) {
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	613b      	str	r3, [r7, #16]
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	2b07      	cmp	r3, #7
 8000a92:	dde3      	ble.n	8000a5c <display_ledmatix+0x504>
					    }
		}
}
 8000a94:	bf00      	nop
 8000a96:	3730      	adds	r7, #48	; 0x30
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000014 	.word	0x20000014
 8000aa0:	20000034 	.word	0x20000034
 8000aa4:	40010c00 	.word	0x40010c00

08000aa8 <updateLedMatrix>:
void updateLedMatrix(int index){
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2b07      	cmp	r3, #7
 8000ab4:	d84a      	bhi.n	8000b4c <updateLedMatrix+0xa4>
 8000ab6:	a201      	add	r2, pc, #4	; (adr r2, 8000abc <updateLedMatrix+0x14>)
 8000ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000abc:	08000add 	.word	0x08000add
 8000ac0:	08000aeb 	.word	0x08000aeb
 8000ac4:	08000af9 	.word	0x08000af9
 8000ac8:	08000b07 	.word	0x08000b07
 8000acc:	08000b15 	.word	0x08000b15
 8000ad0:	08000b23 	.word	0x08000b23
 8000ad4:	08000b31 	.word	0x08000b31
 8000ad8:	08000b3f 	.word	0x08000b3f
	switch(index){
	case 0:// display row 0 of led matrix
		display_ledmatix(0, matrix_buffer[0]);
 8000adc:	4b1e      	ldr	r3, [pc, #120]	; (8000b58 <updateLedMatrix+0xb0>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f7ff fd38 	bl	8000558 <display_ledmatix>
		break;
 8000ae8:	e031      	b.n	8000b4e <updateLedMatrix+0xa6>
	case 1:// display row 1 of led matrix
		display_ledmatix(1, matrix_buffer[1]);
 8000aea:	4b1b      	ldr	r3, [pc, #108]	; (8000b58 <updateLedMatrix+0xb0>)
 8000aec:	785b      	ldrb	r3, [r3, #1]
 8000aee:	4619      	mov	r1, r3
 8000af0:	2001      	movs	r0, #1
 8000af2:	f7ff fd31 	bl	8000558 <display_ledmatix>
		break;
 8000af6:	e02a      	b.n	8000b4e <updateLedMatrix+0xa6>
	case 2:// display row 2 of led matrix
		display_ledmatix(2, matrix_buffer[2]);
 8000af8:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <updateLedMatrix+0xb0>)
 8000afa:	789b      	ldrb	r3, [r3, #2]
 8000afc:	4619      	mov	r1, r3
 8000afe:	2002      	movs	r0, #2
 8000b00:	f7ff fd2a 	bl	8000558 <display_ledmatix>
		break;
 8000b04:	e023      	b.n	8000b4e <updateLedMatrix+0xa6>
	case 3:// display row 3 of led matrix
		display_ledmatix(3, matrix_buffer[3]);
 8000b06:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <updateLedMatrix+0xb0>)
 8000b08:	78db      	ldrb	r3, [r3, #3]
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	2003      	movs	r0, #3
 8000b0e:	f7ff fd23 	bl	8000558 <display_ledmatix>
		break;
 8000b12:	e01c      	b.n	8000b4e <updateLedMatrix+0xa6>
	case 4:// display row 4 of led matrix
		display_ledmatix(4, matrix_buffer[4]);
 8000b14:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <updateLedMatrix+0xb0>)
 8000b16:	791b      	ldrb	r3, [r3, #4]
 8000b18:	4619      	mov	r1, r3
 8000b1a:	2004      	movs	r0, #4
 8000b1c:	f7ff fd1c 	bl	8000558 <display_ledmatix>
		break;
 8000b20:	e015      	b.n	8000b4e <updateLedMatrix+0xa6>
	case 5:// display row 5 of led matrix
		display_ledmatix(5, matrix_buffer[5]);
 8000b22:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <updateLedMatrix+0xb0>)
 8000b24:	795b      	ldrb	r3, [r3, #5]
 8000b26:	4619      	mov	r1, r3
 8000b28:	2005      	movs	r0, #5
 8000b2a:	f7ff fd15 	bl	8000558 <display_ledmatix>
		break;
 8000b2e:	e00e      	b.n	8000b4e <updateLedMatrix+0xa6>
	case 6:// display row 6 of led matrix
		display_ledmatix(6, matrix_buffer[6]);
 8000b30:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <updateLedMatrix+0xb0>)
 8000b32:	799b      	ldrb	r3, [r3, #6]
 8000b34:	4619      	mov	r1, r3
 8000b36:	2006      	movs	r0, #6
 8000b38:	f7ff fd0e 	bl	8000558 <display_ledmatix>
		break;
 8000b3c:	e007      	b.n	8000b4e <updateLedMatrix+0xa6>
	case 7:// display row 7 of led matrix
		display_ledmatix(7, matrix_buffer[7]);
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <updateLedMatrix+0xb0>)
 8000b40:	79db      	ldrb	r3, [r3, #7]
 8000b42:	4619      	mov	r1, r3
 8000b44:	2007      	movs	r0, #7
 8000b46:	f7ff fd07 	bl	8000558 <display_ledmatix>
		break;
 8000b4a:	e000      	b.n	8000b4e <updateLedMatrix+0xa6>
	default:
		break;
 8000b4c:	bf00      	nop
	}
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	2000000c 	.word	0x2000000c

08000b5c <update7SEG>:

void update7SEG(int index)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2b03      	cmp	r3, #3
 8000b68:	d822      	bhi.n	8000bb0 <update7SEG+0x54>
 8000b6a:	a201      	add	r2, pc, #4	; (adr r2, 8000b70 <update7SEG+0x14>)
 8000b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b70:	08000b81 	.word	0x08000b81
 8000b74:	08000b8d 	.word	0x08000b8d
 8000b78:	08000b99 	.word	0x08000b99
 8000b7c:	08000ba5 	.word	0x08000ba5
    switch (index)
    {
        case 0:
            display7SEG(led_buffer[0]);
 8000b80:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <update7SEG+0x60>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff fae1 	bl	800014c <display7SEG>
            break;
 8000b8a:	e012      	b.n	8000bb2 <update7SEG+0x56>
        case 1:
            display7SEG(led_buffer[1]);
 8000b8c:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <update7SEG+0x60>)
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff fadb 	bl	800014c <display7SEG>
            break;
 8000b96:	e00c      	b.n	8000bb2 <update7SEG+0x56>
        case 2:
            display7SEG(led_buffer[2]);
 8000b98:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <update7SEG+0x60>)
 8000b9a:	689b      	ldr	r3, [r3, #8]
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff fad5 	bl	800014c <display7SEG>
            break;
 8000ba2:	e006      	b.n	8000bb2 <update7SEG+0x56>
        case 3:
            display7SEG(led_buffer[3]);
 8000ba4:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <update7SEG+0x60>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff facf 	bl	800014c <display7SEG>
            break;
 8000bae:	e000      	b.n	8000bb2 <update7SEG+0x56>
        default:
            break;
 8000bb0:	bf00      	nop
    }
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	2000007c 	.word	0x2000007c

08000bc0 <updateClockBuffer>:
void updateClockBuffer()
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
	if(hour<10)
 8000bc4:	4b29      	ldr	r3, [pc, #164]	; (8000c6c <updateClockBuffer+0xac>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2b09      	cmp	r3, #9
 8000bca:	dc06      	bgt.n	8000bda <updateClockBuffer+0x1a>
	{
		led_buffer[0]=0;
 8000bcc:	4b28      	ldr	r3, [pc, #160]	; (8000c70 <updateClockBuffer+0xb0>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
		led_buffer[1]=hour;
 8000bd2:	4b26      	ldr	r3, [pc, #152]	; (8000c6c <updateClockBuffer+0xac>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a26      	ldr	r2, [pc, #152]	; (8000c70 <updateClockBuffer+0xb0>)
 8000bd8:	6053      	str	r3, [r2, #4]

	}
	if(hour>=10)
 8000bda:	4b24      	ldr	r3, [pc, #144]	; (8000c6c <updateClockBuffer+0xac>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	2b09      	cmp	r3, #9
 8000be0:	dd18      	ble.n	8000c14 <updateClockBuffer+0x54>
	{
		led_buffer[0]=hour/10;
 8000be2:	4b22      	ldr	r3, [pc, #136]	; (8000c6c <updateClockBuffer+0xac>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a23      	ldr	r2, [pc, #140]	; (8000c74 <updateClockBuffer+0xb4>)
 8000be8:	fb82 1203 	smull	r1, r2, r2, r3
 8000bec:	1092      	asrs	r2, r2, #2
 8000bee:	17db      	asrs	r3, r3, #31
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	4a1f      	ldr	r2, [pc, #124]	; (8000c70 <updateClockBuffer+0xb0>)
 8000bf4:	6013      	str	r3, [r2, #0]
		led_buffer[1]=hour%10;
 8000bf6:	4b1d      	ldr	r3, [pc, #116]	; (8000c6c <updateClockBuffer+0xac>)
 8000bf8:	6819      	ldr	r1, [r3, #0]
 8000bfa:	4b1e      	ldr	r3, [pc, #120]	; (8000c74 <updateClockBuffer+0xb4>)
 8000bfc:	fb83 2301 	smull	r2, r3, r3, r1
 8000c00:	109a      	asrs	r2, r3, #2
 8000c02:	17cb      	asrs	r3, r1, #31
 8000c04:	1ad2      	subs	r2, r2, r3
 8000c06:	4613      	mov	r3, r2
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	4413      	add	r3, r2
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	1aca      	subs	r2, r1, r3
 8000c10:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <updateClockBuffer+0xb0>)
 8000c12:	605a      	str	r2, [r3, #4]
	}
	if(minute<10)
 8000c14:	4b18      	ldr	r3, [pc, #96]	; (8000c78 <updateClockBuffer+0xb8>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b09      	cmp	r3, #9
 8000c1a:	dc06      	bgt.n	8000c2a <updateClockBuffer+0x6a>
	{
		led_buffer[2]=0;
 8000c1c:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <updateClockBuffer+0xb0>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
		led_buffer[3]=minute;
 8000c22:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <updateClockBuffer+0xb8>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a12      	ldr	r2, [pc, #72]	; (8000c70 <updateClockBuffer+0xb0>)
 8000c28:	60d3      	str	r3, [r2, #12]
	}
	if(minute>=10)
 8000c2a:	4b13      	ldr	r3, [pc, #76]	; (8000c78 <updateClockBuffer+0xb8>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	2b09      	cmp	r3, #9
 8000c30:	dd18      	ble.n	8000c64 <updateClockBuffer+0xa4>
	{
		led_buffer[2]=minute/10;
 8000c32:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <updateClockBuffer+0xb8>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a0f      	ldr	r2, [pc, #60]	; (8000c74 <updateClockBuffer+0xb4>)
 8000c38:	fb82 1203 	smull	r1, r2, r2, r3
 8000c3c:	1092      	asrs	r2, r2, #2
 8000c3e:	17db      	asrs	r3, r3, #31
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	4a0b      	ldr	r2, [pc, #44]	; (8000c70 <updateClockBuffer+0xb0>)
 8000c44:	6093      	str	r3, [r2, #8]
		led_buffer[3]=minute%10;
 8000c46:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <updateClockBuffer+0xb8>)
 8000c48:	6819      	ldr	r1, [r3, #0]
 8000c4a:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <updateClockBuffer+0xb4>)
 8000c4c:	fb83 2301 	smull	r2, r3, r3, r1
 8000c50:	109a      	asrs	r2, r3, #2
 8000c52:	17cb      	asrs	r3, r1, #31
 8000c54:	1ad2      	subs	r2, r2, r3
 8000c56:	4613      	mov	r3, r2
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	4413      	add	r3, r2
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	1aca      	subs	r2, r1, r3
 8000c60:	4b03      	ldr	r3, [pc, #12]	; (8000c70 <updateClockBuffer+0xb0>)
 8000c62:	60da      	str	r2, [r3, #12]
	}

}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr
 8000c6c:	20000000 	.word	0x20000000
 8000c70:	2000007c 	.word	0x2000007c
 8000c74:	66666667 	.word	0x66666667
 8000c78:	20000004 	.word	0x20000004

08000c7c <setTimer_maxtrix_uppdate>:
int timer_counter_matrix=0;
int timer_flag_matrix=0;
int timer_counter_uppdate=0;
int timer_flag_uppdate=0;
void setTimer_maxtrix_uppdate(int duration)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
	timer_counter_uppdate=duration/timer_cycle;
 8000c84:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <setTimer_maxtrix_uppdate+0x28>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c8e:	4a06      	ldr	r2, [pc, #24]	; (8000ca8 <setTimer_maxtrix_uppdate+0x2c>)
 8000c90:	6013      	str	r3, [r2, #0]
	timer_flag_uppdate=0;
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <setTimer_maxtrix_uppdate+0x30>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	20000044 	.word	0x20000044
 8000ca8:	200000b0 	.word	0x200000b0
 8000cac:	200000b4 	.word	0x200000b4

08000cb0 <setTimer_maxtrix>:
void setTimer_maxtrix(int duration)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	timer_counter_matrix=duration/timer_cycle;
 8000cb8:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <setTimer_maxtrix+0x28>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cc2:	4a06      	ldr	r2, [pc, #24]	; (8000cdc <setTimer_maxtrix+0x2c>)
 8000cc4:	6013      	str	r3, [r2, #0]
	timer_flag_matrix=0;
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <setTimer_maxtrix+0x30>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
}
 8000ccc:	bf00      	nop
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bc80      	pop	{r7}
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	20000044 	.word	0x20000044
 8000cdc:	200000a8 	.word	0x200000a8
 8000ce0:	200000ac 	.word	0x200000ac

08000ce4 <timerRun_maxtrix>:
void timerRun_maxtrix()
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
	if(timer_counter_matrix>0)
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <timerRun_maxtrix+0x4c>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	dd0b      	ble.n	8000d08 <timerRun_maxtrix+0x24>
	{
		timer_counter_matrix--;
 8000cf0:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <timerRun_maxtrix+0x4c>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	4a0e      	ldr	r2, [pc, #56]	; (8000d30 <timerRun_maxtrix+0x4c>)
 8000cf8:	6013      	str	r3, [r2, #0]
		if(timer_counter_matrix==0)
 8000cfa:	4b0d      	ldr	r3, [pc, #52]	; (8000d30 <timerRun_maxtrix+0x4c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d102      	bne.n	8000d08 <timerRun_maxtrix+0x24>
			timer_flag_matrix=1;
 8000d02:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <timerRun_maxtrix+0x50>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	601a      	str	r2, [r3, #0]
	}
	if(timer_counter_uppdate>0)
 8000d08:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <timerRun_maxtrix+0x54>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	dd0b      	ble.n	8000d28 <timerRun_maxtrix+0x44>
	{
		timer_counter_uppdate--;
 8000d10:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <timerRun_maxtrix+0x54>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	3b01      	subs	r3, #1
 8000d16:	4a08      	ldr	r2, [pc, #32]	; (8000d38 <timerRun_maxtrix+0x54>)
 8000d18:	6013      	str	r3, [r2, #0]
		if(timer_counter_uppdate==0)
 8000d1a:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <timerRun_maxtrix+0x54>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d102      	bne.n	8000d28 <timerRun_maxtrix+0x44>
			timer_flag_uppdate=1;
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <timerRun_maxtrix+0x58>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	601a      	str	r2, [r3, #0]
	}
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc80      	pop	{r7}
 8000d2e:	4770      	bx	lr
 8000d30:	200000a8 	.word	0x200000a8
 8000d34:	200000ac 	.word	0x200000ac
 8000d38:	200000b0 	.word	0x200000b0
 8000d3c:	200000b4 	.word	0x200000b4

08000d40 <setTimer>:
void setTimer(int duration)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
	timer_counter=duration/timer_cycle;
 8000d48:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <setTimer+0x28>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	687a      	ldr	r2, [r7, #4]
 8000d4e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d52:	4a06      	ldr	r2, [pc, #24]	; (8000d6c <setTimer+0x2c>)
 8000d54:	6013      	str	r3, [r2, #0]
	timer_flag=0;
 8000d56:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <setTimer+0x30>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
}
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bc80      	pop	{r7}
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	20000044 	.word	0x20000044
 8000d6c:	20000090 	.word	0x20000090
 8000d70:	20000094 	.word	0x20000094

08000d74 <timerRun>:
void timerRun()
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
	if(timer_counter>0)
 8000d78:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <timerRun+0x2c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	dd0b      	ble.n	8000d98 <timerRun+0x24>
	{
		timer_counter--;
 8000d80:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <timerRun+0x2c>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	3b01      	subs	r3, #1
 8000d86:	4a06      	ldr	r2, [pc, #24]	; (8000da0 <timerRun+0x2c>)
 8000d88:	6013      	str	r3, [r2, #0]
		if(timer_counter==0)
 8000d8a:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <timerRun+0x2c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d102      	bne.n	8000d98 <timerRun+0x24>
			timer_flag=1;
 8000d92:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <timerRun+0x30>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	601a      	str	r2, [r3, #0]
	}
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr
 8000da0:	20000090 	.word	0x20000090
 8000da4:	20000094 	.word	0x20000094

08000da8 <setTimer1>:
void setTimer1(int duration1)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
	timer_counter1=duration1/timer_cycle1;
 8000db0:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <setTimer1+0x28>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	fb92 f3f3 	sdiv	r3, r2, r3
 8000dba:	4a06      	ldr	r2, [pc, #24]	; (8000dd4 <setTimer1+0x2c>)
 8000dbc:	6013      	str	r3, [r2, #0]
	timer_flag1=0;
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <setTimer1+0x30>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bc80      	pop	{r7}
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	20000048 	.word	0x20000048
 8000dd4:	20000098 	.word	0x20000098
 8000dd8:	2000009c 	.word	0x2000009c

08000ddc <timerRun1>:
void timerRun1()
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
	if(timer_counter1>0)
 8000de0:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <timerRun1+0x2c>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	dd0b      	ble.n	8000e00 <timerRun1+0x24>
	{
		timer_counter1--;
 8000de8:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <timerRun1+0x2c>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	3b01      	subs	r3, #1
 8000dee:	4a06      	ldr	r2, [pc, #24]	; (8000e08 <timerRun1+0x2c>)
 8000df0:	6013      	str	r3, [r2, #0]
		if(timer_counter1==0)
 8000df2:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <timerRun1+0x2c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d102      	bne.n	8000e00 <timerRun1+0x24>
			timer_flag1=1;
 8000dfa:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <timerRun1+0x30>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	601a      	str	r2, [r3, #0]
	}
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr
 8000e08:	20000098 	.word	0x20000098
 8000e0c:	2000009c 	.word	0x2000009c

08000e10 <setTimer2>:
void setTimer2(int duration1)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
	timer_counter2=duration1/timer_cycle2;
 8000e18:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <setTimer2+0x28>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e22:	4a06      	ldr	r2, [pc, #24]	; (8000e3c <setTimer2+0x2c>)
 8000e24:	6013      	str	r3, [r2, #0]
	timer_flag2=0;
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <setTimer2+0x30>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bc80      	pop	{r7}
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	2000004c 	.word	0x2000004c
 8000e3c:	200000a0 	.word	0x200000a0
 8000e40:	200000a4 	.word	0x200000a4

08000e44 <timerRun2>:
void timerRun2()
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
	if(timer_counter2>0)
 8000e48:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <timerRun2+0x2c>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	dd0b      	ble.n	8000e68 <timerRun2+0x24>
	{
		timer_counter2--;
 8000e50:	4b07      	ldr	r3, [pc, #28]	; (8000e70 <timerRun2+0x2c>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	3b01      	subs	r3, #1
 8000e56:	4a06      	ldr	r2, [pc, #24]	; (8000e70 <timerRun2+0x2c>)
 8000e58:	6013      	str	r3, [r2, #0]
		if(timer_counter2==0)
 8000e5a:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <timerRun2+0x2c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d102      	bne.n	8000e68 <timerRun2+0x24>
			timer_flag2=1;
 8000e62:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <timerRun2+0x30>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	601a      	str	r2, [r3, #0]
	}
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr
 8000e70:	200000a0 	.word	0x200000a0
 8000e74:	200000a4 	.word	0x200000a4

08000e78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e7e:	f000 fadf 	bl	8001440 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e82:	f000 f935 	bl	80010f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e86:	f000 f9bb 	bl	8001200 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e8a:	f000 f96d 	bl	8001168 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000e8e:	488b      	ldr	r0, [pc, #556]	; (80010bc <main+0x244>)
 8000e90:	f001 fa1e 	bl	80022d0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer(1000);
 8000e94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e98:	f7ff ff52 	bl	8000d40 <setTimer>
  setTimer1(250);
 8000e9c:	20fa      	movs	r0, #250	; 0xfa
 8000e9e:	f7ff ff83 	bl	8000da8 <setTimer1>
  setTimer2(1000);
 8000ea2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ea6:	f7ff ffb3 	bl	8000e10 <setTimer2>
  setTimer_maxtrix(200);
 8000eaa:	20c8      	movs	r0, #200	; 0xc8
 8000eac:	f7ff ff00 	bl	8000cb0 <setTimer_maxtrix>
  setTimer_maxtrix_uppdate(1000);
 8000eb0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eb4:	f7ff fee2 	bl	8000c7c <setTimer_maxtrix_uppdate>
  int state=0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */
    if(timer_flag==1)
 8000ebc:	4b80      	ldr	r3, [pc, #512]	; (80010c0 <main+0x248>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d129      	bne.n	8000f18 <main+0xa0>
    {
    	  second ++;
 8000ec4:	4b7f      	ldr	r3, [pc, #508]	; (80010c4 <main+0x24c>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	4a7e      	ldr	r2, [pc, #504]	; (80010c4 <main+0x24c>)
 8000ecc:	6013      	str	r3, [r2, #0]
    	  	  if (second >= 60)
 8000ece:	4b7d      	ldr	r3, [pc, #500]	; (80010c4 <main+0x24c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2b3b      	cmp	r3, #59	; 0x3b
 8000ed4:	dd07      	ble.n	8000ee6 <main+0x6e>
    	  	  {
    	  		  second = 0;
 8000ed6:	4b7b      	ldr	r3, [pc, #492]	; (80010c4 <main+0x24c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
    	  	  	  minute++;
 8000edc:	4b7a      	ldr	r3, [pc, #488]	; (80010c8 <main+0x250>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	4a79      	ldr	r2, [pc, #484]	; (80010c8 <main+0x250>)
 8000ee4:	6013      	str	r3, [r2, #0]
    	  	  }
    	  	  if(minute >= 60)
 8000ee6:	4b78      	ldr	r3, [pc, #480]	; (80010c8 <main+0x250>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2b3b      	cmp	r3, #59	; 0x3b
 8000eec:	dd07      	ble.n	8000efe <main+0x86>
    	  	  {
    	  		  minute = 0;
 8000eee:	4b76      	ldr	r3, [pc, #472]	; (80010c8 <main+0x250>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
    	  	  	  hour++;
 8000ef4:	4b75      	ldr	r3, [pc, #468]	; (80010cc <main+0x254>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	4a74      	ldr	r2, [pc, #464]	; (80010cc <main+0x254>)
 8000efc:	6013      	str	r3, [r2, #0]
    	  	  }
    	  	  if(hour >= 24)
 8000efe:	4b73      	ldr	r3, [pc, #460]	; (80010cc <main+0x254>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2b17      	cmp	r3, #23
 8000f04:	dd02      	ble.n	8000f0c <main+0x94>
    	  	  {
    	  		  hour = 0;
 8000f06:	4b71      	ldr	r3, [pc, #452]	; (80010cc <main+0x254>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
    	  	  }
    	  	  updateClockBuffer();
 8000f0c:	f7ff fe58 	bl	8000bc0 <updateClockBuffer>
	            setTimer(1000);
 8000f10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f14:	f7ff ff14 	bl	8000d40 <setTimer>
    }
    if(timer_flag_matrix==1)
 8000f18:	4b6d      	ldr	r3, [pc, #436]	; (80010d0 <main+0x258>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d112      	bne.n	8000f46 <main+0xce>
    {
    	updateLedMatrix(index_led_matrix++);
 8000f20:	4b6c      	ldr	r3, [pc, #432]	; (80010d4 <main+0x25c>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	1c5a      	adds	r2, r3, #1
 8000f26:	496b      	ldr	r1, [pc, #428]	; (80010d4 <main+0x25c>)
 8000f28:	600a      	str	r2, [r1, #0]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff fdbc 	bl	8000aa8 <updateLedMatrix>
        if(index_led_matrix>=MAX_LED_MATRIX)
 8000f30:	4b68      	ldr	r3, [pc, #416]	; (80010d4 <main+0x25c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2208      	movs	r2, #8
 8000f36:	4293      	cmp	r3, r2
 8000f38:	db02      	blt.n	8000f40 <main+0xc8>
        	index_led_matrix=0;
 8000f3a:	4b66      	ldr	r3, [pc, #408]	; (80010d4 <main+0x25c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
        setTimer_maxtrix(10);
 8000f40:	200a      	movs	r0, #10
 8000f42:	f7ff feb5 	bl	8000cb0 <setTimer_maxtrix>
    }
    if(timer_flag_uppdate==1)
 8000f46:	4b64      	ldr	r3, [pc, #400]	; (80010d8 <main+0x260>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d106      	bne.n	8000f5c <main+0xe4>
    {
    	updateMatrix_buffer(matrix_buffer);
 8000f4e:	4863      	ldr	r0, [pc, #396]	; (80010dc <main+0x264>)
 8000f50:	f7ff fa8a 	bl	8000468 <updateMatrix_buffer>
    	setTimer_maxtrix_uppdate(1000);
 8000f54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f58:	f7ff fe90 	bl	8000c7c <setTimer_maxtrix_uppdate>



    }
    if(timer_flag2==1)
 8000f5c:	4b60      	ldr	r3, [pc, #384]	; (80010e0 <main+0x268>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d10b      	bne.n	8000f7c <main+0x104>
    {
        HAL_GPIO_TogglePin(Led_Red_GPIO_Port, Led_Red_Pin);
 8000f64:	2120      	movs	r1, #32
 8000f66:	485f      	ldr	r0, [pc, #380]	; (80010e4 <main+0x26c>)
 8000f68:	f000 fd6c 	bl	8001a44 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(DOT_GPIO_Port, DOT_Pin);
 8000f6c:	2110      	movs	r1, #16
 8000f6e:	485d      	ldr	r0, [pc, #372]	; (80010e4 <main+0x26c>)
 8000f70:	f000 fd68 	bl	8001a44 <HAL_GPIO_TogglePin>
        setTimer2(1000);
 8000f74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f78:	f7ff ff4a 	bl	8000e10 <setTimer2>

    }
    if(timer_flag1==1)
 8000f7c:	4b5a      	ldr	r3, [pc, #360]	; (80010e8 <main+0x270>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d19b      	bne.n	8000ebc <main+0x44>
    {
        if(index_led>= MAX_LED)
 8000f84:	4b59      	ldr	r3, [pc, #356]	; (80010ec <main+0x274>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2204      	movs	r2, #4
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	db02      	blt.n	8000f94 <main+0x11c>
        {
        	index_led=0;
 8000f8e:	4b57      	ldr	r3, [pc, #348]	; (80010ec <main+0x274>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
        }
        // Chuyển đổi trạng thái hiển thị LED 7 đoạn
        if (state == 0)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d120      	bne.n	8000fdc <main+0x164>
        {
            HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET); // Bật LED 1
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2140      	movs	r1, #64	; 0x40
 8000f9e:	4851      	ldr	r0, [pc, #324]	; (80010e4 <main+0x26c>)
 8000fa0:	f000 fd38 	bl	8001a14 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);   // Tắt LED 2
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	2180      	movs	r1, #128	; 0x80
 8000fa8:	484e      	ldr	r0, [pc, #312]	; (80010e4 <main+0x26c>)
 8000faa:	f000 fd33 	bl	8001a14 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);   // Tắt LED 3
 8000fae:	2201      	movs	r2, #1
 8000fb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fb4:	484b      	ldr	r0, [pc, #300]	; (80010e4 <main+0x26c>)
 8000fb6:	f000 fd2d 	bl	8001a14 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);   // Tắt LED 4
 8000fba:	2201      	movs	r2, #1
 8000fbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fc0:	4848      	ldr	r0, [pc, #288]	; (80010e4 <main+0x26c>)
 8000fc2:	f000 fd27 	bl	8001a14 <HAL_GPIO_WritePin>
            update7SEG(index_led++); // Hiển thị số 1
 8000fc6:	4b49      	ldr	r3, [pc, #292]	; (80010ec <main+0x274>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	1c5a      	adds	r2, r3, #1
 8000fcc:	4947      	ldr	r1, [pc, #284]	; (80010ec <main+0x274>)
 8000fce:	600a      	str	r2, [r1, #0]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fdc3 	bl	8000b5c <update7SEG>
            state = 1; // Cập nhật trạng thái
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	e06a      	b.n	80010b2 <main+0x23a>
        }
        else if (state == 1)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d120      	bne.n	8001024 <main+0x1ac>
        {
            HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);   // Tắt LED 1
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	2140      	movs	r1, #64	; 0x40
 8000fe6:	483f      	ldr	r0, [pc, #252]	; (80010e4 <main+0x26c>)
 8000fe8:	f000 fd14 	bl	8001a14 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET); // Bật LED 2
 8000fec:	2200      	movs	r2, #0
 8000fee:	2180      	movs	r1, #128	; 0x80
 8000ff0:	483c      	ldr	r0, [pc, #240]	; (80010e4 <main+0x26c>)
 8000ff2:	f000 fd0f 	bl	8001a14 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);   // Tắt LED 3
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ffc:	4839      	ldr	r0, [pc, #228]	; (80010e4 <main+0x26c>)
 8000ffe:	f000 fd09 	bl	8001a14 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);   // Tắt LED 4
 8001002:	2201      	movs	r2, #1
 8001004:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001008:	4836      	ldr	r0, [pc, #216]	; (80010e4 <main+0x26c>)
 800100a:	f000 fd03 	bl	8001a14 <HAL_GPIO_WritePin>
            update7SEG(index_led++); // Hiển thị số 1
 800100e:	4b37      	ldr	r3, [pc, #220]	; (80010ec <main+0x274>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	1c5a      	adds	r2, r3, #1
 8001014:	4935      	ldr	r1, [pc, #212]	; (80010ec <main+0x274>)
 8001016:	600a      	str	r2, [r1, #0]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fd9f 	bl	8000b5c <update7SEG>
            state = 2; // Cập nhật trạng thái
 800101e:	2302      	movs	r3, #2
 8001020:	607b      	str	r3, [r7, #4]
 8001022:	e046      	b.n	80010b2 <main+0x23a>
        }
        else if (state == 2)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b02      	cmp	r3, #2
 8001028:	d120      	bne.n	800106c <main+0x1f4>
            {
                HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);   // Tắt LED 1
 800102a:	2201      	movs	r2, #1
 800102c:	2140      	movs	r1, #64	; 0x40
 800102e:	482d      	ldr	r0, [pc, #180]	; (80010e4 <main+0x26c>)
 8001030:	f000 fcf0 	bl	8001a14 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET); // Bật LED 2
 8001034:	2201      	movs	r2, #1
 8001036:	2180      	movs	r1, #128	; 0x80
 8001038:	482a      	ldr	r0, [pc, #168]	; (80010e4 <main+0x26c>)
 800103a:	f000 fceb 	bl	8001a14 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);   // Tắt LED 3
 800103e:	2200      	movs	r2, #0
 8001040:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001044:	4827      	ldr	r0, [pc, #156]	; (80010e4 <main+0x26c>)
 8001046:	f000 fce5 	bl	8001a14 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);   // Tắt LED 4
 800104a:	2201      	movs	r2, #1
 800104c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001050:	4824      	ldr	r0, [pc, #144]	; (80010e4 <main+0x26c>)
 8001052:	f000 fcdf 	bl	8001a14 <HAL_GPIO_WritePin>
                update7SEG(index_led++); // Hiển thị số 1
 8001056:	4b25      	ldr	r3, [pc, #148]	; (80010ec <main+0x274>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	1c5a      	adds	r2, r3, #1
 800105c:	4923      	ldr	r1, [pc, #140]	; (80010ec <main+0x274>)
 800105e:	600a      	str	r2, [r1, #0]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fd7b 	bl	8000b5c <update7SEG>
                state = 3; // Cập nhật trạng thái
 8001066:	2303      	movs	r3, #3
 8001068:	607b      	str	r3, [r7, #4]
 800106a:	e022      	b.n	80010b2 <main+0x23a>
            }
        else if (state == 3)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b03      	cmp	r3, #3
 8001070:	d11f      	bne.n	80010b2 <main+0x23a>
            {
                HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);   // Tắt LED 1
 8001072:	2201      	movs	r2, #1
 8001074:	2140      	movs	r1, #64	; 0x40
 8001076:	481b      	ldr	r0, [pc, #108]	; (80010e4 <main+0x26c>)
 8001078:	f000 fccc 	bl	8001a14 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET); // Bật LED 2
 800107c:	2201      	movs	r2, #1
 800107e:	2180      	movs	r1, #128	; 0x80
 8001080:	4818      	ldr	r0, [pc, #96]	; (80010e4 <main+0x26c>)
 8001082:	f000 fcc7 	bl	8001a14 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);   // Tắt LED 3
 8001086:	2201      	movs	r2, #1
 8001088:	f44f 7180 	mov.w	r1, #256	; 0x100
 800108c:	4815      	ldr	r0, [pc, #84]	; (80010e4 <main+0x26c>)
 800108e:	f000 fcc1 	bl	8001a14 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);   // Tắt LED 4
 8001092:	2200      	movs	r2, #0
 8001094:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001098:	4812      	ldr	r0, [pc, #72]	; (80010e4 <main+0x26c>)
 800109a:	f000 fcbb 	bl	8001a14 <HAL_GPIO_WritePin>
                update7SEG(index_led++); // Hiển thị số 1
 800109e:	4b13      	ldr	r3, [pc, #76]	; (80010ec <main+0x274>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	1c5a      	adds	r2, r3, #1
 80010a4:	4911      	ldr	r1, [pc, #68]	; (80010ec <main+0x274>)
 80010a6:	600a      	str	r2, [r1, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fd57 	bl	8000b5c <update7SEG>
                state = 0; // Cập nhật trạng thái
 80010ae:	2300      	movs	r3, #0
 80010b0:	607b      	str	r3, [r7, #4]
            }
        setTimer1(250);
 80010b2:	20fa      	movs	r0, #250	; 0xfa
 80010b4:	f7ff fe78 	bl	8000da8 <setTimer1>
    if(timer_flag==1)
 80010b8:	e700      	b.n	8000ebc <main+0x44>
 80010ba:	bf00      	nop
 80010bc:	200000b8 	.word	0x200000b8
 80010c0:	20000094 	.word	0x20000094
 80010c4:	20000008 	.word	0x20000008
 80010c8:	20000004 	.word	0x20000004
 80010cc:	20000000 	.word	0x20000000
 80010d0:	200000ac 	.word	0x200000ac
 80010d4:	2000008c 	.word	0x2000008c
 80010d8:	200000b4 	.word	0x200000b4
 80010dc:	2000000c 	.word	0x2000000c
 80010e0:	200000a4 	.word	0x200000a4
 80010e4:	40010800 	.word	0x40010800
 80010e8:	2000009c 	.word	0x2000009c
 80010ec:	20000078 	.word	0x20000078

080010f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b090      	sub	sp, #64	; 0x40
 80010f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f6:	f107 0318 	add.w	r3, r7, #24
 80010fa:	2228      	movs	r2, #40	; 0x28
 80010fc:	2100      	movs	r1, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f001 fc96 	bl	8002a30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
 8001110:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001112:	2302      	movs	r3, #2
 8001114:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001116:	2301      	movs	r3, #1
 8001118:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800111a:	2310      	movs	r3, #16
 800111c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800111e:	2300      	movs	r3, #0
 8001120:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001122:	f107 0318 	add.w	r3, r7, #24
 8001126:	4618      	mov	r0, r3
 8001128:	f000 fca6 	bl	8001a78 <HAL_RCC_OscConfig>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001132:	f000 f8cb 	bl	80012cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001136:	230f      	movs	r3, #15
 8001138:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800113a:	2300      	movs	r3, #0
 800113c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f000 ff12 	bl	8001f78 <HAL_RCC_ClockConfig>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800115a:	f000 f8b7 	bl	80012cc <Error_Handler>
  }
}
 800115e:	bf00      	nop
 8001160:	3740      	adds	r7, #64	; 0x40
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800116e:	f107 0308 	add.w	r3, r7, #8
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800117c:	463b      	mov	r3, r7
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001184:	4b1d      	ldr	r3, [pc, #116]	; (80011fc <MX_TIM2_Init+0x94>)
 8001186:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800118a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800118c:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <MX_TIM2_Init+0x94>)
 800118e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001192:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001194:	4b19      	ldr	r3, [pc, #100]	; (80011fc <MX_TIM2_Init+0x94>)
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800119a:	4b18      	ldr	r3, [pc, #96]	; (80011fc <MX_TIM2_Init+0x94>)
 800119c:	2209      	movs	r2, #9
 800119e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a0:	4b16      	ldr	r3, [pc, #88]	; (80011fc <MX_TIM2_Init+0x94>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a6:	4b15      	ldr	r3, [pc, #84]	; (80011fc <MX_TIM2_Init+0x94>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011ac:	4813      	ldr	r0, [pc, #76]	; (80011fc <MX_TIM2_Init+0x94>)
 80011ae:	f001 f83f 	bl	8002230 <HAL_TIM_Base_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011b8:	f000 f888 	bl	80012cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011c2:	f107 0308 	add.w	r3, r7, #8
 80011c6:	4619      	mov	r1, r3
 80011c8:	480c      	ldr	r0, [pc, #48]	; (80011fc <MX_TIM2_Init+0x94>)
 80011ca:	f001 f9bd 	bl	8002548 <HAL_TIM_ConfigClockSource>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80011d4:	f000 f87a 	bl	80012cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d8:	2300      	movs	r3, #0
 80011da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011dc:	2300      	movs	r3, #0
 80011de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011e0:	463b      	mov	r3, r7
 80011e2:	4619      	mov	r1, r3
 80011e4:	4805      	ldr	r0, [pc, #20]	; (80011fc <MX_TIM2_Init+0x94>)
 80011e6:	f001 fb95 	bl	8002914 <HAL_TIMEx_MasterConfigSynchronization>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011f0:	f000 f86c 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011f4:	bf00      	nop
 80011f6:	3718      	adds	r7, #24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	200000b8 	.word	0x200000b8

08001200 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001206:	f107 0308 	add.w	r3, r7, #8
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001214:	4b22      	ldr	r3, [pc, #136]	; (80012a0 <MX_GPIO_Init+0xa0>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	4a21      	ldr	r2, [pc, #132]	; (80012a0 <MX_GPIO_Init+0xa0>)
 800121a:	f043 0304 	orr.w	r3, r3, #4
 800121e:	6193      	str	r3, [r2, #24]
 8001220:	4b1f      	ldr	r3, [pc, #124]	; (80012a0 <MX_GPIO_Init+0xa0>)
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	f003 0304 	and.w	r3, r3, #4
 8001228:	607b      	str	r3, [r7, #4]
 800122a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800122c:	4b1c      	ldr	r3, [pc, #112]	; (80012a0 <MX_GPIO_Init+0xa0>)
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	4a1b      	ldr	r2, [pc, #108]	; (80012a0 <MX_GPIO_Init+0xa0>)
 8001232:	f043 0308 	orr.w	r3, r3, #8
 8001236:	6193      	str	r3, [r2, #24]
 8001238:	4b19      	ldr	r3, [pc, #100]	; (80012a0 <MX_GPIO_Init+0xa0>)
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	f003 0308 	and.w	r3, r3, #8
 8001240:	603b      	str	r3, [r7, #0]
 8001242:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENM0_Pin|ENM1_Pin|DOT_Pin|Led_Red_Pin
 8001244:	2200      	movs	r2, #0
 8001246:	f64f 71fc 	movw	r1, #65532	; 0xfffc
 800124a:	4816      	ldr	r0, [pc, #88]	; (80012a4 <MX_GPIO_Init+0xa4>)
 800124c:	f000 fbe2 	bl	8001a14 <HAL_GPIO_WritePin>
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|ROW2_Pin
 8001250:	2200      	movs	r2, #0
 8001252:	f64f 717f 	movw	r1, #65407	; 0xff7f
 8001256:	4814      	ldr	r0, [pc, #80]	; (80012a8 <MX_GPIO_Init+0xa8>)
 8001258:	f000 fbdc 	bl	8001a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENM0_Pin ENM1_Pin DOT_Pin Led_Red_Pin
                           EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           ENM2_Pin ENM3_Pin ENM4_Pin ENM5_Pin
                           ENM6_Pin ENM7_Pin */
  GPIO_InitStruct.Pin = ENM0_Pin|ENM1_Pin|DOT_Pin|Led_Red_Pin
 800125c:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8001260:	60bb      	str	r3, [r7, #8]
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001262:	2301      	movs	r3, #1
 8001264:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126a:	2302      	movs	r3, #2
 800126c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126e:	f107 0308 	add.w	r3, r7, #8
 8001272:	4619      	mov	r1, r3
 8001274:	480b      	ldr	r0, [pc, #44]	; (80012a4 <MX_GPIO_Init+0xa4>)
 8001276:	f000 fa53 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin ROW2_Pin
                           ROW3_Pin ROW4_Pin ROW5_Pin ROW6_Pin
                           ROW7_Pin SEG3_Pin SEG4_Pin SEG5_Pin
                           SEG6_Pin ROW0_Pin ROW1_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|ROW2_Pin
 800127a:	f64f 737f 	movw	r3, #65407	; 0xff7f
 800127e:	60bb      	str	r3, [r7, #8]
                          |ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin
                          |ROW7_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin|ROW0_Pin|ROW1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001280:	2301      	movs	r3, #1
 8001282:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001288:	2302      	movs	r3, #2
 800128a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128c:	f107 0308 	add.w	r3, r7, #8
 8001290:	4619      	mov	r1, r3
 8001292:	4805      	ldr	r0, [pc, #20]	; (80012a8 <MX_GPIO_Init+0xa8>)
 8001294:	f000 fa44 	bl	8001720 <HAL_GPIO_Init>

}
 8001298:	bf00      	nop
 800129a:	3718      	adds	r7, #24
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40010800 	.word	0x40010800
 80012a8:	40010c00 	.word	0x40010c00

080012ac <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 timerRun();
 80012b4:	f7ff fd5e 	bl	8000d74 <timerRun>
 timerRun1();
 80012b8:	f7ff fd90 	bl	8000ddc <timerRun1>
 timerRun2();
 80012bc:	f7ff fdc2 	bl	8000e44 <timerRun2>
 timerRun_maxtrix();
 80012c0:	f7ff fd10 	bl	8000ce4 <timerRun_maxtrix>
}
 80012c4:	bf00      	nop
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d0:	b672      	cpsid	i
}
 80012d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012d4:	e7fe      	b.n	80012d4 <Error_Handler+0x8>
	...

080012d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012de:	4b15      	ldr	r3, [pc, #84]	; (8001334 <HAL_MspInit+0x5c>)
 80012e0:	699b      	ldr	r3, [r3, #24]
 80012e2:	4a14      	ldr	r2, [pc, #80]	; (8001334 <HAL_MspInit+0x5c>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6193      	str	r3, [r2, #24]
 80012ea:	4b12      	ldr	r3, [pc, #72]	; (8001334 <HAL_MspInit+0x5c>)
 80012ec:	699b      	ldr	r3, [r3, #24]
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f6:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <HAL_MspInit+0x5c>)
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	4a0e      	ldr	r2, [pc, #56]	; (8001334 <HAL_MspInit+0x5c>)
 80012fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001300:	61d3      	str	r3, [r2, #28]
 8001302:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <HAL_MspInit+0x5c>)
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800130e:	4b0a      	ldr	r3, [pc, #40]	; (8001338 <HAL_MspInit+0x60>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	4a04      	ldr	r2, [pc, #16]	; (8001338 <HAL_MspInit+0x60>)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800132a:	bf00      	nop
 800132c:	3714      	adds	r7, #20
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr
 8001334:	40021000 	.word	0x40021000
 8001338:	40010000 	.word	0x40010000

0800133c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800134c:	d113      	bne.n	8001376 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800134e:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <HAL_TIM_Base_MspInit+0x44>)
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	4a0b      	ldr	r2, [pc, #44]	; (8001380 <HAL_TIM_Base_MspInit+0x44>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	61d3      	str	r3, [r2, #28]
 800135a:	4b09      	ldr	r3, [pc, #36]	; (8001380 <HAL_TIM_Base_MspInit+0x44>)
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001366:	2200      	movs	r2, #0
 8001368:	2100      	movs	r1, #0
 800136a:	201c      	movs	r0, #28
 800136c:	f000 f9a1 	bl	80016b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001370:	201c      	movs	r0, #28
 8001372:	f000 f9ba 	bl	80016ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001376:	bf00      	nop
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40021000 	.word	0x40021000

08001384 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001388:	e7fe      	b.n	8001388 <NMI_Handler+0x4>

0800138a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800138e:	e7fe      	b.n	800138e <HardFault_Handler+0x4>

08001390 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001394:	e7fe      	b.n	8001394 <MemManage_Handler+0x4>

08001396 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800139a:	e7fe      	b.n	800139a <BusFault_Handler+0x4>

0800139c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <UsageFault_Handler+0x4>

080013a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr

080013ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc80      	pop	{r7}
 80013b8:	4770      	bx	lr

080013ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc80      	pop	{r7}
 80013c4:	4770      	bx	lr

080013c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ca:	f000 f87f 	bl	80014cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
	...

080013d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013d8:	4802      	ldr	r0, [pc, #8]	; (80013e4 <TIM2_IRQHandler+0x10>)
 80013da:	f000 ffc5 	bl	8002368 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	200000b8 	.word	0x200000b8

080013e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr

080013f4 <Reset_Handler>:
 80013f4:	f7ff fff8 	bl	80013e8 <SystemInit>
 80013f8:	480b      	ldr	r0, [pc, #44]	; (8001428 <LoopFillZerobss+0xe>)
 80013fa:	490c      	ldr	r1, [pc, #48]	; (800142c <LoopFillZerobss+0x12>)
 80013fc:	4a0c      	ldr	r2, [pc, #48]	; (8001430 <LoopFillZerobss+0x16>)
 80013fe:	2300      	movs	r3, #0
 8001400:	e002      	b.n	8001408 <LoopCopyDataInit>

08001402 <CopyDataInit>:
 8001402:	58d4      	ldr	r4, [r2, r3]
 8001404:	50c4      	str	r4, [r0, r3]
 8001406:	3304      	adds	r3, #4

08001408 <LoopCopyDataInit>:
 8001408:	18c4      	adds	r4, r0, r3
 800140a:	428c      	cmp	r4, r1
 800140c:	d3f9      	bcc.n	8001402 <CopyDataInit>
 800140e:	4a09      	ldr	r2, [pc, #36]	; (8001434 <LoopFillZerobss+0x1a>)
 8001410:	4c09      	ldr	r4, [pc, #36]	; (8001438 <LoopFillZerobss+0x1e>)
 8001412:	2300      	movs	r3, #0
 8001414:	e001      	b.n	800141a <LoopFillZerobss>

08001416 <FillZerobss>:
 8001416:	6013      	str	r3, [r2, #0]
 8001418:	3204      	adds	r2, #4

0800141a <LoopFillZerobss>:
 800141a:	42a2      	cmp	r2, r4
 800141c:	d3fb      	bcc.n	8001416 <FillZerobss>
 800141e:	f001 fae3 	bl	80029e8 <__libc_init_array>
 8001422:	f7ff fd29 	bl	8000e78 <main>
 8001426:	4770      	bx	lr
 8001428:	20000000 	.word	0x20000000
 800142c:	2000005c 	.word	0x2000005c
 8001430:	08002a84 	.word	0x08002a84
 8001434:	2000005c 	.word	0x2000005c
 8001438:	20000104 	.word	0x20000104

0800143c <ADC1_2_IRQHandler>:
 800143c:	e7fe      	b.n	800143c <ADC1_2_IRQHandler>
	...

08001440 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001444:	4b08      	ldr	r3, [pc, #32]	; (8001468 <HAL_Init+0x28>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a07      	ldr	r2, [pc, #28]	; (8001468 <HAL_Init+0x28>)
 800144a:	f043 0310 	orr.w	r3, r3, #16
 800144e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001450:	2003      	movs	r0, #3
 8001452:	f000 f923 	bl	800169c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001456:	200f      	movs	r0, #15
 8001458:	f000 f808 	bl	800146c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800145c:	f7ff ff3c 	bl	80012d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40022000 	.word	0x40022000

0800146c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001474:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <HAL_InitTick+0x54>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <HAL_InitTick+0x58>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	4619      	mov	r1, r3
 800147e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001482:	fbb3 f3f1 	udiv	r3, r3, r1
 8001486:	fbb2 f3f3 	udiv	r3, r2, r3
 800148a:	4618      	mov	r0, r3
 800148c:	f000 f93b 	bl	8001706 <HAL_SYSTICK_Config>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e00e      	b.n	80014b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2b0f      	cmp	r3, #15
 800149e:	d80a      	bhi.n	80014b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014a0:	2200      	movs	r2, #0
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	f04f 30ff 	mov.w	r0, #4294967295
 80014a8:	f000 f903 	bl	80016b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014ac:	4a06      	ldr	r2, [pc, #24]	; (80014c8 <HAL_InitTick+0x5c>)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014b2:	2300      	movs	r3, #0
 80014b4:	e000      	b.n	80014b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000050 	.word	0x20000050
 80014c4:	20000058 	.word	0x20000058
 80014c8:	20000054 	.word	0x20000054

080014cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014d0:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <HAL_IncTick+0x1c>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	461a      	mov	r2, r3
 80014d6:	4b05      	ldr	r3, [pc, #20]	; (80014ec <HAL_IncTick+0x20>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4413      	add	r3, r2
 80014dc:	4a03      	ldr	r2, [pc, #12]	; (80014ec <HAL_IncTick+0x20>)
 80014de:	6013      	str	r3, [r2, #0]
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr
 80014e8:	20000058 	.word	0x20000058
 80014ec:	20000100 	.word	0x20000100

080014f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return uwTick;
 80014f4:	4b02      	ldr	r3, [pc, #8]	; (8001500 <HAL_GetTick+0x10>)
 80014f6:	681b      	ldr	r3, [r3, #0]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr
 8001500:	20000100 	.word	0x20000100

08001504 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <__NVIC_SetPriorityGrouping+0x44>)
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800151a:	68ba      	ldr	r2, [r7, #8]
 800151c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001520:	4013      	ands	r3, r2
 8001522:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800152c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001534:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001536:	4a04      	ldr	r2, [pc, #16]	; (8001548 <__NVIC_SetPriorityGrouping+0x44>)
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	60d3      	str	r3, [r2, #12]
}
 800153c:	bf00      	nop
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	bc80      	pop	{r7}
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001550:	4b04      	ldr	r3, [pc, #16]	; (8001564 <__NVIC_GetPriorityGrouping+0x18>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	0a1b      	lsrs	r3, r3, #8
 8001556:	f003 0307 	and.w	r3, r3, #7
}
 800155a:	4618      	mov	r0, r3
 800155c:	46bd      	mov	sp, r7
 800155e:	bc80      	pop	{r7}
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001576:	2b00      	cmp	r3, #0
 8001578:	db0b      	blt.n	8001592 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	f003 021f 	and.w	r2, r3, #31
 8001580:	4906      	ldr	r1, [pc, #24]	; (800159c <__NVIC_EnableIRQ+0x34>)
 8001582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001586:	095b      	lsrs	r3, r3, #5
 8001588:	2001      	movs	r0, #1
 800158a:	fa00 f202 	lsl.w	r2, r0, r2
 800158e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr
 800159c:	e000e100 	.word	0xe000e100

080015a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	6039      	str	r1, [r7, #0]
 80015aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	db0a      	blt.n	80015ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	490c      	ldr	r1, [pc, #48]	; (80015ec <__NVIC_SetPriority+0x4c>)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	0112      	lsls	r2, r2, #4
 80015c0:	b2d2      	uxtb	r2, r2
 80015c2:	440b      	add	r3, r1
 80015c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015c8:	e00a      	b.n	80015e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	4908      	ldr	r1, [pc, #32]	; (80015f0 <__NVIC_SetPriority+0x50>)
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	f003 030f 	and.w	r3, r3, #15
 80015d6:	3b04      	subs	r3, #4
 80015d8:	0112      	lsls	r2, r2, #4
 80015da:	b2d2      	uxtb	r2, r2
 80015dc:	440b      	add	r3, r1
 80015de:	761a      	strb	r2, [r3, #24]
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	e000e100 	.word	0xe000e100
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b089      	sub	sp, #36	; 0x24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	f1c3 0307 	rsb	r3, r3, #7
 800160e:	2b04      	cmp	r3, #4
 8001610:	bf28      	it	cs
 8001612:	2304      	movcs	r3, #4
 8001614:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	3304      	adds	r3, #4
 800161a:	2b06      	cmp	r3, #6
 800161c:	d902      	bls.n	8001624 <NVIC_EncodePriority+0x30>
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	3b03      	subs	r3, #3
 8001622:	e000      	b.n	8001626 <NVIC_EncodePriority+0x32>
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001628:	f04f 32ff 	mov.w	r2, #4294967295
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	43da      	mvns	r2, r3
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	401a      	ands	r2, r3
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800163c:	f04f 31ff 	mov.w	r1, #4294967295
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	fa01 f303 	lsl.w	r3, r1, r3
 8001646:	43d9      	mvns	r1, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800164c:	4313      	orrs	r3, r2
         );
}
 800164e:	4618      	mov	r0, r3
 8001650:	3724      	adds	r7, #36	; 0x24
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr

08001658 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3b01      	subs	r3, #1
 8001664:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001668:	d301      	bcc.n	800166e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800166a:	2301      	movs	r3, #1
 800166c:	e00f      	b.n	800168e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800166e:	4a0a      	ldr	r2, [pc, #40]	; (8001698 <SysTick_Config+0x40>)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3b01      	subs	r3, #1
 8001674:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001676:	210f      	movs	r1, #15
 8001678:	f04f 30ff 	mov.w	r0, #4294967295
 800167c:	f7ff ff90 	bl	80015a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001680:	4b05      	ldr	r3, [pc, #20]	; (8001698 <SysTick_Config+0x40>)
 8001682:	2200      	movs	r2, #0
 8001684:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001686:	4b04      	ldr	r3, [pc, #16]	; (8001698 <SysTick_Config+0x40>)
 8001688:	2207      	movs	r2, #7
 800168a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	e000e010 	.word	0xe000e010

0800169c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f7ff ff2d 	bl	8001504 <__NVIC_SetPriorityGrouping>
}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b086      	sub	sp, #24
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	4603      	mov	r3, r0
 80016ba:	60b9      	str	r1, [r7, #8]
 80016bc:	607a      	str	r2, [r7, #4]
 80016be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016c4:	f7ff ff42 	bl	800154c <__NVIC_GetPriorityGrouping>
 80016c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	68b9      	ldr	r1, [r7, #8]
 80016ce:	6978      	ldr	r0, [r7, #20]
 80016d0:	f7ff ff90 	bl	80015f4 <NVIC_EncodePriority>
 80016d4:	4602      	mov	r2, r0
 80016d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016da:	4611      	mov	r1, r2
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ff5f 	bl	80015a0 <__NVIC_SetPriority>
}
 80016e2:	bf00      	nop
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	4603      	mov	r3, r0
 80016f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff ff35 	bl	8001568 <__NVIC_EnableIRQ>
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b082      	sub	sp, #8
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7ff ffa2 	bl	8001658 <SysTick_Config>
 8001714:	4603      	mov	r3, r0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
	...

08001720 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001720:	b480      	push	{r7}
 8001722:	b08b      	sub	sp, #44	; 0x2c
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800172a:	2300      	movs	r3, #0
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800172e:	2300      	movs	r3, #0
 8001730:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001732:	e148      	b.n	80019c6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001734:	2201      	movs	r2, #1
 8001736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	69fa      	ldr	r2, [r7, #28]
 8001744:	4013      	ands	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	429a      	cmp	r2, r3
 800174e:	f040 8137 	bne.w	80019c0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	4aa3      	ldr	r2, [pc, #652]	; (80019e4 <HAL_GPIO_Init+0x2c4>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d05e      	beq.n	800181a <HAL_GPIO_Init+0xfa>
 800175c:	4aa1      	ldr	r2, [pc, #644]	; (80019e4 <HAL_GPIO_Init+0x2c4>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d875      	bhi.n	800184e <HAL_GPIO_Init+0x12e>
 8001762:	4aa1      	ldr	r2, [pc, #644]	; (80019e8 <HAL_GPIO_Init+0x2c8>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d058      	beq.n	800181a <HAL_GPIO_Init+0xfa>
 8001768:	4a9f      	ldr	r2, [pc, #636]	; (80019e8 <HAL_GPIO_Init+0x2c8>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d86f      	bhi.n	800184e <HAL_GPIO_Init+0x12e>
 800176e:	4a9f      	ldr	r2, [pc, #636]	; (80019ec <HAL_GPIO_Init+0x2cc>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d052      	beq.n	800181a <HAL_GPIO_Init+0xfa>
 8001774:	4a9d      	ldr	r2, [pc, #628]	; (80019ec <HAL_GPIO_Init+0x2cc>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d869      	bhi.n	800184e <HAL_GPIO_Init+0x12e>
 800177a:	4a9d      	ldr	r2, [pc, #628]	; (80019f0 <HAL_GPIO_Init+0x2d0>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d04c      	beq.n	800181a <HAL_GPIO_Init+0xfa>
 8001780:	4a9b      	ldr	r2, [pc, #620]	; (80019f0 <HAL_GPIO_Init+0x2d0>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d863      	bhi.n	800184e <HAL_GPIO_Init+0x12e>
 8001786:	4a9b      	ldr	r2, [pc, #620]	; (80019f4 <HAL_GPIO_Init+0x2d4>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d046      	beq.n	800181a <HAL_GPIO_Init+0xfa>
 800178c:	4a99      	ldr	r2, [pc, #612]	; (80019f4 <HAL_GPIO_Init+0x2d4>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d85d      	bhi.n	800184e <HAL_GPIO_Init+0x12e>
 8001792:	2b12      	cmp	r3, #18
 8001794:	d82a      	bhi.n	80017ec <HAL_GPIO_Init+0xcc>
 8001796:	2b12      	cmp	r3, #18
 8001798:	d859      	bhi.n	800184e <HAL_GPIO_Init+0x12e>
 800179a:	a201      	add	r2, pc, #4	; (adr r2, 80017a0 <HAL_GPIO_Init+0x80>)
 800179c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a0:	0800181b 	.word	0x0800181b
 80017a4:	080017f5 	.word	0x080017f5
 80017a8:	08001807 	.word	0x08001807
 80017ac:	08001849 	.word	0x08001849
 80017b0:	0800184f 	.word	0x0800184f
 80017b4:	0800184f 	.word	0x0800184f
 80017b8:	0800184f 	.word	0x0800184f
 80017bc:	0800184f 	.word	0x0800184f
 80017c0:	0800184f 	.word	0x0800184f
 80017c4:	0800184f 	.word	0x0800184f
 80017c8:	0800184f 	.word	0x0800184f
 80017cc:	0800184f 	.word	0x0800184f
 80017d0:	0800184f 	.word	0x0800184f
 80017d4:	0800184f 	.word	0x0800184f
 80017d8:	0800184f 	.word	0x0800184f
 80017dc:	0800184f 	.word	0x0800184f
 80017e0:	0800184f 	.word	0x0800184f
 80017e4:	080017fd 	.word	0x080017fd
 80017e8:	08001811 	.word	0x08001811
 80017ec:	4a82      	ldr	r2, [pc, #520]	; (80019f8 <HAL_GPIO_Init+0x2d8>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d013      	beq.n	800181a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017f2:	e02c      	b.n	800184e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	623b      	str	r3, [r7, #32]
          break;
 80017fa:	e029      	b.n	8001850 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	3304      	adds	r3, #4
 8001802:	623b      	str	r3, [r7, #32]
          break;
 8001804:	e024      	b.n	8001850 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	3308      	adds	r3, #8
 800180c:	623b      	str	r3, [r7, #32]
          break;
 800180e:	e01f      	b.n	8001850 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	330c      	adds	r3, #12
 8001816:	623b      	str	r3, [r7, #32]
          break;
 8001818:	e01a      	b.n	8001850 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d102      	bne.n	8001828 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001822:	2304      	movs	r3, #4
 8001824:	623b      	str	r3, [r7, #32]
          break;
 8001826:	e013      	b.n	8001850 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d105      	bne.n	800183c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001830:	2308      	movs	r3, #8
 8001832:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	69fa      	ldr	r2, [r7, #28]
 8001838:	611a      	str	r2, [r3, #16]
          break;
 800183a:	e009      	b.n	8001850 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800183c:	2308      	movs	r3, #8
 800183e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	69fa      	ldr	r2, [r7, #28]
 8001844:	615a      	str	r2, [r3, #20]
          break;
 8001846:	e003      	b.n	8001850 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001848:	2300      	movs	r3, #0
 800184a:	623b      	str	r3, [r7, #32]
          break;
 800184c:	e000      	b.n	8001850 <HAL_GPIO_Init+0x130>
          break;
 800184e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	2bff      	cmp	r3, #255	; 0xff
 8001854:	d801      	bhi.n	800185a <HAL_GPIO_Init+0x13a>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	e001      	b.n	800185e <HAL_GPIO_Init+0x13e>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	3304      	adds	r3, #4
 800185e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	2bff      	cmp	r3, #255	; 0xff
 8001864:	d802      	bhi.n	800186c <HAL_GPIO_Init+0x14c>
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	e002      	b.n	8001872 <HAL_GPIO_Init+0x152>
 800186c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186e:	3b08      	subs	r3, #8
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	210f      	movs	r1, #15
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	fa01 f303 	lsl.w	r3, r1, r3
 8001880:	43db      	mvns	r3, r3
 8001882:	401a      	ands	r2, r3
 8001884:	6a39      	ldr	r1, [r7, #32]
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	fa01 f303 	lsl.w	r3, r1, r3
 800188c:	431a      	orrs	r2, r3
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189a:	2b00      	cmp	r3, #0
 800189c:	f000 8090 	beq.w	80019c0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018a0:	4b56      	ldr	r3, [pc, #344]	; (80019fc <HAL_GPIO_Init+0x2dc>)
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	4a55      	ldr	r2, [pc, #340]	; (80019fc <HAL_GPIO_Init+0x2dc>)
 80018a6:	f043 0301 	orr.w	r3, r3, #1
 80018aa:	6193      	str	r3, [r2, #24]
 80018ac:	4b53      	ldr	r3, [pc, #332]	; (80019fc <HAL_GPIO_Init+0x2dc>)
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	f003 0301 	and.w	r3, r3, #1
 80018b4:	60bb      	str	r3, [r7, #8]
 80018b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018b8:	4a51      	ldr	r2, [pc, #324]	; (8001a00 <HAL_GPIO_Init+0x2e0>)
 80018ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018bc:	089b      	lsrs	r3, r3, #2
 80018be:	3302      	adds	r3, #2
 80018c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c8:	f003 0303 	and.w	r3, r3, #3
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	220f      	movs	r2, #15
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	4013      	ands	r3, r2
 80018da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a49      	ldr	r2, [pc, #292]	; (8001a04 <HAL_GPIO_Init+0x2e4>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d00d      	beq.n	8001900 <HAL_GPIO_Init+0x1e0>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a48      	ldr	r2, [pc, #288]	; (8001a08 <HAL_GPIO_Init+0x2e8>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d007      	beq.n	80018fc <HAL_GPIO_Init+0x1dc>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a47      	ldr	r2, [pc, #284]	; (8001a0c <HAL_GPIO_Init+0x2ec>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d101      	bne.n	80018f8 <HAL_GPIO_Init+0x1d8>
 80018f4:	2302      	movs	r3, #2
 80018f6:	e004      	b.n	8001902 <HAL_GPIO_Init+0x1e2>
 80018f8:	2303      	movs	r3, #3
 80018fa:	e002      	b.n	8001902 <HAL_GPIO_Init+0x1e2>
 80018fc:	2301      	movs	r3, #1
 80018fe:	e000      	b.n	8001902 <HAL_GPIO_Init+0x1e2>
 8001900:	2300      	movs	r3, #0
 8001902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001904:	f002 0203 	and.w	r2, r2, #3
 8001908:	0092      	lsls	r2, r2, #2
 800190a:	4093      	lsls	r3, r2
 800190c:	68fa      	ldr	r2, [r7, #12]
 800190e:	4313      	orrs	r3, r2
 8001910:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001912:	493b      	ldr	r1, [pc, #236]	; (8001a00 <HAL_GPIO_Init+0x2e0>)
 8001914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001916:	089b      	lsrs	r3, r3, #2
 8001918:	3302      	adds	r3, #2
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d006      	beq.n	800193a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800192c:	4b38      	ldr	r3, [pc, #224]	; (8001a10 <HAL_GPIO_Init+0x2f0>)
 800192e:	689a      	ldr	r2, [r3, #8]
 8001930:	4937      	ldr	r1, [pc, #220]	; (8001a10 <HAL_GPIO_Init+0x2f0>)
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	4313      	orrs	r3, r2
 8001936:	608b      	str	r3, [r1, #8]
 8001938:	e006      	b.n	8001948 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800193a:	4b35      	ldr	r3, [pc, #212]	; (8001a10 <HAL_GPIO_Init+0x2f0>)
 800193c:	689a      	ldr	r2, [r3, #8]
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	43db      	mvns	r3, r3
 8001942:	4933      	ldr	r1, [pc, #204]	; (8001a10 <HAL_GPIO_Init+0x2f0>)
 8001944:	4013      	ands	r3, r2
 8001946:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d006      	beq.n	8001962 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001954:	4b2e      	ldr	r3, [pc, #184]	; (8001a10 <HAL_GPIO_Init+0x2f0>)
 8001956:	68da      	ldr	r2, [r3, #12]
 8001958:	492d      	ldr	r1, [pc, #180]	; (8001a10 <HAL_GPIO_Init+0x2f0>)
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	4313      	orrs	r3, r2
 800195e:	60cb      	str	r3, [r1, #12]
 8001960:	e006      	b.n	8001970 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001962:	4b2b      	ldr	r3, [pc, #172]	; (8001a10 <HAL_GPIO_Init+0x2f0>)
 8001964:	68da      	ldr	r2, [r3, #12]
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	43db      	mvns	r3, r3
 800196a:	4929      	ldr	r1, [pc, #164]	; (8001a10 <HAL_GPIO_Init+0x2f0>)
 800196c:	4013      	ands	r3, r2
 800196e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d006      	beq.n	800198a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800197c:	4b24      	ldr	r3, [pc, #144]	; (8001a10 <HAL_GPIO_Init+0x2f0>)
 800197e:	685a      	ldr	r2, [r3, #4]
 8001980:	4923      	ldr	r1, [pc, #140]	; (8001a10 <HAL_GPIO_Init+0x2f0>)
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	4313      	orrs	r3, r2
 8001986:	604b      	str	r3, [r1, #4]
 8001988:	e006      	b.n	8001998 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800198a:	4b21      	ldr	r3, [pc, #132]	; (8001a10 <HAL_GPIO_Init+0x2f0>)
 800198c:	685a      	ldr	r2, [r3, #4]
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	43db      	mvns	r3, r3
 8001992:	491f      	ldr	r1, [pc, #124]	; (8001a10 <HAL_GPIO_Init+0x2f0>)
 8001994:	4013      	ands	r3, r2
 8001996:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d006      	beq.n	80019b2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019a4:	4b1a      	ldr	r3, [pc, #104]	; (8001a10 <HAL_GPIO_Init+0x2f0>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	4919      	ldr	r1, [pc, #100]	; (8001a10 <HAL_GPIO_Init+0x2f0>)
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	600b      	str	r3, [r1, #0]
 80019b0:	e006      	b.n	80019c0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019b2:	4b17      	ldr	r3, [pc, #92]	; (8001a10 <HAL_GPIO_Init+0x2f0>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	43db      	mvns	r3, r3
 80019ba:	4915      	ldr	r1, [pc, #84]	; (8001a10 <HAL_GPIO_Init+0x2f0>)
 80019bc:	4013      	ands	r3, r2
 80019be:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	3301      	adds	r3, #1
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	fa22 f303 	lsr.w	r3, r2, r3
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	f47f aeaf 	bne.w	8001734 <HAL_GPIO_Init+0x14>
  }
}
 80019d6:	bf00      	nop
 80019d8:	bf00      	nop
 80019da:	372c      	adds	r7, #44	; 0x2c
 80019dc:	46bd      	mov	sp, r7
 80019de:	bc80      	pop	{r7}
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	10320000 	.word	0x10320000
 80019e8:	10310000 	.word	0x10310000
 80019ec:	10220000 	.word	0x10220000
 80019f0:	10210000 	.word	0x10210000
 80019f4:	10120000 	.word	0x10120000
 80019f8:	10110000 	.word	0x10110000
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40010000 	.word	0x40010000
 8001a04:	40010800 	.word	0x40010800
 8001a08:	40010c00 	.word	0x40010c00
 8001a0c:	40011000 	.word	0x40011000
 8001a10:	40010400 	.word	0x40010400

08001a14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	807b      	strh	r3, [r7, #2]
 8001a20:	4613      	mov	r3, r2
 8001a22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a24:	787b      	ldrb	r3, [r7, #1]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a2a:	887a      	ldrh	r2, [r7, #2]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a30:	e003      	b.n	8001a3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a32:	887b      	ldrh	r3, [r7, #2]
 8001a34:	041a      	lsls	r2, r3, #16
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	611a      	str	r2, [r3, #16]
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr

08001a44 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a56:	887a      	ldrh	r2, [r7, #2]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	041a      	lsls	r2, r3, #16
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	43d9      	mvns	r1, r3
 8001a62:	887b      	ldrh	r3, [r7, #2]
 8001a64:	400b      	ands	r3, r1
 8001a66:	431a      	orrs	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	611a      	str	r2, [r3, #16]
}
 8001a6c:	bf00      	nop
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr
	...

08001a78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e26c      	b.n	8001f64 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f000 8087 	beq.w	8001ba6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a98:	4b92      	ldr	r3, [pc, #584]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f003 030c 	and.w	r3, r3, #12
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d00c      	beq.n	8001abe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001aa4:	4b8f      	ldr	r3, [pc, #572]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 030c 	and.w	r3, r3, #12
 8001aac:	2b08      	cmp	r3, #8
 8001aae:	d112      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x5e>
 8001ab0:	4b8c      	ldr	r3, [pc, #560]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001abc:	d10b      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001abe:	4b89      	ldr	r3, [pc, #548]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d06c      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x12c>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d168      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e246      	b.n	8001f64 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ade:	d106      	bne.n	8001aee <HAL_RCC_OscConfig+0x76>
 8001ae0:	4b80      	ldr	r3, [pc, #512]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a7f      	ldr	r2, [pc, #508]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001ae6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aea:	6013      	str	r3, [r2, #0]
 8001aec:	e02e      	b.n	8001b4c <HAL_RCC_OscConfig+0xd4>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d10c      	bne.n	8001b10 <HAL_RCC_OscConfig+0x98>
 8001af6:	4b7b      	ldr	r3, [pc, #492]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a7a      	ldr	r2, [pc, #488]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b00:	6013      	str	r3, [r2, #0]
 8001b02:	4b78      	ldr	r3, [pc, #480]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a77      	ldr	r2, [pc, #476]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001b08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	e01d      	b.n	8001b4c <HAL_RCC_OscConfig+0xd4>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b18:	d10c      	bne.n	8001b34 <HAL_RCC_OscConfig+0xbc>
 8001b1a:	4b72      	ldr	r3, [pc, #456]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a71      	ldr	r2, [pc, #452]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001b20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b24:	6013      	str	r3, [r2, #0]
 8001b26:	4b6f      	ldr	r3, [pc, #444]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a6e      	ldr	r2, [pc, #440]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b30:	6013      	str	r3, [r2, #0]
 8001b32:	e00b      	b.n	8001b4c <HAL_RCC_OscConfig+0xd4>
 8001b34:	4b6b      	ldr	r3, [pc, #428]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a6a      	ldr	r2, [pc, #424]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001b3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b3e:	6013      	str	r3, [r2, #0]
 8001b40:	4b68      	ldr	r3, [pc, #416]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a67      	ldr	r2, [pc, #412]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001b46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d013      	beq.n	8001b7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b54:	f7ff fccc 	bl	80014f0 <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b5c:	f7ff fcc8 	bl	80014f0 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b64      	cmp	r3, #100	; 0x64
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e1fa      	b.n	8001f64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b6e:	4b5d      	ldr	r3, [pc, #372]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d0f0      	beq.n	8001b5c <HAL_RCC_OscConfig+0xe4>
 8001b7a:	e014      	b.n	8001ba6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7c:	f7ff fcb8 	bl	80014f0 <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b84:	f7ff fcb4 	bl	80014f0 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b64      	cmp	r3, #100	; 0x64
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e1e6      	b.n	8001f64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b96:	4b53      	ldr	r3, [pc, #332]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1f0      	bne.n	8001b84 <HAL_RCC_OscConfig+0x10c>
 8001ba2:	e000      	b.n	8001ba6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d063      	beq.n	8001c7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bb2:	4b4c      	ldr	r3, [pc, #304]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f003 030c 	and.w	r3, r3, #12
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d00b      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bbe:	4b49      	ldr	r3, [pc, #292]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f003 030c 	and.w	r3, r3, #12
 8001bc6:	2b08      	cmp	r3, #8
 8001bc8:	d11c      	bne.n	8001c04 <HAL_RCC_OscConfig+0x18c>
 8001bca:	4b46      	ldr	r3, [pc, #280]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d116      	bne.n	8001c04 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bd6:	4b43      	ldr	r3, [pc, #268]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d005      	beq.n	8001bee <HAL_RCC_OscConfig+0x176>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d001      	beq.n	8001bee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e1ba      	b.n	8001f64 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bee:	4b3d      	ldr	r3, [pc, #244]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	4939      	ldr	r1, [pc, #228]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c02:	e03a      	b.n	8001c7a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d020      	beq.n	8001c4e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c0c:	4b36      	ldr	r3, [pc, #216]	; (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c12:	f7ff fc6d 	bl	80014f0 <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c1a:	f7ff fc69 	bl	80014f0 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e19b      	b.n	8001f64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c2c:	4b2d      	ldr	r3, [pc, #180]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d0f0      	beq.n	8001c1a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c38:	4b2a      	ldr	r3, [pc, #168]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	695b      	ldr	r3, [r3, #20]
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	4927      	ldr	r1, [pc, #156]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	600b      	str	r3, [r1, #0]
 8001c4c:	e015      	b.n	8001c7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c4e:	4b26      	ldr	r3, [pc, #152]	; (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c54:	f7ff fc4c 	bl	80014f0 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c5c:	f7ff fc48 	bl	80014f0 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e17a      	b.n	8001f64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1f0      	bne.n	8001c5c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0308 	and.w	r3, r3, #8
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d03a      	beq.n	8001cfc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d019      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c8e:	4b17      	ldr	r3, [pc, #92]	; (8001cec <HAL_RCC_OscConfig+0x274>)
 8001c90:	2201      	movs	r2, #1
 8001c92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c94:	f7ff fc2c 	bl	80014f0 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c9c:	f7ff fc28 	bl	80014f0 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e15a      	b.n	8001f64 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cae:	4b0d      	ldr	r3, [pc, #52]	; (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d0f0      	beq.n	8001c9c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cba:	2001      	movs	r0, #1
 8001cbc:	f000 fa9a 	bl	80021f4 <RCC_Delay>
 8001cc0:	e01c      	b.n	8001cfc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cc2:	4b0a      	ldr	r3, [pc, #40]	; (8001cec <HAL_RCC_OscConfig+0x274>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc8:	f7ff fc12 	bl	80014f0 <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cce:	e00f      	b.n	8001cf0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cd0:	f7ff fc0e 	bl	80014f0 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d908      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e140      	b.n	8001f64 <HAL_RCC_OscConfig+0x4ec>
 8001ce2:	bf00      	nop
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	42420000 	.word	0x42420000
 8001cec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cf0:	4b9e      	ldr	r3, [pc, #632]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1e9      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f000 80a6 	beq.w	8001e56 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d0e:	4b97      	ldr	r3, [pc, #604]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d10d      	bne.n	8001d36 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d1a:	4b94      	ldr	r3, [pc, #592]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	4a93      	ldr	r2, [pc, #588]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d24:	61d3      	str	r3, [r2, #28]
 8001d26:	4b91      	ldr	r3, [pc, #580]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2e:	60bb      	str	r3, [r7, #8]
 8001d30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d32:	2301      	movs	r3, #1
 8001d34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d36:	4b8e      	ldr	r3, [pc, #568]	; (8001f70 <HAL_RCC_OscConfig+0x4f8>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d118      	bne.n	8001d74 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d42:	4b8b      	ldr	r3, [pc, #556]	; (8001f70 <HAL_RCC_OscConfig+0x4f8>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a8a      	ldr	r2, [pc, #552]	; (8001f70 <HAL_RCC_OscConfig+0x4f8>)
 8001d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d4e:	f7ff fbcf 	bl	80014f0 <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d54:	e008      	b.n	8001d68 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d56:	f7ff fbcb 	bl	80014f0 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b64      	cmp	r3, #100	; 0x64
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e0fd      	b.n	8001f64 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d68:	4b81      	ldr	r3, [pc, #516]	; (8001f70 <HAL_RCC_OscConfig+0x4f8>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d0f0      	beq.n	8001d56 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d106      	bne.n	8001d8a <HAL_RCC_OscConfig+0x312>
 8001d7c:	4b7b      	ldr	r3, [pc, #492]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	4a7a      	ldr	r2, [pc, #488]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	6213      	str	r3, [r2, #32]
 8001d88:	e02d      	b.n	8001de6 <HAL_RCC_OscConfig+0x36e>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d10c      	bne.n	8001dac <HAL_RCC_OscConfig+0x334>
 8001d92:	4b76      	ldr	r3, [pc, #472]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001d94:	6a1b      	ldr	r3, [r3, #32]
 8001d96:	4a75      	ldr	r2, [pc, #468]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001d98:	f023 0301 	bic.w	r3, r3, #1
 8001d9c:	6213      	str	r3, [r2, #32]
 8001d9e:	4b73      	ldr	r3, [pc, #460]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001da0:	6a1b      	ldr	r3, [r3, #32]
 8001da2:	4a72      	ldr	r2, [pc, #456]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001da4:	f023 0304 	bic.w	r3, r3, #4
 8001da8:	6213      	str	r3, [r2, #32]
 8001daa:	e01c      	b.n	8001de6 <HAL_RCC_OscConfig+0x36e>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	2b05      	cmp	r3, #5
 8001db2:	d10c      	bne.n	8001dce <HAL_RCC_OscConfig+0x356>
 8001db4:	4b6d      	ldr	r3, [pc, #436]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001db6:	6a1b      	ldr	r3, [r3, #32]
 8001db8:	4a6c      	ldr	r2, [pc, #432]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001dba:	f043 0304 	orr.w	r3, r3, #4
 8001dbe:	6213      	str	r3, [r2, #32]
 8001dc0:	4b6a      	ldr	r3, [pc, #424]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	4a69      	ldr	r2, [pc, #420]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001dc6:	f043 0301 	orr.w	r3, r3, #1
 8001dca:	6213      	str	r3, [r2, #32]
 8001dcc:	e00b      	b.n	8001de6 <HAL_RCC_OscConfig+0x36e>
 8001dce:	4b67      	ldr	r3, [pc, #412]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001dd0:	6a1b      	ldr	r3, [r3, #32]
 8001dd2:	4a66      	ldr	r2, [pc, #408]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001dd4:	f023 0301 	bic.w	r3, r3, #1
 8001dd8:	6213      	str	r3, [r2, #32]
 8001dda:	4b64      	ldr	r3, [pc, #400]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
 8001dde:	4a63      	ldr	r2, [pc, #396]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001de0:	f023 0304 	bic.w	r3, r3, #4
 8001de4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d015      	beq.n	8001e1a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dee:	f7ff fb7f 	bl	80014f0 <HAL_GetTick>
 8001df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df4:	e00a      	b.n	8001e0c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001df6:	f7ff fb7b 	bl	80014f0 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e0ab      	b.n	8001f64 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e0c:	4b57      	ldr	r3, [pc, #348]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d0ee      	beq.n	8001df6 <HAL_RCC_OscConfig+0x37e>
 8001e18:	e014      	b.n	8001e44 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e1a:	f7ff fb69 	bl	80014f0 <HAL_GetTick>
 8001e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e20:	e00a      	b.n	8001e38 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e22:	f7ff fb65 	bl	80014f0 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e095      	b.n	8001f64 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e38:	4b4c      	ldr	r3, [pc, #304]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001e3a:	6a1b      	ldr	r3, [r3, #32]
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d1ee      	bne.n	8001e22 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e44:	7dfb      	ldrb	r3, [r7, #23]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d105      	bne.n	8001e56 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e4a:	4b48      	ldr	r3, [pc, #288]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	4a47      	ldr	r2, [pc, #284]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001e50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e54:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f000 8081 	beq.w	8001f62 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e60:	4b42      	ldr	r3, [pc, #264]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f003 030c 	and.w	r3, r3, #12
 8001e68:	2b08      	cmp	r3, #8
 8001e6a:	d061      	beq.n	8001f30 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	69db      	ldr	r3, [r3, #28]
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d146      	bne.n	8001f02 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e74:	4b3f      	ldr	r3, [pc, #252]	; (8001f74 <HAL_RCC_OscConfig+0x4fc>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7a:	f7ff fb39 	bl	80014f0 <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e80:	e008      	b.n	8001e94 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e82:	f7ff fb35 	bl	80014f0 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e067      	b.n	8001f64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e94:	4b35      	ldr	r3, [pc, #212]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1f0      	bne.n	8001e82 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ea8:	d108      	bne.n	8001ebc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001eaa:	4b30      	ldr	r3, [pc, #192]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	492d      	ldr	r1, [pc, #180]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ebc:	4b2b      	ldr	r3, [pc, #172]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a19      	ldr	r1, [r3, #32]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ecc:	430b      	orrs	r3, r1
 8001ece:	4927      	ldr	r1, [pc, #156]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ed4:	4b27      	ldr	r3, [pc, #156]	; (8001f74 <HAL_RCC_OscConfig+0x4fc>)
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eda:	f7ff fb09 	bl	80014f0 <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee2:	f7ff fb05 	bl	80014f0 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e037      	b.n	8001f64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ef4:	4b1d      	ldr	r3, [pc, #116]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d0f0      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x46a>
 8001f00:	e02f      	b.n	8001f62 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f02:	4b1c      	ldr	r3, [pc, #112]	; (8001f74 <HAL_RCC_OscConfig+0x4fc>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f08:	f7ff faf2 	bl	80014f0 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f10:	f7ff faee 	bl	80014f0 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e020      	b.n	8001f64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f22:	4b12      	ldr	r3, [pc, #72]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f0      	bne.n	8001f10 <HAL_RCC_OscConfig+0x498>
 8001f2e:	e018      	b.n	8001f62 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	69db      	ldr	r3, [r3, #28]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d101      	bne.n	8001f3c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e013      	b.n	8001f64 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f3c:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <HAL_RCC_OscConfig+0x4f4>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d106      	bne.n	8001f5e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d001      	beq.n	8001f62 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e000      	b.n	8001f64 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3718      	adds	r7, #24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	40007000 	.word	0x40007000
 8001f74:	42420060 	.word	0x42420060

08001f78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d101      	bne.n	8001f8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e0d0      	b.n	800212e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f8c:	4b6a      	ldr	r3, [pc, #424]	; (8002138 <HAL_RCC_ClockConfig+0x1c0>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d910      	bls.n	8001fbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9a:	4b67      	ldr	r3, [pc, #412]	; (8002138 <HAL_RCC_ClockConfig+0x1c0>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f023 0207 	bic.w	r2, r3, #7
 8001fa2:	4965      	ldr	r1, [pc, #404]	; (8002138 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001faa:	4b63      	ldr	r3, [pc, #396]	; (8002138 <HAL_RCC_ClockConfig+0x1c0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d001      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e0b8      	b.n	800212e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d020      	beq.n	800200a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0304 	and.w	r3, r3, #4
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d005      	beq.n	8001fe0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fd4:	4b59      	ldr	r3, [pc, #356]	; (800213c <HAL_RCC_ClockConfig+0x1c4>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	4a58      	ldr	r2, [pc, #352]	; (800213c <HAL_RCC_ClockConfig+0x1c4>)
 8001fda:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fde:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0308 	and.w	r3, r3, #8
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d005      	beq.n	8001ff8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fec:	4b53      	ldr	r3, [pc, #332]	; (800213c <HAL_RCC_ClockConfig+0x1c4>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	4a52      	ldr	r2, [pc, #328]	; (800213c <HAL_RCC_ClockConfig+0x1c4>)
 8001ff2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ff6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ff8:	4b50      	ldr	r3, [pc, #320]	; (800213c <HAL_RCC_ClockConfig+0x1c4>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	494d      	ldr	r1, [pc, #308]	; (800213c <HAL_RCC_ClockConfig+0x1c4>)
 8002006:	4313      	orrs	r3, r2
 8002008:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b00      	cmp	r3, #0
 8002014:	d040      	beq.n	8002098 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d107      	bne.n	800202e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800201e:	4b47      	ldr	r3, [pc, #284]	; (800213c <HAL_RCC_ClockConfig+0x1c4>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d115      	bne.n	8002056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e07f      	b.n	800212e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b02      	cmp	r3, #2
 8002034:	d107      	bne.n	8002046 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002036:	4b41      	ldr	r3, [pc, #260]	; (800213c <HAL_RCC_ClockConfig+0x1c4>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d109      	bne.n	8002056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e073      	b.n	800212e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002046:	4b3d      	ldr	r3, [pc, #244]	; (800213c <HAL_RCC_ClockConfig+0x1c4>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e06b      	b.n	800212e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002056:	4b39      	ldr	r3, [pc, #228]	; (800213c <HAL_RCC_ClockConfig+0x1c4>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f023 0203 	bic.w	r2, r3, #3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	4936      	ldr	r1, [pc, #216]	; (800213c <HAL_RCC_ClockConfig+0x1c4>)
 8002064:	4313      	orrs	r3, r2
 8002066:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002068:	f7ff fa42 	bl	80014f0 <HAL_GetTick>
 800206c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800206e:	e00a      	b.n	8002086 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002070:	f7ff fa3e 	bl	80014f0 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	f241 3288 	movw	r2, #5000	; 0x1388
 800207e:	4293      	cmp	r3, r2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e053      	b.n	800212e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002086:	4b2d      	ldr	r3, [pc, #180]	; (800213c <HAL_RCC_ClockConfig+0x1c4>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f003 020c 	and.w	r2, r3, #12
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	429a      	cmp	r2, r3
 8002096:	d1eb      	bne.n	8002070 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002098:	4b27      	ldr	r3, [pc, #156]	; (8002138 <HAL_RCC_ClockConfig+0x1c0>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d210      	bcs.n	80020c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020a6:	4b24      	ldr	r3, [pc, #144]	; (8002138 <HAL_RCC_ClockConfig+0x1c0>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f023 0207 	bic.w	r2, r3, #7
 80020ae:	4922      	ldr	r1, [pc, #136]	; (8002138 <HAL_RCC_ClockConfig+0x1c0>)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b6:	4b20      	ldr	r3, [pc, #128]	; (8002138 <HAL_RCC_ClockConfig+0x1c0>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d001      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e032      	b.n	800212e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0304 	and.w	r3, r3, #4
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d008      	beq.n	80020e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020d4:	4b19      	ldr	r3, [pc, #100]	; (800213c <HAL_RCC_ClockConfig+0x1c4>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	4916      	ldr	r1, [pc, #88]	; (800213c <HAL_RCC_ClockConfig+0x1c4>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0308 	and.w	r3, r3, #8
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d009      	beq.n	8002106 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020f2:	4b12      	ldr	r3, [pc, #72]	; (800213c <HAL_RCC_ClockConfig+0x1c4>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	490e      	ldr	r1, [pc, #56]	; (800213c <HAL_RCC_ClockConfig+0x1c4>)
 8002102:	4313      	orrs	r3, r2
 8002104:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002106:	f000 f821 	bl	800214c <HAL_RCC_GetSysClockFreq>
 800210a:	4602      	mov	r2, r0
 800210c:	4b0b      	ldr	r3, [pc, #44]	; (800213c <HAL_RCC_ClockConfig+0x1c4>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	091b      	lsrs	r3, r3, #4
 8002112:	f003 030f 	and.w	r3, r3, #15
 8002116:	490a      	ldr	r1, [pc, #40]	; (8002140 <HAL_RCC_ClockConfig+0x1c8>)
 8002118:	5ccb      	ldrb	r3, [r1, r3]
 800211a:	fa22 f303 	lsr.w	r3, r2, r3
 800211e:	4a09      	ldr	r2, [pc, #36]	; (8002144 <HAL_RCC_ClockConfig+0x1cc>)
 8002120:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002122:	4b09      	ldr	r3, [pc, #36]	; (8002148 <HAL_RCC_ClockConfig+0x1d0>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff f9a0 	bl	800146c <HAL_InitTick>

  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	40022000 	.word	0x40022000
 800213c:	40021000 	.word	0x40021000
 8002140:	08002a58 	.word	0x08002a58
 8002144:	20000050 	.word	0x20000050
 8002148:	20000054 	.word	0x20000054

0800214c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800214c:	b480      	push	{r7}
 800214e:	b087      	sub	sp, #28
 8002150:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002152:	2300      	movs	r3, #0
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	2300      	movs	r3, #0
 8002158:	60bb      	str	r3, [r7, #8]
 800215a:	2300      	movs	r3, #0
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	2300      	movs	r3, #0
 8002160:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002162:	2300      	movs	r3, #0
 8002164:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002166:	4b1e      	ldr	r3, [pc, #120]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f003 030c 	and.w	r3, r3, #12
 8002172:	2b04      	cmp	r3, #4
 8002174:	d002      	beq.n	800217c <HAL_RCC_GetSysClockFreq+0x30>
 8002176:	2b08      	cmp	r3, #8
 8002178:	d003      	beq.n	8002182 <HAL_RCC_GetSysClockFreq+0x36>
 800217a:	e027      	b.n	80021cc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800217c:	4b19      	ldr	r3, [pc, #100]	; (80021e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800217e:	613b      	str	r3, [r7, #16]
      break;
 8002180:	e027      	b.n	80021d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	0c9b      	lsrs	r3, r3, #18
 8002186:	f003 030f 	and.w	r3, r3, #15
 800218a:	4a17      	ldr	r2, [pc, #92]	; (80021e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800218c:	5cd3      	ldrb	r3, [r2, r3]
 800218e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d010      	beq.n	80021bc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800219a:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x94>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	0c5b      	lsrs	r3, r3, #17
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	4a11      	ldr	r2, [pc, #68]	; (80021ec <HAL_RCC_GetSysClockFreq+0xa0>)
 80021a6:	5cd3      	ldrb	r3, [r2, r3]
 80021a8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a0d      	ldr	r2, [pc, #52]	; (80021e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80021ae:	fb02 f203 	mul.w	r2, r2, r3
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b8:	617b      	str	r3, [r7, #20]
 80021ba:	e004      	b.n	80021c6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a0c      	ldr	r2, [pc, #48]	; (80021f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80021c0:	fb02 f303 	mul.w	r3, r2, r3
 80021c4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	613b      	str	r3, [r7, #16]
      break;
 80021ca:	e002      	b.n	80021d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021cc:	4b05      	ldr	r3, [pc, #20]	; (80021e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80021ce:	613b      	str	r3, [r7, #16]
      break;
 80021d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021d2:	693b      	ldr	r3, [r7, #16]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	371c      	adds	r7, #28
 80021d8:	46bd      	mov	sp, r7
 80021da:	bc80      	pop	{r7}
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	40021000 	.word	0x40021000
 80021e4:	007a1200 	.word	0x007a1200
 80021e8:	08002a68 	.word	0x08002a68
 80021ec:	08002a78 	.word	0x08002a78
 80021f0:	003d0900 	.word	0x003d0900

080021f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021fc:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <RCC_Delay+0x34>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a0a      	ldr	r2, [pc, #40]	; (800222c <RCC_Delay+0x38>)
 8002202:	fba2 2303 	umull	r2, r3, r2, r3
 8002206:	0a5b      	lsrs	r3, r3, #9
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	fb02 f303 	mul.w	r3, r2, r3
 800220e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002210:	bf00      	nop
  }
  while (Delay --);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	1e5a      	subs	r2, r3, #1
 8002216:	60fa      	str	r2, [r7, #12]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1f9      	bne.n	8002210 <RCC_Delay+0x1c>
}
 800221c:	bf00      	nop
 800221e:	bf00      	nop
 8002220:	3714      	adds	r7, #20
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr
 8002228:	20000050 	.word	0x20000050
 800222c:	10624dd3 	.word	0x10624dd3

08002230 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e041      	b.n	80022c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d106      	bne.n	800225c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f7ff f870 	bl	800133c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2202      	movs	r2, #2
 8002260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3304      	adds	r3, #4
 800226c:	4619      	mov	r1, r3
 800226e:	4610      	mov	r0, r2
 8002270:	f000 fa56 	bl	8002720 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
	...

080022d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d001      	beq.n	80022e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e035      	b.n	8002354 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2202      	movs	r2, #2
 80022ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68da      	ldr	r2, [r3, #12]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f042 0201 	orr.w	r2, r2, #1
 80022fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a16      	ldr	r2, [pc, #88]	; (8002360 <HAL_TIM_Base_Start_IT+0x90>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d009      	beq.n	800231e <HAL_TIM_Base_Start_IT+0x4e>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002312:	d004      	beq.n	800231e <HAL_TIM_Base_Start_IT+0x4e>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a12      	ldr	r2, [pc, #72]	; (8002364 <HAL_TIM_Base_Start_IT+0x94>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d111      	bne.n	8002342 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2b06      	cmp	r3, #6
 800232e:	d010      	beq.n	8002352 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f042 0201 	orr.w	r2, r2, #1
 800233e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002340:	e007      	b.n	8002352 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f042 0201 	orr.w	r2, r2, #1
 8002350:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	bc80      	pop	{r7}
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	40012c00 	.word	0x40012c00
 8002364:	40000400 	.word	0x40000400

08002368 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d020      	beq.n	80023cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d01b      	beq.n	80023cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f06f 0202 	mvn.w	r2, #2
 800239c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	f003 0303 	and.w	r3, r3, #3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d003      	beq.n	80023ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 f998 	bl	80026e8 <HAL_TIM_IC_CaptureCallback>
 80023b8:	e005      	b.n	80023c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 f98b 	bl	80026d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f000 f99a 	bl	80026fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	f003 0304 	and.w	r3, r3, #4
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d020      	beq.n	8002418 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f003 0304 	and.w	r3, r3, #4
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d01b      	beq.n	8002418 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f06f 0204 	mvn.w	r2, #4
 80023e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2202      	movs	r2, #2
 80023ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 f972 	bl	80026e8 <HAL_TIM_IC_CaptureCallback>
 8002404:	e005      	b.n	8002412 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 f965 	bl	80026d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f000 f974 	bl	80026fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	f003 0308 	and.w	r3, r3, #8
 800241e:	2b00      	cmp	r3, #0
 8002420:	d020      	beq.n	8002464 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f003 0308 	and.w	r3, r3, #8
 8002428:	2b00      	cmp	r3, #0
 800242a:	d01b      	beq.n	8002464 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f06f 0208 	mvn.w	r2, #8
 8002434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2204      	movs	r2, #4
 800243a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	f003 0303 	and.w	r3, r3, #3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 f94c 	bl	80026e8 <HAL_TIM_IC_CaptureCallback>
 8002450:	e005      	b.n	800245e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 f93f 	bl	80026d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 f94e 	bl	80026fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	f003 0310 	and.w	r3, r3, #16
 800246a:	2b00      	cmp	r3, #0
 800246c:	d020      	beq.n	80024b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f003 0310 	and.w	r3, r3, #16
 8002474:	2b00      	cmp	r3, #0
 8002476:	d01b      	beq.n	80024b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f06f 0210 	mvn.w	r2, #16
 8002480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2208      	movs	r2, #8
 8002486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 f926 	bl	80026e8 <HAL_TIM_IC_CaptureCallback>
 800249c:	e005      	b.n	80024aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 f919 	bl	80026d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 f928 	bl	80026fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00c      	beq.n	80024d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d007      	beq.n	80024d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f06f 0201 	mvn.w	r2, #1
 80024cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f7fe feec 	bl	80012ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00c      	beq.n	80024f8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d007      	beq.n	80024f8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 fa6f 	bl	80029d6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00c      	beq.n	800251c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002508:	2b00      	cmp	r3, #0
 800250a:	d007      	beq.n	800251c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 f8f8 	bl	800270c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	f003 0320 	and.w	r3, r3, #32
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00c      	beq.n	8002540 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f003 0320 	and.w	r3, r3, #32
 800252c:	2b00      	cmp	r3, #0
 800252e:	d007      	beq.n	8002540 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f06f 0220 	mvn.w	r2, #32
 8002538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 fa42 	bl	80029c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002540:	bf00      	nop
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002552:	2300      	movs	r3, #0
 8002554:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800255c:	2b01      	cmp	r3, #1
 800255e:	d101      	bne.n	8002564 <HAL_TIM_ConfigClockSource+0x1c>
 8002560:	2302      	movs	r3, #2
 8002562:	e0b4      	b.n	80026ce <HAL_TIM_ConfigClockSource+0x186>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2202      	movs	r2, #2
 8002570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002582:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800258a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68ba      	ldr	r2, [r7, #8]
 8002592:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800259c:	d03e      	beq.n	800261c <HAL_TIM_ConfigClockSource+0xd4>
 800259e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025a2:	f200 8087 	bhi.w	80026b4 <HAL_TIM_ConfigClockSource+0x16c>
 80025a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025aa:	f000 8086 	beq.w	80026ba <HAL_TIM_ConfigClockSource+0x172>
 80025ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025b2:	d87f      	bhi.n	80026b4 <HAL_TIM_ConfigClockSource+0x16c>
 80025b4:	2b70      	cmp	r3, #112	; 0x70
 80025b6:	d01a      	beq.n	80025ee <HAL_TIM_ConfigClockSource+0xa6>
 80025b8:	2b70      	cmp	r3, #112	; 0x70
 80025ba:	d87b      	bhi.n	80026b4 <HAL_TIM_ConfigClockSource+0x16c>
 80025bc:	2b60      	cmp	r3, #96	; 0x60
 80025be:	d050      	beq.n	8002662 <HAL_TIM_ConfigClockSource+0x11a>
 80025c0:	2b60      	cmp	r3, #96	; 0x60
 80025c2:	d877      	bhi.n	80026b4 <HAL_TIM_ConfigClockSource+0x16c>
 80025c4:	2b50      	cmp	r3, #80	; 0x50
 80025c6:	d03c      	beq.n	8002642 <HAL_TIM_ConfigClockSource+0xfa>
 80025c8:	2b50      	cmp	r3, #80	; 0x50
 80025ca:	d873      	bhi.n	80026b4 <HAL_TIM_ConfigClockSource+0x16c>
 80025cc:	2b40      	cmp	r3, #64	; 0x40
 80025ce:	d058      	beq.n	8002682 <HAL_TIM_ConfigClockSource+0x13a>
 80025d0:	2b40      	cmp	r3, #64	; 0x40
 80025d2:	d86f      	bhi.n	80026b4 <HAL_TIM_ConfigClockSource+0x16c>
 80025d4:	2b30      	cmp	r3, #48	; 0x30
 80025d6:	d064      	beq.n	80026a2 <HAL_TIM_ConfigClockSource+0x15a>
 80025d8:	2b30      	cmp	r3, #48	; 0x30
 80025da:	d86b      	bhi.n	80026b4 <HAL_TIM_ConfigClockSource+0x16c>
 80025dc:	2b20      	cmp	r3, #32
 80025de:	d060      	beq.n	80026a2 <HAL_TIM_ConfigClockSource+0x15a>
 80025e0:	2b20      	cmp	r3, #32
 80025e2:	d867      	bhi.n	80026b4 <HAL_TIM_ConfigClockSource+0x16c>
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d05c      	beq.n	80026a2 <HAL_TIM_ConfigClockSource+0x15a>
 80025e8:	2b10      	cmp	r3, #16
 80025ea:	d05a      	beq.n	80026a2 <HAL_TIM_ConfigClockSource+0x15a>
 80025ec:	e062      	b.n	80026b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6818      	ldr	r0, [r3, #0]
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	6899      	ldr	r1, [r3, #8]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	f000 f96a 	bl	80028d6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002610:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68ba      	ldr	r2, [r7, #8]
 8002618:	609a      	str	r2, [r3, #8]
      break;
 800261a:	e04f      	b.n	80026bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6818      	ldr	r0, [r3, #0]
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	6899      	ldr	r1, [r3, #8]
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	f000 f953 	bl	80028d6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689a      	ldr	r2, [r3, #8]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800263e:	609a      	str	r2, [r3, #8]
      break;
 8002640:	e03c      	b.n	80026bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6818      	ldr	r0, [r3, #0]
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	6859      	ldr	r1, [r3, #4]
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	461a      	mov	r2, r3
 8002650:	f000 f8ca 	bl	80027e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2150      	movs	r1, #80	; 0x50
 800265a:	4618      	mov	r0, r3
 800265c:	f000 f921 	bl	80028a2 <TIM_ITRx_SetConfig>
      break;
 8002660:	e02c      	b.n	80026bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6818      	ldr	r0, [r3, #0]
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	6859      	ldr	r1, [r3, #4]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	461a      	mov	r2, r3
 8002670:	f000 f8e8 	bl	8002844 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2160      	movs	r1, #96	; 0x60
 800267a:	4618      	mov	r0, r3
 800267c:	f000 f911 	bl	80028a2 <TIM_ITRx_SetConfig>
      break;
 8002680:	e01c      	b.n	80026bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6818      	ldr	r0, [r3, #0]
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	6859      	ldr	r1, [r3, #4]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	461a      	mov	r2, r3
 8002690:	f000 f8aa 	bl	80027e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2140      	movs	r1, #64	; 0x40
 800269a:	4618      	mov	r0, r3
 800269c:	f000 f901 	bl	80028a2 <TIM_ITRx_SetConfig>
      break;
 80026a0:	e00c      	b.n	80026bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4619      	mov	r1, r3
 80026ac:	4610      	mov	r0, r2
 80026ae:	f000 f8f8 	bl	80028a2 <TIM_ITRx_SetConfig>
      break;
 80026b2:	e003      	b.n	80026bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	73fb      	strb	r3, [r7, #15]
      break;
 80026b8:	e000      	b.n	80026bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80026ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026d6:	b480      	push	{r7}
 80026d8:	b083      	sub	sp, #12
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026de:	bf00      	nop
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc80      	pop	{r7}
 80026e6:	4770      	bx	lr

080026e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bc80      	pop	{r7}
 80026f8:	4770      	bx	lr

080026fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b083      	sub	sp, #12
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr

0800270c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	bc80      	pop	{r7}
 800271c:	4770      	bx	lr
	...

08002720 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a2b      	ldr	r2, [pc, #172]	; (80027e0 <TIM_Base_SetConfig+0xc0>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d007      	beq.n	8002748 <TIM_Base_SetConfig+0x28>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800273e:	d003      	beq.n	8002748 <TIM_Base_SetConfig+0x28>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a28      	ldr	r2, [pc, #160]	; (80027e4 <TIM_Base_SetConfig+0xc4>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d108      	bne.n	800275a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800274e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	4313      	orrs	r3, r2
 8002758:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a20      	ldr	r2, [pc, #128]	; (80027e0 <TIM_Base_SetConfig+0xc0>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d007      	beq.n	8002772 <TIM_Base_SetConfig+0x52>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002768:	d003      	beq.n	8002772 <TIM_Base_SetConfig+0x52>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a1d      	ldr	r2, [pc, #116]	; (80027e4 <TIM_Base_SetConfig+0xc4>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d108      	bne.n	8002784 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002778:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	4313      	orrs	r3, r2
 8002782:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	4313      	orrs	r3, r2
 8002790:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a0d      	ldr	r2, [pc, #52]	; (80027e0 <TIM_Base_SetConfig+0xc0>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d103      	bne.n	80027b8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	691a      	ldr	r2, [r3, #16]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d005      	beq.n	80027d6 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	f023 0201 	bic.w	r2, r3, #1
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	611a      	str	r2, [r3, #16]
  }
}
 80027d6:	bf00      	nop
 80027d8:	3714      	adds	r7, #20
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr
 80027e0:	40012c00 	.word	0x40012c00
 80027e4:	40000400 	.word	0x40000400

080027e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b087      	sub	sp, #28
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	f023 0201 	bic.w	r2, r3, #1
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002812:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	011b      	lsls	r3, r3, #4
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	4313      	orrs	r3, r2
 800281c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f023 030a 	bic.w	r3, r3, #10
 8002824:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	4313      	orrs	r3, r2
 800282c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	621a      	str	r2, [r3, #32]
}
 800283a:	bf00      	nop
 800283c:	371c      	adds	r7, #28
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr

08002844 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002844:	b480      	push	{r7}
 8002846:	b087      	sub	sp, #28
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	f023 0210 	bic.w	r2, r3, #16
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800286e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	031b      	lsls	r3, r3, #12
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	4313      	orrs	r3, r2
 8002878:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002880:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	011b      	lsls	r3, r3, #4
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	4313      	orrs	r3, r2
 800288a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	621a      	str	r2, [r3, #32]
}
 8002898:	bf00      	nop
 800289a:	371c      	adds	r7, #28
 800289c:	46bd      	mov	sp, r7
 800289e:	bc80      	pop	{r7}
 80028a0:	4770      	bx	lr

080028a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b085      	sub	sp, #20
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
 80028aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4313      	orrs	r3, r2
 80028c0:	f043 0307 	orr.w	r3, r3, #7
 80028c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	609a      	str	r2, [r3, #8]
}
 80028cc:	bf00      	nop
 80028ce:	3714      	adds	r7, #20
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bc80      	pop	{r7}
 80028d4:	4770      	bx	lr

080028d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b087      	sub	sp, #28
 80028da:	af00      	add	r7, sp, #0
 80028dc:	60f8      	str	r0, [r7, #12]
 80028de:	60b9      	str	r1, [r7, #8]
 80028e0:	607a      	str	r2, [r7, #4]
 80028e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	021a      	lsls	r2, r3, #8
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	431a      	orrs	r2, r3
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	4313      	orrs	r3, r2
 8002902:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	609a      	str	r2, [r3, #8]
}
 800290a:	bf00      	nop
 800290c:	371c      	adds	r7, #28
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr

08002914 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002924:	2b01      	cmp	r3, #1
 8002926:	d101      	bne.n	800292c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002928:	2302      	movs	r3, #2
 800292a:	e041      	b.n	80029b0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2202      	movs	r2, #2
 8002938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002952:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	4313      	orrs	r3, r2
 800295c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a14      	ldr	r2, [pc, #80]	; (80029bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d009      	beq.n	8002984 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002978:	d004      	beq.n	8002984 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a10      	ldr	r2, [pc, #64]	; (80029c0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d10c      	bne.n	800299e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800298a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	68ba      	ldr	r2, [r7, #8]
 8002992:	4313      	orrs	r3, r2
 8002994:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68ba      	ldr	r2, [r7, #8]
 800299c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3714      	adds	r7, #20
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bc80      	pop	{r7}
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	40012c00 	.word	0x40012c00
 80029c0:	40000400 	.word	0x40000400

080029c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bc80      	pop	{r7}
 80029d4:	4770      	bx	lr

080029d6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b083      	sub	sp, #12
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr

080029e8 <__libc_init_array>:
 80029e8:	b570      	push	{r4, r5, r6, lr}
 80029ea:	2600      	movs	r6, #0
 80029ec:	4d0c      	ldr	r5, [pc, #48]	; (8002a20 <__libc_init_array+0x38>)
 80029ee:	4c0d      	ldr	r4, [pc, #52]	; (8002a24 <__libc_init_array+0x3c>)
 80029f0:	1b64      	subs	r4, r4, r5
 80029f2:	10a4      	asrs	r4, r4, #2
 80029f4:	42a6      	cmp	r6, r4
 80029f6:	d109      	bne.n	8002a0c <__libc_init_array+0x24>
 80029f8:	f000 f822 	bl	8002a40 <_init>
 80029fc:	2600      	movs	r6, #0
 80029fe:	4d0a      	ldr	r5, [pc, #40]	; (8002a28 <__libc_init_array+0x40>)
 8002a00:	4c0a      	ldr	r4, [pc, #40]	; (8002a2c <__libc_init_array+0x44>)
 8002a02:	1b64      	subs	r4, r4, r5
 8002a04:	10a4      	asrs	r4, r4, #2
 8002a06:	42a6      	cmp	r6, r4
 8002a08:	d105      	bne.n	8002a16 <__libc_init_array+0x2e>
 8002a0a:	bd70      	pop	{r4, r5, r6, pc}
 8002a0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a10:	4798      	blx	r3
 8002a12:	3601      	adds	r6, #1
 8002a14:	e7ee      	b.n	80029f4 <__libc_init_array+0xc>
 8002a16:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a1a:	4798      	blx	r3
 8002a1c:	3601      	adds	r6, #1
 8002a1e:	e7f2      	b.n	8002a06 <__libc_init_array+0x1e>
 8002a20:	08002a7c 	.word	0x08002a7c
 8002a24:	08002a7c 	.word	0x08002a7c
 8002a28:	08002a7c 	.word	0x08002a7c
 8002a2c:	08002a80 	.word	0x08002a80

08002a30 <memset>:
 8002a30:	4603      	mov	r3, r0
 8002a32:	4402      	add	r2, r0
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d100      	bne.n	8002a3a <memset+0xa>
 8002a38:	4770      	bx	lr
 8002a3a:	f803 1b01 	strb.w	r1, [r3], #1
 8002a3e:	e7f9      	b.n	8002a34 <memset+0x4>

08002a40 <_init>:
 8002a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a42:	bf00      	nop
 8002a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a46:	bc08      	pop	{r3}
 8002a48:	469e      	mov	lr, r3
 8002a4a:	4770      	bx	lr

08002a4c <_fini>:
 8002a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a4e:	bf00      	nop
 8002a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a52:	bc08      	pop	{r3}
 8002a54:	469e      	mov	lr, r3
 8002a56:	4770      	bx	lr
